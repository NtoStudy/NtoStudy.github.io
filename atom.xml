<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>出发到新的爱和喧嚣里去</title>
  
  <subtitle>万语难尽涩于口 祈尔繁芜胜常春</subtitle>
  <link href="https://ntostudy.github.io/atom.xml" rel="self"/>
  
  <link href="https://ntostudy.github.io/"/>
  <updated>2024-07-31T08:17:15.266Z</updated>
  <id>https://ntostudy.github.io/</id>
  
  <author>
    <name>NtoStudy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springboot请求响应</title>
    <link href="https://ntostudy.github.io/2024/07/31/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/"/>
    <id>https://ntostudy.github.io/2024/07/31/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/</id>
    <published>2024-07-31T08:13:02.000Z</published>
    <updated>2024-07-31T08:17:15.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBootWeb请求响应"><a href="#SpringBootWeb请求响应" class="headerlink" title="SpringBootWeb请求响应"></a>SpringBootWeb请求响应</h1><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一次的课程中，我们开发了springbootweb的入门程序。 基于SpringBoot的方式开发一个web应用，浏览器发起请求 &#x2F;hello 后 ，给浏览器返回字符串 “Hello World ~”。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20220826161735076.png" alt="image-20220826161735076"></p><p>其实呢，是我们在浏览器发起请求，请求了我们的后端web服务器(也就是内置的Tomcat)。而我们在开发web程序时呢，定义了一个控制器类Controller，请求会被部署在Tomcat中的Controller接收，然后Controller再给浏览器一个响应，响应一个字符串 “Hello World”。 而在请求响应的过程中是遵循HTTP协议的。</p><p>但是呢，这里要告诉大家的时，其实在Tomcat这类Web服务器中，是不识别我们自己定义的Controller的。但是我们前面讲到过Tomcat是一个Servlet容器，是支持Serlvet规范的，所以呢，在tomcat中是可以识别 Servlet程序的。 那我们所编写的XxxController 是如何处理请求的，又与Servlet之间有什么联系呢？</p><p>其实呢，在SpringBoot进行web程序开发时，它内置了一个核心的Servlet程序 DispatcherServlet，称之为 核心控制器。 DispatcherServlet 负责接收页面发送的请求，然后根据执行的规则，将请求再转发给后面的请求处理器Controller，请求处理器处理完请求之后，最终再由DispatcherServlet给浏览器响应数据。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20220826165340157.png" alt="image-20220826165340157"></p><p>那将来浏览器发送请求，会携带请求数据，包括：请求行、请求头；请求到达tomcat之后，tomcat会负责解析这些请求数据，然后呢将解析后的请求数据会传递给Servlet程序的HttpServletRequest对象，那也就意味着 HttpServletRequest 对象就可以获取到请求数据。 而Tomcat，还给Servlet程序传递了一个参数 HttpServletResponse，通过这个对象，我们就可以给浏览器设置响应数据 。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20220826171407354.png" alt="image-20220826171407354"> </p><p>那上述所描述的这种浏览器&#x2F;服务器的架构模式呢，我们称之为：BS架构。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20220826171454775.png" alt="image-20220826171454775"> </p><p>• BS架构：Browser&#x2F;Server，浏览器&#x2F;服务器架构模式。客户端只需要浏览器，应用程序的逻辑和数据都存储在服务端。</p><p>那今天呢，我们的课程内容主要就围绕着：请求、响应进行。 今天课程内容，主要包含三个部分：</p><blockquote><ul><li>请求</li><li>响应</li><li>分层解耦</li></ul></blockquote><h2 id="1-请求"><a href="#1-请求" class="headerlink" title="1. 请求"></a>1. 请求</h2><p>在本章节呢，我们主要讲解，如何接收页面传递过来的请求数据。</p><h3 id="1-1-Postman"><a href="#1-1-Postman" class="headerlink" title="1.1 Postman"></a>1.1 Postman</h3><p>之前我们课程中有提到当前最为主流的开发模式：前后端分离</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203095553048.png" alt="image-20221203095553048"></p><p>在这种模式下，前端技术人员基于”接口文档”，开发前端程序；后端技术人员也基于”接口文档”，开发后端程序。</p><p>由于前后端分离，对我们后端技术人员来讲，在开发过程中，是没有前端页面的，那我们怎么测试自己所开发的程序呢？</p><p>方式1：像之前SpringBoot入门案例中一样，直接使用浏览器。在浏览器中输入地址，测试后端程序。</p><ul><li>弊端：在浏览器地址栏中输入地址这种方式都是GET请求，如何我们要用到POST请求怎么办呢？<ul><li>要解决POST请求，需要程序员自己编写前端代码（比较麻烦）</li></ul></li></ul><p>方式2：使用专业的接口测试工具（课程中我们使用Postman工具）</p><h4 id="1-1-1-介绍"><a href="#1-1-1-介绍" class="headerlink" title="1.1.1 介绍"></a>1.1.1 介绍</h4><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20220826173003949.png" alt="image-20220826173003949"> </p><ul><li><p>Postman是一款功能强大的网页调试与发送网页HTTP请求的Chrome插件。</p><blockquote><p>Postman原是Chrome浏览器的插件，可以模拟浏览器向后端服务器发起任何形式(如:get、post)的HTTP请求</p><p>使用Postman还可以在发起请求时，携带一些请求参数、请求头等信息</p></blockquote></li><li><p>作用：常用于进行接口测试</p></li><li><p>特征</p><ul><li>简单</li><li>实用</li><li>美观</li><li>大方</li></ul></li></ul><h4 id="1-1-2-安装"><a href="#1-1-2-安装" class="headerlink" title="1.1.2 安装"></a>1.1.2 安装</h4><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20220826173919556.png" alt="image-20220826173919556"> </p><p>双击资料中提供的<code>Postman-win64-8.3.1-Setup.exe</code>即可自动安装。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20220826174601266.png" alt="image-20220826174601266"> </p><p>安装完成之后，进入页面中会提示有新版本可以升级（无需升级）</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20220826174900779.png" alt="image-20220826174900779"></p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203112117979.png" alt="image-20221203112117979"></p><p>界面介绍:</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20220826175306141.png" alt="image-20220826175306141"> </p><p><strong>如果我们需要将测试的请求信息保存下来，就需要创建一个postman的账号，然后登录之后才可以。</strong></p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203103623435.png" alt="image-20221203103623435"></p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203112252985.png" alt="image-20221203112252985"> </p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203112320687.png" alt="image-20221203112320687"> </p><p>登录完成之后，可以创建工作空间：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203113552785.png" alt="image-20221203113552785"></p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203113925733.png" alt="image-20221203113925733"></p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203113847126.png" alt="image-20221203113847126"></p><p>创建请求：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203114031824.png" alt="image-20221203114031824"></p><p>点击”Save”，保存当前请求</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203114231572.png" alt="image-20221203114231572"></p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203114806665.png" alt="image-20221203114806665"></p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203114852752.png" alt="image-20221203114852752"></p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203115001098.png" alt="image-20221203115001098"></p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203115041949.png" alt="image-20221203115041949"></p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203115110440.png" alt="image-20221203115110440"></p><h3 id="1-2-简单参数"><a href="#1-2-简单参数" class="headerlink" title="1.2 简单参数"></a>1.2 简单参数</h3><p>简单参数：在向服务器发起请求时，向服务器传递的是一些普通的请求数据。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20220826180550583.png" alt="image-20220826180550583"></p><p>那么在后端程序中，如何接收传递过来的普通参数数据呢？</p><p>我们在这里讲解两种方式：</p><ol><li>原始方式   </li><li>SpringBoot方式</li></ol><h4 id="1-2-1-原始方式"><a href="#1-2-1-原始方式" class="headerlink" title="1.2.1 原始方式"></a>1.2.1 原始方式</h4><p>在原始的Web程序当中，需要通过Servlet中提供的API：HttpServletRequest（请求对象），获取请求的相关信息。比如获取请求参数：</p><blockquote><p>Tomcat接收到http请求时：把请求的相关信息封装到HttpServletRequest对象中</p></blockquote><p>在Controller中，我们要想获取Request对象，可以直接在方法的形参中声明 HttpServletRequest 对象。然后就可以通过该对象来获取请求信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据指定的参数名获取请求参数的数据值</span></span><br><span class="line">String  request.getParameter(<span class="string">&quot;参数名&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//原始方式</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=10</span></span><br><span class="line">        <span class="comment">// 请求参数： name=Tom&amp;age=10   （有2个请求参数）</span></span><br><span class="line">        <span class="comment">// 第1个请求参数： name=Tom   参数名:name，参数值:Tom</span></span><br><span class="line">        <span class="comment">// 第2个请求参数： age=10     参数名:age , 参数值:10</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);<span class="comment">//name就是请求参数名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ageStr</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;age&quot;</span>);<span class="comment">//age就是请求参数名</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(ageStr);<span class="comment">//需要手动进行类型转换</span></span><br><span class="line">        System.out.println(name+<span class="string">&quot;  :  &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上这种方式，我们仅做了解。（在以后的开发中不会使用到）</p></blockquote><h4 id="1-2-2-SpringBoot方式"><a href="#1-2-2-SpringBoot方式" class="headerlink" title="1.2.2 SpringBoot方式"></a>1.2.2 SpringBoot方式</h4><p>在Springboot的环境中，对原始的API进行了封装，接收参数的形式更加简单。 如果是简单参数，参数名与形参变量名相同，定义同名的形参即可接收参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=10</span></span><br><span class="line">    <span class="comment">// 第1个请求参数： name=Tom   参数名:name，参数值:Tom</span></span><br><span class="line">    <span class="comment">// 第2个请求参数： age=10     参数名:age , 参数值:10</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//springboot方式</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(String name , Integer age )</span>&#123;<span class="comment">//形参名和请求参数名保持一致</span></span><br><span class="line">        System.out.println(name+<span class="string">&quot;  :  &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>postman测试( GET 请求)：</strong></p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203122405075.png" alt="image-20221203122405075"> </p><p><strong>postman测试( POST请求 )：</strong></p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20220826181117898.png" alt="image-20220826181117898"></p><blockquote><p><strong>结论：不论是GET请求还是POST请求，对于简单参数来讲，只要保证&#x3D;&#x3D;请求参数名和Controller方法中的形参名保持一致&#x3D;&#x3D;，就可以获取到请求参数中的数据值。</strong></p></blockquote><h4 id="1-2-3-参数名不一致"><a href="#1-2-3-参数名不一致" class="headerlink" title="1.2.3 参数名不一致"></a>1.2.3 参数名不一致</h4><p>如果方法形参名称与请求参数名称不一致，controller方法中的形参还能接收到请求参数值吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=20</span></span><br><span class="line">    <span class="comment">// 请求参数名：name</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//springboot方式</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(String username , Integer age )</span>&#123;<span class="comment">//请求参数名和形参名不相同</span></span><br><span class="line">        System.out.println(username+<span class="string">&quot;  :  &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案：运行没有报错。 controller方法中的username值为：null，age值为20</p><ul><li>结论：对于简单参数来讲，请求参数名和controller方法中的形参名不一致时，无法接收到请求数据</li></ul><p>那么如果我们开发中，遇到了这种请求参数名和controller方法中的形参名不相同，怎么办？</p><p>解决方案：可以使用Spring提供的@RequestParam注解完成映射</p><p>在方法形参前面加上 @RequestParam 然后通过value属性执行请求参数名，从而完成映射。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=20</span></span><br><span class="line">    <span class="comment">// 请求参数名：name</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//springboot方式</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String username , Integer age )</span>&#123;</span><br><span class="line">        System.out.println(username+<span class="string">&quot;  :  &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意事项：</strong></p><p>@RequestParam中的required属性默认为true（默认值也是true），代表该请求参数必须传递，如果不传递将报错</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203130726310.png" alt="image-20221203130726310"></p><p>如果该参数是可选的，可以将required属性设置为false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(<span class="meta">@RequestParam(name = &quot;name&quot;, required = false)</span> String username, Integer age)</span>&#123;</span><br><span class="line">System.out.println(username+ <span class="string">&quot;:&quot;</span> + age);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-3-实体参数"><a href="#1-3-实体参数" class="headerlink" title="1.3 实体参数"></a>1.3 实体参数</h3><p>在使用简单参数做为数据传递方式时，前端传递了多少个请求参数，后端controller方法中的形参就要书写多少个。如果请求参数比较多，通过上述的方式一个参数一个参数的接收，会比较繁琐。 </p><p>此时，我们可以考虑将请求参数封装到一个实体类对象中。 要想完成数据封装，需要遵守如下规则：<strong>请求参数名与实体类的属性名相同</strong></p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203131954932.png" alt="image-20221203131954932"></p><h4 id="1-3-1-简单实体对象"><a href="#1-3-1-简单实体对象" class="headerlink" title="1.3.1 简单实体对象"></a>1.3.1 简单实体对象</h4><p>定义POJO实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//实体参数：简单实体对象</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simplePojo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simplePojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><ul><li>参数名和实体类属性名一致时</li></ul><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203161246168.png" alt="image-20221203161246168"> </p><ul><li>参数名和实体类属性名不一致时</li></ul><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203161004349.png" alt="image-20221203161004349"></p><h4 id="1-3-2-复杂实体对象"><a href="#1-3-2-复杂实体对象" class="headerlink" title="1.3.2 复杂实体对象"></a>1.3.2 复杂实体对象</h4><p>上面我们讲的呢是简单的实体对象，下面我们在来学习下复杂的实体对象。</p><p>复杂实体对象指的是，在实体类中有一个或多个属性，也是实体对象类型的。如下：</p><ul><li>User类中有一个Address类型的属性（Address是一个实体类）</li></ul><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203160447953.png" alt="image-20221203160447953"></p><p>复杂实体对象的封装，需要遵守如下规则：</p><ul><li><strong>请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套实体类属性参数。</strong></li></ul><p>定义POJO实体类：</p><ul><li>Address实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProvince</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProvince</span><span class="params">(String province)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.province = province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCity</span><span class="params">(String city)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;province=&#x27;&quot;</span> + province + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, city=&#x27;&quot;</span> + city + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>User实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address; <span class="comment">//地址对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//实体参数：复杂实体对象</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/complexPojo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">complexPojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203162706175.png" alt="image-20221203162706175"> </p><h3 id="1-4-数组集合参数"><a href="#1-4-数组集合参数" class="headerlink" title="1.4 数组集合参数"></a>1.4 数组集合参数</h3><p>数组集合参数的使用场景：在HTML的表单中，有一个表单项是支持多选的(复选框)，可以提交选择的多个值。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203164114083.png" alt="image-20221203164114083"> </p><p>多个值是怎么提交的呢？其实多个值也是一个一个的提交。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203164944144.png" alt="image-20221203164944144"> </p><p>后端程序接收上述多个值的方式有两种：</p><ol><li>数组</li><li>集合</li></ol><h4 id="1-4-1-数组"><a href="#1-4-1-数组" class="headerlink" title="1.4.1 数组"></a>1.4.1 数组</h4><p>数组参数：<strong>请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参即可接收参数</strong></p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203190218468.png" alt="image-20221203190218468"></p><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//数组集合参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/arrayParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">arrayParam</span><span class="params">(String[] hobby)</span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(hobby));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><p>在前端请求时，有两种传递形式：</p><p>方式一： xxxxxxxxxx?hobby&#x3D;game&amp;hobby&#x3D;java</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203191732601.png" alt="image-20221203191732601"> </p><p>方式二：xxxxxxxxxxxxx?hobby&#x3D;game,java</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203191822996.png" alt="image-20221203191822996"></p><h4 id="1-4-2-集合"><a href="#1-4-2-集合" class="headerlink" title="1.4.2 集合"></a>1.4.2 集合</h4><p>集合参数：<strong>请求参数名与形参集合对象名相同且请求参数为多个，@RequestParam 绑定参数关系</strong></p><blockquote><p>默认情况下，请求中参数名相同的多个值，是封装到数组。如果要封装到集合，要使用@RequestParam绑定参数关系</p></blockquote><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203211640646.png" alt="image-20221203211640646"></p><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//数组集合参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hobby)</span>&#123;</span><br><span class="line">        System.out.println(hobby);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><p>方式一： xxxxxxxxxx?hobby&#x3D;game&amp;hobby&#x3D;java</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203212221939.png" alt="image-20221203212221939"> </p><p>方式二：xxxxxxxxxxxxx?hobby&#x3D;game,java</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203212024679.png" alt="image-20221203212024679"></p><h3 id="1-5-日期参数"><a href="#1-5-日期参数" class="headerlink" title="1.5 日期参数"></a>1.5 日期参数</h3><p>上述演示的都是一些普通的参数，在一些特殊的需求中，可能会涉及到日期类型数据的封装。比如，如下需求：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20220826194159343.png" alt="image-20220826194159343"> </p><p>因为日期的格式多种多样（如：2022-12-12 10:05:45 、2022&#x2F;12&#x2F;12 10:05:45），那么对于日期类型的参数在进行封装的时候，需要通过@DateTimeFormat注解，以及其pattern属性来设置日期的格式。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203213120692.png" alt="image-20221203213120692"></p><ul><li>@DateTimeFormat注解的pattern属性中指定了哪种日期格式，前端的日期参数就必须按照指定的格式传递。</li><li>后端controller方法中，需要使用Date类型或LocalDateTime类型，来封装传递的参数。</li></ul><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//日期时间参数</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/dateParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dateParam</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> LocalDateTime updateTime)</span>&#123;</span><br><span class="line">        System.out.println(updateTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203214600716.png" alt="image-20221203214600716"></p><h3 id="1-6-JSON参数"><a href="#1-6-JSON参数" class="headerlink" title="1.6 JSON参数"></a>1.6 JSON参数</h3><p>在学习前端技术时，我们有讲到过JSON，而在前后端进行交互时，如果是比较复杂的参数，前后端通过会使用JSON格式的数据进行传输。 （JSON是开发中最常用的前后端数据交互方式）</p><p>我们学习JSON格式参数，主要从以下两个方面着手：</p><ol><li>Postman在发送请求时，如何传递json格式的请求参数</li><li>在服务端的controller方法中，如何接收json格式的请求参数</li></ol><p>Postman发送JSON格式数据：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203225623337.png" alt="image-20221203225623337"></p><p>服务端Controller方法接收JSON格式数据：</p><ul><li>传递json格式的参数，在Controller中会使用实体类进行封装。 </li><li>封装规则：<strong>JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数。需要使用 @RequestBody标识。</strong></li></ul><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203230457901.png" alt="image-20221203230457901"></p><ul><li>@RequestBody注解：将JSON数据映射到形参的实体类对象中（JSON中的key和实体类中的属性名保持一致）</li></ul><p>实体类：Address</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//省略GET , SET 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类：User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略GET , SET 方法</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//JSON参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/jsonParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">jsonParam</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203231803000.png" alt="image-20221203231803000"> </p><h3 id="1-7-路径参数"><a href="#1-7-路径参数" class="headerlink" title="1.7 路径参数"></a>1.7 路径参数</h3><p>传统的开发中请求参数是放在请求体(POST请求)传递或跟在URL后面通过?key&#x3D;value的形式传递(GET请求)。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221203235715804.png" alt="image-20221203235715804"></p><p>在现在的开发中，经常还会直接在请求的URL中传递参数。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/user/1</span><br><span class="line">http://localhost:880/user/1/0</span><br></pre></td></tr></table></figure><p>上述的这种传递请求参数的形式呢，我们称之为：路径参数。</p><p>学习路径参数呢，主要掌握在后端的controller方法中，如何接收路径参数。</p><p>路径参数：</p><ul><li>前端：通过请求URL直接传递参数</li><li>后端：使用{…}来标识该路径参数，需要使用@PathVariable获取路径参数</li></ul><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204001520756.png" alt="image-20221204001520756"></p><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//路径参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pathParam</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204002040184.png" alt="image-20221204002040184"></p><p><strong>传递多个路径参数：</strong></p><p>Postman：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204002306288.png" alt="image-20221204002306288"></p><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//路径参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pathParam2</span><span class="params">(<span class="meta">@PathVariable</span> Integer id, <span class="meta">@PathVariable</span> String name)</span>&#123;</span><br><span class="line">        System.out.println(id+ <span class="string">&quot; : &quot;</span> +name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-响应"><a href="#2-响应" class="headerlink" title="2. 响应"></a>2. 响应</h2><p>前面我们学习过HTTL协议的交互方式：请求响应模式（有请求就有响应）</p><p>那么Controller程序呢，除了接收请求外，还可以进行响应。</p><h3 id="2-1-ResponseBody"><a href="#2-1-ResponseBody" class="headerlink" title="2.1 @ResponseBody"></a>2.1 @ResponseBody</h3><p>在我们前面所编写的controller方法中，都已经设置了响应数据。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204100656376.png" alt="image-20221204100656376"></p><p>controller方法中的return的结果，怎么就可以响应给浏览器呢？</p><p>答案：使用@ResponseBody注解</p><p><strong>@ResponseBody注解：</strong></p><ul><li>类型：方法注解、类注解</li><li>位置：书写在Controller方法上或类上</li><li>作用：将方法返回值直接响应给浏览器<ul><li>如果返回值类型是实体对象&#x2F;集合，将会转换为JSON格式后在响应给浏览器</li></ul></li></ul><p>但是在我们所书写的Controller中，只在类上添加了@RestController注解、方法添加了@RequestMapping注解，并没有使用@ResponseBody注解，怎么给浏览器响应呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World ~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因：在类上添加的@RestController注解，是一个组合注解。</p><ul><li>@RestController &#x3D; @Controller + @ResponseBody</li></ul><p>@RestController源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span>   <span class="comment">//元注解（修饰注解的注解）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Documented</span>    <span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Controller</span>   </span><br><span class="line"><span class="meta">@ResponseBody</span> </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Controller.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：在类上添加@RestController就相当于添加了@ResponseBody注解。</p><ul><li>类上有@RestController注解或@ResponseBody注解时：表示当前类下所有的方法返回值做为响应数据<ul><li>方法的返回值，如果是一个POJO对象或集合时，会先转换为JSON格式，在响应给浏览器</li></ul></li></ul><p>下面我们来测试下响应数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseController</span> &#123;</span><br><span class="line">    <span class="comment">//响应字符串</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World ~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//响应实体对象</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getAddr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">getAddr</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();<span class="comment">//创建实体类对象</span></span><br><span class="line">        addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//响应集合数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listAddr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Address&gt; <span class="title function_">listAddr</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Address&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//集合对象</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr2.setProvince(<span class="string">&quot;陕西&quot;</span>);</span><br><span class="line">        addr2.setCity(<span class="string">&quot;西安&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(addr);</span><br><span class="line">        list.add(addr2);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在服务端响应了一个对象或者集合，那私前端获取到的数据是什么样子的呢？我们使用postman发送请求来测试下。测试效果如下：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204172339375.png" alt="image-20221204172339375"></p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204172705426.png" alt="image-20221204172705426"></p><h3 id="2-2-统一响应结果"><a href="#2-2-统一响应结果" class="headerlink" title="2.2 统一响应结果"></a>2.2 统一响应结果</h3><p>大家有没有发现一个问题，我们在前面所编写的这些Controller方法中，返回值各种各样，没有任何的规范。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204174052622.png" alt="image-20221204174052622"></p><p>如果我们开发一个大型项目，项目中controller方法将成千上万，使用上述方式将造成整个项目难以维护。那在真实的项目开发中是什么样子的呢？</p><p>在真实的项目开发中，无论是哪种方法，我们都会定义一个统一的返回结果。方案如下：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204174537686.png" alt="image-20221204174537686"></p><blockquote><p>前端：只需要按照统一格式的返回结果进行解析(仅一种解析方案)，就可以拿到数据。</p></blockquote><p>统一的返回结果使用类来描述，在这个结果中包含：</p><ul><li><p>响应状态码：当前请求是成功，还是失败</p></li><li><p>状态码信息：给页面的提示信息</p></li><li><p>返回的数据：给前端响应的数据（字符串、对象、集合）</p></li></ul><p>定义在一个实体类Result来包含以上信息。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;<span class="comment">//响应码，1 代表成功; 0 代表失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg;  <span class="comment">//响应码 描述字符串</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//返回的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Integer code, String msg, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增删改 成功响应(不需要给前端返回数据)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询 成功响应(把查询结果做为返回数据响应给前端)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//失败响应</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">0</span>,msg,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseController</span> &#123; </span><br><span class="line">    <span class="comment">//响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">        <span class="comment">//return new Result(1,&quot;success&quot;,&quot;Hello World ~&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getAddr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getAddr</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listAddr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listAddr</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Address&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr2.setProvince(<span class="string">&quot;陕西&quot;</span>);</span><br><span class="line">        addr2.setCity(<span class="string">&quot;西安&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(addr);</span><br><span class="line">        list.add(addr2);</span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Postman测试：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204180946963.png" alt="image-20221204180946963"></p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204180744084.png" alt="image-20221204180744084"></p><h3 id="2-3-案例"><a href="#2-3-案例" class="headerlink" title="2.3 案例"></a>2.3 案例</h3><p>下面我们通过一个案例，来加强对请求响应的学习。</p><h4 id="2-3-1-需求说明"><a href="#2-3-1-需求说明" class="headerlink" title="2.3.1 需求说明"></a>2.3.1 需求说明</h4><p>需求：加载并解析xml文件中的数据，完成数据处理，并在页面展示</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204185928260.png" alt="image-20221204185928260">  </p><ul><li>获取员工数据，返回统一响应结果，在页面渲染展示</li></ul><h4 id="2-3-2-准备工作"><a href="#2-3-2-准备工作" class="headerlink" title="2.3.2 准备工作"></a>2.3.2 准备工作</h4><p>案例准备：</p><ol><li><p>XML文件</p><ul><li>已经准备好(emp.xml)，直接导入进来，放在 src&#x2F;main&#x2F;resources目录下</li></ul></li><li><p>工具类</p><ul><li>已经准备好解析XML文件的工具类，无需自己实现</li><li>直接在创建一个包 com.itheima.utils ，然后将工具类拷贝进来</li></ul></li><li><p>前端页面资源</p><ul><li>已经准备好，直接拷贝进来，放在src&#x2F;main&#x2F;resources下的static目录下</li></ul></li></ol><p>Springboot项目的静态资源(html，css，js等前端资源)默认存放目录为：classpath:&#x2F;static 、 classpath:&#x2F;public、 classpath:&#x2F;resources</p><blockquote><p>在SpringBoot项目中，静态资源默认可以存放的目录：</p><ul><li>classpath:&#x2F;static&#x2F;</li><li>classpath:&#x2F;public&#x2F;</li><li>classpath:&#x2F;resources&#x2F;</li><li>classpath:&#x2F;META-INF&#x2F;resources&#x2F;</li></ul><p>classpath：</p><ul><li>代表的是类路径，在maven的项目中，其实指的就是 src&#x2F;main&#x2F;resources 或者 src&#x2F;main&#x2F;java，但是java目录是存放java代码的，所以相关的配置文件及静态资源文档，就放在 src&#x2F;main&#x2F;resources下。</li></ul></blockquote><h4 id="2-3-3-实现步骤"><a href="#2-3-3-实现步骤" class="headerlink" title="2.3.3 实现步骤"></a>2.3.3 实现步骤</h4><ol><li><p>在pom.xml文件中引入dom4j的依赖，用于解析XML文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引入资料中提供的：解析XML的工具类XMLParserUtils、实体类Emp、XML文件emp.xml</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204182828547.png" alt="image-20221204182828547"> </p></li><li><p>引入资料中提供的静态页面文件，放在resources下的static目录下</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204183044848.png" alt="image-20221204183044848"> </p></li><li><p>创建EmpController类，编写Controller程序，处理请求，响应数据</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204184313822.png" alt="image-20221204184313822"></p></li></ol><h4 id="2-3-4-代码实现"><a href="#2-3-4-代码实现" class="headerlink" title="2.3.4 代码实现"></a>2.3.4 代码实现</h4><p>Contriller代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        <span class="comment">//System.out.println(file);</span></span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统一返回结果实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code ;<span class="comment">//1 成功 , 0 失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//提示信息</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//数据 date</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Integer code, String msg, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>, <span class="string">&quot;success&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>, <span class="string">&quot;success&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">0</span>, msg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-5-测试"><a href="#2-3-5-测试" class="headerlink" title="2.3.5 测试"></a>2.3.5 测试</h4><p>代码编写完毕之后，我们就可以运行引导类，启动服务进行测试了。 </p><p>使用Postman测试：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204190341389.png" alt="image-20221204190341389"></p><p>打开浏览器，在浏览器地址栏输入： <a href="http://localhost:8080/emp.html">http://localhost:8080/emp.html</a></p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204185455556.png" alt="image-20221204185455556"> </p><h4 id="2-3-6-问题分析"><a href="#2-3-6-问题分析" class="headerlink" title="2.3.6 问题分析"></a>2.3.6 问题分析</h4><p>上述案例的功能，我们虽然已经实现，但是呢，我们会发现案例中：解析XML数据，获取数据的代码，处理数据的逻辑的代码，给页面响应的代码全部都堆积在一起了，全部都写在controller方法中了。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204190712411.png" alt="image-20221204190712411"></p><p>当前程序的这个业务逻辑还是比较简单的，如果业务逻辑再稍微复杂一点，我们会看到Controller方法的代码量就很大了。</p><ul><li><p>当我们要修改操作数据部分的代码，需要改动Controller</p></li><li><p>当我们要完善逻辑处理部分的代码，需要改动Controller</p></li><li><p>当我们需要修改数据响应的代码，还是需要改动Controller</p></li></ul><p>这样呢，就会造成我们整个工程代码的复用性比较差，而且代码难以维护。 那如何解决这个问题呢？其实在现在的开发中，有非常成熟的解决思路，那就是分层开发。</p><h2 id="3-分层解耦"><a href="#3-分层解耦" class="headerlink" title="3. 分层解耦"></a>3. 分层解耦</h2><h3 id="3-1-三层架构"><a href="#3-1-三层架构" class="headerlink" title="3.1 三层架构"></a>3.1 三层架构</h3><h4 id="3-1-1-介绍"><a href="#3-1-1-介绍" class="headerlink" title="3.1.1 介绍"></a>3.1.1 介绍</h4><p>在我们进行程序设计以及程序开发时，尽可能让每一个接口、类、方法的职责更单一些（单一职责原则）。</p><blockquote><p>单一职责原则：一个类或一个方法，就只做一件事情，只管一块功能。</p><p>这样就可以让类、接口、方法的复杂度更低，可读性更强，扩展性更好，也更利用后期的维护。</p></blockquote><p>我们之前开发的程序呢，并不满足单一职责原则。下面我们来分析下之前的程序：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204191650390.png" alt="image-20221204191650390"> </p><p>那其实我们上述案例的处理逻辑呢，从组成上看可以分为三个部分：</p><ul><li>数据访问：负责业务数据的维护操作，包括增、删、改、查等操作。</li><li>逻辑处理：负责业务逻辑处理的代码。</li><li>请求处理、响应数据：负责，接收页面的请求，给页面响应数据。</li></ul><p>按照上述的三个组成部分，在我们项目开发中呢，可以将代码分为三层：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204193837678.png" alt="image-20221204193837678"></p><ul><li>Controller：控制层。接收前端发送的请求，对请求进行处理，并响应数据。</li><li>Service：业务逻辑层。处理具体的业务逻辑。</li><li>Dao：数据访问层(Data Access Object)，也称为持久层。负责数据访问操作，包括数据的增、删、改、查。</li></ul><p>基于三层架构的程序执行流程：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204194207812.png" alt="image-20221204194207812"></p><ul><li>前端发起的请求，由Controller层接收（Controller响应数据给前端）</li><li>Controller层调用Service层来进行逻辑处理（Service层处理完后，把处理结果返回给Controller层）</li><li>Serivce层调用Dao层（逻辑处理过程中需要用到的一些数据要从Dao层获取）</li><li>Dao层操作文件中的数据（Dao拿到的数据会返回给Service层）</li></ul><blockquote><p>思考：按照三层架构的思想，如何要对业务逻辑(Service层)进行变更，会影响到Controller层和Dao层吗？ </p><p>答案：不会影响。 （程序的扩展性、维护性变得更好了）</p></blockquote><h4 id="3-1-2-代码拆分"><a href="#3-1-2-代码拆分" class="headerlink" title="3.1.2 代码拆分"></a>3.1.2 代码拆分</h4><p>我们使用三层架构思想，来改造下之前的程序：</p><ul><li>控制层包名：xxxx.controller</li><li>业务逻辑层包名：xxxx.service</li><li>数据访问层包名：xxxx.dao</li></ul><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204195812200.png" alt="image-20221204195812200"></p><p><strong>控制层：</strong>接收前端发送的请求，对请求进行处理，并响应数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="comment">//业务层对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpService</span> <span class="variable">empService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpServiceA</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 调用service层, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>业务逻辑层：</strong>处理具体的业务逻辑</p><ul><li>业务接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务逻辑接口（制定业务标准）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="comment">//获取员工列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>业务实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务逻辑实现类（按照业务标准实现）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="comment">//dao层对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpDao</span> <span class="variable">empDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpDaoA</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用dao, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empDao.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数据访问层：</strong>负责数据的访问操作，包含数据的增、删、改、查</p><ul><li>数据访问接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据访问层接口（制定标准）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="comment">//获取员工列表数据</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数据访问实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据访问实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204201342490.png" alt="image-20221204201342490"></p><p>三层架构的好处：</p><ol><li>复用性强</li><li>便于维护</li><li>利用扩展</li></ol><h3 id="3-2-分层解耦"><a href="#3-2-分层解耦" class="headerlink" title="3.2 分层解耦"></a>3.2 分层解耦</h3><p>刚才我们学习过程序分层思想了，接下来呢，我们来学习下程序的解耦思想。</p><p>解耦：解除耦合。</p><h4 id="3-2-1-耦合问题"><a href="#3-2-1-耦合问题" class="headerlink" title="3.2.1 耦合问题"></a>3.2.1 耦合问题</h4><p>首先需要了解软件开发涉及到的两个概念：内聚和耦合。</p><ul><li><p>内聚：软件中各个功能模块内部的功能联系。</p></li><li><p>耦合：衡量软件中各个层&#x2F;模块之间的依赖、关联的程度。</p></li></ul><p><strong>软件设计原则：高内聚低耦合。</strong></p><blockquote><p>高内聚指的是：一个模块中各个元素之间的联系的紧密程度，如果各个元素(语句、程序段)之间的联系程度越高，则内聚性越高，即 “高内聚”。</p><p>低耦合指的是：软件中各个层、模块之间的依赖关联程序越低越好。</p></blockquote><p>程序中高内聚的体现：</p><ul><li>EmpServiceA类中只编写了和员工相关的逻辑处理代码</li></ul><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204202531571.png" alt="image-20221204202531571"> </p><p>程序中耦合代码的体现：</p><ul><li>把业务类变为EmpServiceB时，需要修改controller层中的代码</li></ul><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204203904900.png" alt="image-20221204203904900"></p><p>高内聚、低耦合的目的是使程序模块的可重用性、移植性大大增强。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20220828215549593.png"></p><h4 id="3-2-2-解耦思路"><a href="#3-2-2-解耦思路" class="headerlink" title="3.2.2  解耦思路"></a>3.2.2  解耦思路</h4><p>之前我们在编写代码时，需要什么对象，就直接new一个就可以了。 这种做法呢，层与层之间代码就耦合了，当service层的实现变了之后， 我们还需要修改controller层的代码。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204204916033.png" alt="image-20221204204916033"></p><p> 那应该怎么解耦呢？</p><ul><li>首先不能在EmpController中使用new对象。代码如下：</li></ul><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204205328069.png" alt="image-20221204205328069"></p><ul><li>此时，就存在另一个问题了，不能new，就意味着没有业务层对象（程序运行就报错），怎么办呢？<ul><li>我们的解决思路是：<ul><li>提供一个容器，容器中存储一些对象(例：EmpService对象)</li><li>controller程序从容器中获取EmpService类型的对象</li></ul></li></ul></li></ul><p>我们想要实现上述解耦操作，就涉及到Spring中的两个核心概念：</p><ul><li><p><strong>控制反转：</strong> Inversion Of Control，简称IOC。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转。</p><blockquote><p>对象的创建权由程序员主动创建转移到容器(由容器创建、管理对象)。这个容器称为：IOC容器或Spring容器</p></blockquote></li><li><p><strong>依赖注入：</strong> Dependency Injection，简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。</p><blockquote><p>程序运行时需要某个资源，此时容器就为其提供这个资源。</p><p>例：EmpController程序运行时需要EmpService对象，Spring容器就为其提供并注入EmpService对象</p></blockquote></li></ul><p>IOC容器中创建、管理的对象，称之为：bean对象</p><h3 id="3-3-IOC-DI"><a href="#3-3-IOC-DI" class="headerlink" title="3.3 IOC&amp;DI"></a>3.3 IOC&amp;DI</h3><p>上面我们引出了Spring中IOC和DI的基本概念，下面我们就来具体学习下IOC和DI的代码实现。</p><h4 id="3-3-1-IOC-DI入门"><a href="#3-3-1-IOC-DI入门" class="headerlink" title="3.3.1 IOC&amp;DI入门"></a>3.3.1 IOC&amp;DI入门</h4><p>任务：完成Controller层、Service层、Dao层的代码解耦</p><ul><li>思路：<ol><li>删除Controller层、Service层中new对象的代码</li><li>Service层及Dao层的实现类，交给IOC容器管理</li><li>为Controller及Service注入运行时依赖的对象<ul><li>Controller程序中注入依赖的Service层对象</li><li>Service程序中注入依赖的Dao层对象</li></ul></li></ol></li></ul><p>第1步：删除Controller层、Service层中new对象的代码</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204212807207.png" alt="image-20221204212807207"></p><p>第2步：Service层及Dao层的实现类，交给IOC容器管理</p><ul><li>使用Spring提供的注解：@Component ，就可以实现类交给IOC容器管理</li></ul><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204213328034.png" alt="image-20221204213328034"></p><p>第3步：为Controller及Service注入运行时依赖的对象</p><ul><li>使用Spring提供的注解：@Autowired ，就可以实现程序运行时IOC容器自动注入需要的依赖对象</li></ul><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204213859112.png" alt="image-20221204213859112"></p><p>完整的三层代码：</p><ul><li><strong>Controller层：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 调用service, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Service层：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//将当前对象交给IOC容器管理,成为IOC容器的bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpDao empDao ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用dao, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empDao.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Dao层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//将当前对象交给IOC容器管理,成为IOC容器的bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试：</p><ul><li>启动SpringBoot引导类，打开浏览器，输入：<a href="http://localhost:8080/emp.html">http://localhost:8080/emp.html</a></li></ul><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204185455556.png" alt="image-20221204185455556"></p><h4 id="3-3-2-IOC详解"><a href="#3-3-2-IOC详解" class="headerlink" title="3.3.2 IOC详解"></a>3.3.2 IOC详解</h4><p>通过IOC和DI的入门程序呢，我们已经基本了解了IOC和DI的基础操作。接下来呢，我们学习下IOC控制反转和DI依赖注入的细节。</p><h5 id="3-3-2-1-bean的声明"><a href="#3-3-2-1-bean的声明" class="headerlink" title="3.3.2.1 bean的声明"></a>3.3.2.1 bean的声明</h5><p>前面我们提到IOC控制反转，就是将对象的控制权交给Spring的IOC容器，由IOC容器创建及管理对象。IOC容器创建的对象称为bean对象。</p><p>在之前的入门案例中，要把某个对象交给IOC容器管理，需要在类上添加一个注解：@Component </p><p>而Spring框架为了更好的标识web应用程序开发当中，bean对象到底归属于哪一层，又提供了@Component的衍生注解：</p><ul><li>@Controller    （标注在控制层类上）</li><li>@Service          （标注在业务层类上）</li><li>@Repository    （标注在数据访问层类上）</li></ul><p>修改入门案例代码：</p><ul><li><strong>Controller层：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  <span class="comment">//@RestController = @Controller + @ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 调用service, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Service层：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpDao empDao ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用dao, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empDao.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Dao层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要把某个对象交给IOC容器管理，需要在对应的类上加上如下注解之一：</p><table><thead><tr><th align="left">注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td align="left">@Controller</td><td>@Component的衍生注解</td><td>标注在控制器类上</td></tr><tr><td align="left">@Service</td><td>@Component的衍生注解</td><td>标注在业务类上</td></tr><tr><td align="left">@Repository</td><td>@Component的衍生注解</td><td>标注在数据访问类上（由于与mybatis整合，用的少）</td></tr><tr><td align="left">@Component</td><td>声明bean的基础注解</td><td>不属于以上三类时，用此注解</td></tr></tbody></table><blockquote><p>查看源码：<img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204221320230.png" alt="image-20221204221320230"></p></blockquote><p>在IOC容器中，每一个Bean都有一个属于自己的名字，可以通过注解的value属性指定bean的名字。如果没有指定，默认为类名首字母小写。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204222650873.png" alt="image-20221204222650873"></p><blockquote><p>注意事项: </p><ul><li>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写。</li><li>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用@Controller。</li></ul></blockquote><h5 id="3-3-2-2-组件扫描"><a href="#3-3-2-2-组件扫描" class="headerlink" title="3.3.2.2 组件扫描"></a>3.3.2.2 组件扫描</h5><p>问题：使用前面学习的四个注解声明的bean，一定会生效吗？</p><p>答案：不一定。（原因：bean想要生效，还需要被组件扫描）</p><p> 下面我们通过修改项目工程的目录结构，来测试bean对象是否生效：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204223602694.png" alt="image-20221204223602694"></p><p>运行程序后，报错：</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204223815554.png" alt="image-20221204223815554"></p><p>为什么没有找到bean对象呢？</p><ul><li>使用四大注解声明的bean，要想生效，还需要被组件扫描注解@ComponentScan扫描</li></ul><blockquote><p>@ComponentScan注解虽然没有显式配置，但是实际上已经包含在了引导类声明注解 @SpringBootApplication 中，&#x3D;&#x3D;<strong>默认扫描的范围是SpringBoot启动类所在包及其子包</strong>&#x3D;&#x3D;。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204224643683.png" alt="image-20221204224643683"> </p></blockquote><ul><li>解决方案：手动添加@ComponentScan注解，指定要扫描的包   （&#x3D;&#x3D;仅做了解，不推荐&#x3D;&#x3D;）</li></ul><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204225437297.png" alt="image-20221204225437297"></p><p>推荐做法（如下图）：</p><ul><li>将我们定义的controller，service，dao这些包呢，都放在引导类所在包com.itheima的子包下，这样我们定义的bean就会被自动的扫描到</li></ul><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204225815624.png" alt="image-20221204225815624"></p><h4 id="3-3-3-DI详解"><a href="#3-3-3-DI详解" class="headerlink" title="3.3.3 DI详解"></a>3.3.3 DI详解</h4><p>上一小节我们讲解了控制反转IOC的细节，接下来呢，我们学习依赖注解DI的细节。</p><p>依赖注入，是指IOC容器要为应用程序去提供运行时所依赖的资源，而资源指的就是对象。</p><p>在入门程序案例中，我们使用了@Autowired这个注解，完成了依赖注入的操作，而这个Autowired翻译过来叫：自动装配。</p><p>@Autowired注解，默认是按照<strong>类型</strong>进行自动装配的（去IOC容器中找某个类型的对象，然后完成注入操作）</p><blockquote><p>入门程序举例：在EmpController运行的时候，就要到IOC容器当中去查找EmpService这个类型的对象，而我们的IOC容器中刚好有一个EmpService这个类型的对象，所以就找到了这个类型的对象完成注入操作。</p></blockquote><p>那如果在IOC容器中，存在多个相同类型的bean对象，会出现什么情况呢？</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204232154445.png" alt="image-20221204232154445"></p><ul><li>程序运行会报错</li></ul><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204231616724.png" alt="image-20221204231616724"></p><p>如何解决上述问题呢？Spring提供了以下几种解决方案：</p><ul><li><p>@Primary</p></li><li><p>@Qualifier</p></li><li><p>@Resource</p></li></ul><p>使用@Primary注解：当存在多个相同类型的Bean注入时，加上@Primary注解，来确定默认的实现。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204232501679.png" alt="image-20221204232501679"> </p><p>使用@Qualifier注解：指定当前要注入的bean对象。 在@Qualifier的value属性中，指定注入的bean的名称。</p><ul><li>@Qualifier注解不能单独使用，必须配合@Autowired使用</li></ul><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204233333606.png" alt="image-20221204233333606"></p><p>使用@Resource注解：是按照bean的名称进行注入。通过name属性指定要注入的bean的名称。</p><p><img src="/../images/springboot%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20221204233637735.png" alt="image-20221204233637735"></p><blockquote><p>面试题 ： @Autowird 与 @Resource的区别</p><ul><li>@Autowired 是spring框架提供的注解，而@Resource是JDK提供的注解</li><li>@Autowired 默认是按照类型注入，而@Resource是按照名称注入</li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SpringBootWeb请求响应&quot;&gt;&lt;a href=&quot;#SpringBootWeb请求响应&quot; class=&quot;headerlink&quot; title=&quot;SpringBootWeb请求响应&quot;&gt;&lt;/a&gt;SpringBootWeb请求响应&lt;/h1&gt;</summary>
    
    
    
    
    <category term="springboot" scheme="https://ntostudy.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot入门</title>
    <link href="https://ntostudy.github.io/2024/07/31/springboot%E5%85%A5%E9%97%A8/"/>
    <id>https://ntostudy.github.io/2024/07/31/springboot%E5%85%A5%E9%97%A8/</id>
    <published>2024-07-31T08:12:50.000Z</published>
    <updated>2024-07-31T13:19:19.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springboot基础"><a href="#Springboot基础" class="headerlink" title="Springboot基础"></a>Springboot基础</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><blockquote><ol><li><p>SpringbootWeb入门</p></li><li><p>HTTP协议</p></li><li><p>Web服务器-Tomcat</p></li></ol></blockquote><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221130095316032.png"></p><p>下面我们将进入Springboot基础阶段的学习。</p><p>在没有正式的学习Springboot之前，我们要先来了解下什么是Spring。</p><p>我们可以打开Spring的官网(<a href="https://spring.io)，去看一下Spring的简介：Spring">https://spring.io)，去看一下Spring的简介：Spring</a> makes Java simple。</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220617222738668.png"></p><p>Spring的官方提供很多开源的项目，我们可以点击上面的projects，看到spring家族旗下的项目，按照流行程度排序为：</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220617222925923.png"></p><p>Spring发展到今天已经形成了一种开发生态圈，Spring提供了若干个子项目，每个项目用于完成特定的功能。而我们在项目开发时，一般会偏向于选择这一套spring家族的技术，来解决对应领域的问题，那我们称这一套技术为<strong>spring全家桶</strong>。</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220617222609699.png"></p><p>而Spring家族旗下这么多的技术，最基础、最核心的是 SpringFramework。其他的spring家族的技术，都是基于SpringFramework的，SpringFramework中提供很多实用功能，如：依赖注入、事务管理、web开发支持、数据访问、消息服务等等。</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220617224427947.png"></p><p>而如果我们在项目中，直接基于SpringFramework进行开发，存在两个问题：配置繁琐、入门难度大。 </p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220823185227296.png"></p><p>所以基于此呢，spring官方推荐我们从另外一个项目开始学习，那就是目前最火爆的Springboot。 </p><p>通过Springboot就可以快速的帮我们构建应用程序，所以Springboot呢，最大的特点有两个 ：</p><ul><li>简化配置</li><li>快速开发</li></ul><p><strong>Spring Boot 可以帮助我们非常快速的构建应用程序、简化开发、提高效率 。</strong></p><p>接下来，我们就直接通过一个Springboot的web入门程序，让大家快速感受一下，基于Springboot进行Web开发的便捷性。</p><h2 id="1-SpringbootWeb快速入门"><a href="#1-SpringbootWeb快速入门" class="headerlink" title="1. SpringbootWeb快速入门"></a>1. SpringbootWeb快速入门</h2><h3 id="1-1-需求"><a href="#1-1-需求" class="headerlink" title="1.1 需求"></a>1.1 需求</h3><p>需求：基于Springboot的方式开发一个web应用，浏览器发起请求&#x2F;hello后，给浏览器返回字符串 “Hello World ~”。</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220823191003444.png"></p><h3 id="1-2-开发步骤"><a href="#1-2-开发步骤" class="headerlink" title="1.2 开发步骤"></a>1.2 开发步骤</h3><p>第1步：创建Springboot工程项目</p><p>第2步：定义HelloController类，添加方法hello，并添加注解</p><p>第3步：测试运行</p><h4 id="1-2-1-创建Springboot工程（需要联网）"><a href="#1-2-1-创建Springboot工程（需要联网）" class="headerlink" title="1.2.1 创建Springboot工程（需要联网）"></a>1.2.1 创建Springboot工程（需要联网）</h4><p>基于Spring官方骨架，创建Springboot工程。</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221201184702136.png" alt="image-20221201184702136"></p><p>基本信息描述完毕之后，勾选web开发相关依赖。</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221201184850248.png" alt="image-20221201184850248"></p><p>点击Finish之后，就会联网创建这个Springboot工程，创建好之后，结构如下：</p><ul><li>&#x3D;&#x3D;注意：在联网创建过程中，会下载相关资源(请耐心等待)&#x3D;&#x3D;</li></ul><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221201185910596.png" alt="image-20221201185910596"> </p><h4 id="1-2-2-定义请求处理类"><a href="#1-2-2-定义请求处理类" class="headerlink" title="1.2.2 定义请求处理类"></a>1.2.2 定义请求处理类</h4><p>在com.itheima这个包下创建一个子包controller</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221201190541295.png" alt="image-20221201190541295"></p><p>然后在controller包下新建一个类：HelloController</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221201190825439.png" alt="image-20221201190825439"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World ~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h4 id="1-2-3-运行测试"><a href="#1-2-3-运行测试" class="headerlink" title="1.2.3 运行测试"></a>1.2.3 运行测试</h4><p>运行Springboot自动生成的引导类</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221201191028124.png" alt="image-20221201191028124"> </p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221201191348924.png" alt="image-20221201191348924"> </p><p>打开浏览器，输入 <code>http://localhost:8080/hello</code></p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220823195048415.png"></p><h3 id="1-3-Web分析"><a href="#1-3-Web分析" class="headerlink" title="1.3 Web分析"></a>1.3 Web分析</h3><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221201224603497.png" alt="image-20221201224603497"></p><p>浏览器：</p><ul><li><p>输入网址：<code>http://192.168.100.11:8080/hello</code></p><ul><li><p>通过IP地址192.168.100.11定位到网络上的一台计算机</p><blockquote><p>我们之前在浏览器中输入的localhost，就是127.0.0.1（本机）</p></blockquote></li><li><p>通过端口号8080找到计算机上运行的程序</p><blockquote><p><code>localhost:8080</code>  , 意思是在本地计算机中找到正在运行的8080端口的程序</p></blockquote></li><li><p>&#x2F;hello是请求资源位置</p><ul><li>资源：对计算机而言资源就是数据<ul><li>web资源：通过网络可以访问到的资源（通常是指存放在服务器上的数据）</li></ul></li></ul><blockquote><p><code>localhost:8080/hello</code> ，意思是向本地计算机中的8080端口程序，获取资源位置是&#x2F;hello的数据</p><ul><li>8080端口程序，在服务器找&#x2F;hello位置的资源数据，发给浏览器</li></ul></blockquote></li></ul></li></ul><p>服务器：（可以理解为ServerSocket）</p><ul><li>接收到浏览器发送的信息（如：&#x2F;hello）</li><li>在服务器上找到&#x2F;hello的资源</li><li>把资源发送给浏览器</li></ul><blockquote><p>我们在JavaSE阶段学习网络编程时，有讲过网络三要素：</p><ul><li>IP  ：网络中计算机的唯一标识</li><li>端口 ：计算机中运行程序的唯一标识</li><li>协议 ：网络中计算机之间交互的规则</li></ul><p><strong>问题：浏览器和服务器两端进行数据交互，使用什么协议？</strong></p><p><strong>答案：http协议</strong></p></blockquote><h2 id="2-HTTP协议"><a href="#2-HTTP协议" class="headerlink" title="2. HTTP协议"></a>2. HTTP协议</h2><h3 id="2-1-HTTP-概述"><a href="#2-1-HTTP-概述" class="headerlink" title="2.1 HTTP-概述"></a>2.1 HTTP-概述</h3><h4 id="2-1-1-介绍"><a href="#2-1-1-介绍" class="headerlink" title="2.1.1 介绍"></a>2.1.1 介绍</h4><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220823200024507.png"></p><p>HTTP：Hyper Text Transfer Protocol(超文本传输协议)，规定了浏览器与服务器之间数据传输的规则。</p><ul><li>http是互联网上应用最为广泛的一种网络协议 </li><li>http协议要求：浏览器在向服务器发送请求数据时，或是服务器在向浏览器发送响应数据时，都必须按照固定的格式进行数据传输</li></ul><p>如果想知道http协议的数据传输格式有哪些，可以打开浏览器，点击<code>F12</code>打开开发者工具，点击<code>Network</code>来查看</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202105735230.png" alt="image-20221202105735230"></p><p>浏览器向服务器进行请求时：</p><ul><li>服务器按照固定的格式进行解析</li></ul><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202111044434.png" alt="image-20221202111044434"></p><p>服务器向浏览器进行响应时：</p><ul><li>浏览器按照固定的格式进行解析</li></ul><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202111307819.png" alt="image-20221202111307819"></p><p><strong>所以，我们学习HTTP主要就是学习请求和响应数据的具体格式内容。</strong></p><h4 id="2-2-2-特点"><a href="#2-2-2-特点" class="headerlink" title="2.2.2 特点"></a>2.2.2 特点</h4><p>我们刚才初步认识了HTTP协议，那么我们在看看HTTP协议有哪些特点：</p><ul><li><p>**基于TCP协议: **   面向连接，安全</p><blockquote><p>TCP是一种面向连接的(建立连接之前是需要经过三次握手)、可靠的、基于字节流的传输层通信协议，在数据传输方面更安全</p></blockquote></li><li><p><strong>基于请求-响应模型:</strong>   一次请求对应一次响应（先请求后响应）</p><blockquote><p>请求和响应是一一对应关系，没有请求，就没有响应</p></blockquote></li><li><p><strong>HTTP协议是无状态协议:</strong>  对于数据没有记忆能力。每次请求-响应都是独立的</p><blockquote><p>无状态指的是客户端发送HTTP请求给服务端之后，服务端根据请求响应数据，响应完后，不会记录任何信息。</p><ul><li>缺点:  多次请求间不能共享数据</li><li>优点:  速度快</li></ul><p>请求之间无法共享数据会引发的问题：</p><ul><li>如：京东购物。加入购物车和去购物车结算是两次请求</li><li>由于HTTP协议的无状态特性，加入购物车请求响应结束后，并未记录加入购物车是何商品</li><li>发起去购物车结算的请求后，因为无法获取哪些商品加入了购物车，会导致此次请求无法正确展示数据</li></ul><p>具体使用的时候，我们发现京东是可以正常展示数据的，原因是Java早已考虑到这个问题，并提出了使用会话技术(Cookie、Session)来解决这个问题。具体如何来做，我们后面课程中会讲到。</p></blockquote><p>刚才提到HTTP协议是规定了请求和响应数据的格式，那具体的格式是什么呢?</p></li></ul><h3 id="2-2-HTTP-请求协议"><a href="#2-2-HTTP-请求协议" class="headerlink" title="2.2 HTTP-请求协议"></a>2.2 HTTP-请求协议</h3><p>浏览器和服务器是按照HTTP协议进行数据通信的。</p><p>HTTP协议又分为：请求协议和响应协议</p><ul><li>请求协议：浏览器将数据以请求格式发送到服务器<ul><li>包括：<strong>请求行</strong>、<strong>请求头</strong> 、<strong>请求体</strong></li></ul></li><li>响应协议：服务器将数据以响应格式返回给浏览器<ul><li>包括：<strong>响应行</strong> 、<strong>响应头</strong> 、<strong>响应体</strong></li></ul></li></ul><p>在HTTP1.1版本中，浏览器访问服务器的几种方式： </p><table><thead><tr><th align="center">请求方式</th><th align="left">请求说明</th></tr></thead><tbody><tr><td align="center"><strong>GET</strong></td><td align="left">获取资源。<br/>向特定的资源发出请求。例：<a href="http://www.baidu.com/s?wd=itheima">http://www.baidu.com/s?wd=itheima</a></td></tr><tr><td align="center"><strong>POST</strong></td><td align="left">传输实体主体。<br/>向指定资源提交数据进行处理请求（例：上传文件），数据被包含在请求体中。</td></tr><tr><td align="center">OPTIONS</td><td align="left">返回服务器针对特定资源所支持的HTTP请求方式。<br/>因为并不是所有的服务器都支持规定的方法，为了安全有些服务器可能会禁止掉一些方法，例如：DELETE、PUT等。那么OPTIONS就是用来询问服务器支持的方法。</td></tr><tr><td align="center">HEAD</td><td align="left">获得报文首部。<br/>HEAD方法类似GET方法，但是不同的是HEAD方法不要求返回数据。通常用于确认URI的有效性及资源更新时间等。</td></tr><tr><td align="center">PUT</td><td align="left">传输文件。<br/>PUT方法用来传输文件。类似FTP协议，文件内容包含在请求报文的实体中，然后请求保存到URL指定的服务器位置。</td></tr><tr><td align="center">DELETE</td><td align="left">删除文件。<br/>请求服务器删除Request-URI所标识的资源</td></tr><tr><td align="center">TRACE</td><td align="left">追踪路径。<br/>回显服务器收到的请求，主要用于测试或诊断</td></tr><tr><td align="center">CONNECT</td><td align="left">要求用隧道协议连接代理。<br/>HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器</td></tr></tbody></table><p>在我们实际应用中常用的也就是 ：<strong>GET、POST</strong></p><p><strong>GET方式的请求协议：</strong></p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220823200708026.png"> </p><ul><li><p>请求行 ：HTTP请求中的第一行数据。由：<code>请求方式</code>、<code>资源路径</code>、<code>协议/版本</code>组成（之间使用空格分隔）</p><ul><li>请求方式：GET  </li><li>资源路径：&#x2F;brand&#x2F;findAll?name&#x3D;OPPO&amp;status&#x3D;1<ul><li>请求路径：&#x2F;brand&#x2F;findAll</li><li>请求参数：name&#x3D;OPPO&amp;status&#x3D;1<ul><li>请求参数是以key&#x3D;value形式出现</li><li>多个请求参数之间使用<code>&amp;</code>连接</li></ul></li><li>请求路径和请求参数之间使用<code>?</code>连接</li></ul><p>  </p></li><li>协议&#x2F;版本：HTTP&#x2F;1.1</li></ul></li><li><p>请求头 ：第二行开始，上图黄色部分内容就是请求头。格式为key: value形式 </p><ul><li>http是个无状态的协议，所以在请求头设置浏览器的一些自身信息和想要响应的形式。这样服务器在收到信息后，就可以知道是谁，想干什么了</li></ul><p>常见的HTTP请求头有:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Host: 表示请求的主机名</span><br><span class="line"></span><br><span class="line">User-Agent: 浏览器版本。 例如：Chrome浏览器的标识类似Mozilla/5.0 ...Chrome/79 ，IE浏览器的标识类似Mozilla/5.0 (Windows NT ...)like Gecko</span><br><span class="line"></span><br><span class="line">Accept：表示浏览器能接收的资源类型，如text/*，image/*或者*/*表示所有；</span><br><span class="line"></span><br><span class="line">Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；</span><br><span class="line"></span><br><span class="line">Accept-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate等。</span><br><span class="line"></span><br><span class="line">Content-Type：请求主体的数据类型</span><br><span class="line"></span><br><span class="line">Content-Length：数据主体的大小（单位：字节）</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>举例说明：服务端可以根据请求头中的内容来获取客户端的相关信息，有了这些信息服务端就可以处理不同的业务需求。</p><p>比如:</p><ul><li>不同浏览器解析HTML和CSS标签的结果会有不一致，所以就会导致相同的代码在不同的浏览器会出现不同的效果</li><li>服务端根据客户端请求头中的数据获取到客户端的浏览器类型，就可以根据不同的浏览器设置不同的代码来达到一致的效果（这就是我们常说的浏览器兼容问题）</li></ul></blockquote><ul><li>请求体 ：存储请求参数<ul><li>GET请求的请求参数在请求行中，故不需要设置请求体</li></ul></li></ul><p><strong>POST方式的请求协议：</strong></p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220823201303601.png"></p><ul><li>请求行(以上图中红色部分)：包含请求方式、资源路径、协议&#x2F;版本<ul><li>请求方式：POST</li><li>资源路径：&#x2F;brand</li><li>协议&#x2F;版本：HTTP&#x2F;1.1</li></ul></li><li>请求头(以上图中黄色部分)   </li><li>请求体(以上图中绿色部分) ：存储请求参数 <ul><li>请求体和请求头之间是有一个空行隔开（作用：用于标记请求头结束）</li></ul></li></ul><p>GET请求和POST请求的区别：</p><table><thead><tr><th>区别方式</th><th>GET请求</th><th>POST请求</th></tr></thead><tbody><tr><td>请求参数</td><td>请求参数在请求行中。<br/>例：&#x2F;brand&#x2F;findAll?name&#x3D;OPPO&amp;status&#x3D;1</td><td>请求参数在请求体中</td></tr><tr><td>请求参数长度</td><td>请求参数长度有限制(浏览器不同限制也不同)</td><td>请求参数长度没有限制</td></tr><tr><td>安全性</td><td>安全性低。原因：请求参数暴露在浏览器地址栏中。</td><td>安全性相对高</td></tr></tbody></table><h3 id="2-3-HTTP-响应协议"><a href="#2-3-HTTP-响应协议" class="headerlink" title="2.3 HTTP-响应协议"></a>2.3 HTTP-响应协议</h3><h4 id="2-3-1-格式介绍"><a href="#2-3-1-格式介绍" class="headerlink" title="2.3.1 格式介绍"></a>2.3.1 格式介绍</h4><p>与HTTP的请求一样，HTTP响应的数据也分为3部分：<strong>响应行</strong>、<strong>响应头</strong> 、<strong>响应体</strong> </p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220823202344149.png"> </p><ul><li><p>响应行(以上图中红色部分)：响应数据的第一行。响应行由<code>协议及版本</code>、<code>响应状态码</code>、<code>状态码描述</code>组成</p><ul><li>协议&#x2F;版本：HTTP&#x2F;1.1</li><li>响应状态码：200</li><li>状态码描述：OK</li></ul></li><li><p>响应头(以上图中黄色部分)：响应数据的第二行开始。格式为key：value形式</p><ul><li>http是个无状态的协议，所以可以在请求头和响应头中设置一些信息和想要执行的动作，这样，对方在收到信息后，就可以知道你是谁，你想干什么</li></ul><p>常见的HTTP响应头有:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Content-Type：表示该响应内容的类型，例如text/html，image/jpeg ；</span><br><span class="line"></span><br><span class="line">Content-Length：表示该响应内容的长度（字节数）；</span><br><span class="line"></span><br><span class="line">Content-Encoding：表示该响应压缩算法，例如gzip ；</span><br><span class="line"></span><br><span class="line">Cache-Control：指示客户端应如何缓存，例如max-age=300表示可以最多缓存300秒 ;</span><br><span class="line"></span><br><span class="line">Set-Cookie: 告诉浏览器为当前页面所在的域设置cookie ;</span><br></pre></td></tr></table></figure></li></ul><ul><li>响应体(以上图中绿色部分)： 响应数据的最后一部分。存储响应的数据<ul><li>响应体和响应头之间有一个空行隔开（作用：用于标记响应头结束）</li></ul></li></ul><h4 id="2-3-2-响应状态码"><a href="#2-3-2-响应状态码" class="headerlink" title="2.3.2 响应状态码"></a>2.3.2 响应状态码</h4><table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td><strong>响应中</strong> — 临时状态码。表示请求已经接受，告诉客户端应该继续请求或者如果已经完成则忽略</td></tr><tr><td>2xx</td><td><strong>成功</strong> — 表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td><strong>重定向</strong> — 重定向到其它地方，让客户端再发起一个请求以完成整个处理</td></tr><tr><td>4xx</td><td><strong>客户端错误</strong> — 处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5xx</td><td><strong>服务器端错误</strong> — 处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td></tr></tbody></table><p>参考: 资料&#x2F;SpringbootWeb&#x2F;响应状态码.md</p><p>关于响应状态码，我们先主要认识三个状态码，其余的等后期用到了再去掌握：</p><ul><li>200    ok   客户端请求成功</li><li>404  Not Found  请求资源不存在</li><li>500  Internal Server Error  服务端发生不可预期的错误</li></ul><h3 id="2-4-HTTP-协议解析"><a href="#2-4-HTTP-协议解析" class="headerlink" title="2.4 HTTP-协议解析"></a>2.4 HTTP-协议解析</h3><p>将资料中准备好的Demo工程，导入到我们的IDEA中，有一个Server.java类，这里面就是自定义的一个服务器代码，主要使用到的是<code>ServerSocket</code>和<code>Socket</code></p><blockquote><p>&#x3D;&#x3D;说明：以下代码大家不需要自己写，我们主要是通过代码，让大家了解到服务器针对HTTP协议的解析机制&#x3D;&#x3D;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 自定义web服务器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8080</span>); <span class="comment">// 监听指定端口</span></span><br><span class="line">        System.out.println(<span class="string">&quot;server is running...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">sock</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;connected from &quot;</span> + sock.getRemoteSocketAddress());</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>(sock);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Handler</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    Socket sock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(Socket sock)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sock = sock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="built_in">this</span>.sock.getInputStream();</span><br><span class="line">             <span class="type">OutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="built_in">this</span>.sock.getOutputStream()) &#123;</span><br><span class="line">                handle(input, output);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.sock.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;client disconnected.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(InputStream input, OutputStream output)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(input, StandardCharsets.UTF_8));</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(output, StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">// 读取HTTP请求:</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">requestOk</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">        <span class="keyword">if</span> (first.startsWith(<span class="string">&quot;GET / HTTP/1.&quot;</span>)) &#123;</span><br><span class="line">            requestOk = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">            <span class="keyword">if</span> (header.isEmpty()) &#123; <span class="comment">// 读取到空行时, HTTP Header读取完毕</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(header);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(requestOk ? <span class="string">&quot;Response OK&quot;</span> : <span class="string">&quot;Response Error&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!requestOk) &#123;<span class="comment">// 发送错误响应:</span></span><br><span class="line">            writer.write(<span class="string">&quot;HTTP/1.0 404 Not Found\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;Content-Length: 0\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 发送成功响应:</span></span><br><span class="line">            <span class="comment">//读取html文件，转换为字符串</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Server.class.getClassLoader().getResourceAsStream(<span class="string">&quot;html/a.html&quot;</span>);</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is));</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                data.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> data.toString().getBytes(StandardCharsets.UTF_8).length;</span><br><span class="line"></span><br><span class="line">            writer.write(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;Connection: keep-alive\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;Content-Type: text/html\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;Content-Length: &quot;</span> + length + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;\r\n&quot;</span>); <span class="comment">// 空行标识Header和Body的分隔</span></span><br><span class="line">            writer.write(data.toString());</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动ServerSocket程序：</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202170430928.png" alt="image-20221202170430928"></p><p>浏览器输入：<code>http://localhost:8080</code>  就会访问到ServerSocket程序 </p><ul><li>ServerSocket程序，会读取服务器上<code>html/a.html</code>文件，并把文件数据发送给浏览器</li><li>浏览器接收到a.html文件中的数据后进行解析，显示以下内容</li></ul><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202171204705.png" alt="image-20221202171204705"> </p><p>现在大家知道了服务器是可以使用java完成编写，是可以接受页面发送的请求和响应数据给前端浏览器的，而在开发中真正用到的Web服务器，我们不会自己写的，都是使用目前比较流行的web服务器。如：<strong>Tomcat</strong></p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220824233452167.png"> </p><h2 id="3-WEB服务器-Tomcat"><a href="#3-WEB服务器-Tomcat" class="headerlink" title="3. WEB服务器-Tomcat"></a>3. WEB服务器-Tomcat</h2><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h3><h4 id="3-1-1-服务器概述"><a href="#3-1-1-服务器概述" class="headerlink" title="3.1.1 服务器概述"></a>3.1.1 服务器概述</h4><p><strong>服务器硬件</strong></p><ul><li>指的也是计算机，只不过服务器要比我们日常使用的计算机大很多。</li></ul><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202173148317.png" alt="image-20221202173148317"> </p><p>服务器，也称伺服器。是提供计算服务的设备。由于服务器需要响应服务请求，并进行处理，因此一般来说服务器应具备承担服务并且保障服务的能力。</p><p>服务器的构成包括处理器、硬盘、内存、系统总线等，和通用的计算机架构类似，但是由于需要提供高可靠的服务，因此在处理能力、稳定性、可靠性、安全性、可扩展性、可管理性等方面要求较高。</p><p>在网络环境下，根据服务器提供的服务类型不同，可分为：文件服务器，数据库服务器，应用程序服务器，WEB服务器等。</p><p>服务器只是一台设备，必须安装服务器软件才能提供相应的服务。</p><p><strong>服务器软件</strong></p><p>服务器软件：基于ServerSocket编写的程序</p><ul><li>服务器软件本质是一个运行在服务器设备上的应用程序</li><li>能够接收客户端请求，并根据请求给客户端响应数据</li></ul><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/1530625192392.png" alt="1530625192392"></p><h4 id="3-1-2-Web服务器"><a href="#3-1-2-Web服务器" class="headerlink" title="3.1.2 Web服务器"></a>3.1.2 Web服务器</h4><p>Web服务器是一个应用程序(软件)，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作(不用程序员自己写代码去解析http协议规则)，让Web开发更加便捷。主要功能是”提供网上信息浏览服务”。</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220824233614686.png"></p><p>Web服务器是安装在服务器端的一款软件，将来我们把自己写的Web项目部署到Tomcat服务器软件中，当Web服务器软件启动后，部署在Web服务器软件中的页面就可以直接通过浏览器来访问了。</p><p><strong>Web服务器软件使用步骤</strong></p><ul><li>准备静态资源</li><li>下载安装Web服务器软件</li><li>将静态资源部署到Web服务器上</li><li>启动Web服务器使用浏览器访问对应的资源</li></ul><p>第1步：准备静态资源</p><ul><li>在提供的资料中找到静态资源文件</li></ul><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202180119859.png" alt="image-20221202180119859"> </p><p>第2步：下载安装Web服务器软件</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202181110555.png" alt="image-20221202181110555"></p><p>第3步：将静态资源部署到Web服务器上</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202180805686.png" alt="image-20221202180805686"></p><p>第4步：启动Web服务器使用浏览器访问对应的资源</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202181346327.png" alt="image-20221202181346327"></p><p>浏览器输入：<code>http://localhost:8080/demo/index.html</code></p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202181651469.png" alt="image-20221202181651469"></p><p>上述内容在演示的时候，使用的是Apache下的Tomcat软件，至于Tomcat软件如何使用，后面会详细的讲到。而对于Web服务器来说，实现的方案有很多，Tomcat只是其中的一种，而除了Tomcat以外，还有很多优秀的Web服务器，比如:</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220824233728524.png" alt="image-20220824233728524"> </p><p>Tomcat就是一款软件，我们主要是以学习如何去使用为主。具体我们会从以下这些方向去学习:</p><ol><li><p>简介：初步认识下Tomcat</p></li><li><p>基本使用: 安装、卸载、启动、关闭、配置和项目部署，这些都是对Tomcat的基本操作</p></li><li><p>IDEA中如何创建Maven Web项目</p></li><li><p>IDEA中如何使用Tomcat,后面这两个都是我们以后开发经常会用到的方式</p></li></ol><p>首选我们来认识下Tomcat。</p><h4 id="3-1-3-Tomcat"><a href="#3-1-3-Tomcat" class="headerlink" title="3.1.3 Tomcat"></a>3.1.3 Tomcat</h4><p>Tomcat服务器软件是一个免费的开源的web应用服务器。是Apache软件基金会的一个核心项目。由Apache，Sun和其他一些公司及个人共同开发而成。</p><p>由于Tomcat只支持Servlet&#x2F;JSP少量JavaEE规范，所以是一个开源免费的轻量级Web服务器。</p><blockquote><p>JavaEE规范：   JavaEE &#x3D;&gt; Java Enterprise Edition(Java企业版)</p><p>avaEE规范就是指Java企业级开发的技术规范总和。包含13项技术规范：JDBC、JNDI、EJB、RMI、JSP、Servlet、XML、JMS、Java IDL、JTS、JTA、JavaMail、JAF</p></blockquote><p>因为Tomcat支持Servlet&#x2F;JSP规范，所以Tomcat也被称为Web容器、Servlet容器。JavaWeb程序需要依赖Tomcat才能运行。</p><p>Tomcat的官网: <a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a> </p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220824233903517.png" alt="image-20220824233903517"> </p><h3 id="3-2-基本使用"><a href="#3-2-基本使用" class="headerlink" title="3.2 基本使用"></a>3.2 基本使用</h3><h4 id="3-2-1-下载"><a href="#3-2-1-下载" class="headerlink" title="3.2.1 下载"></a>3.2.1 下载</h4><p>直接从官方网站下载：<a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220824234407828.png"></p><blockquote><p>Tomcat软件类型说明：</p><ul><li>tar.gz文件，是linux和mac操作系统下的压缩版本</li><li>zip文件，是window操作系统下压缩版本（我们选择zip文件）</li></ul></blockquote><p>大家可以自行下载，也可以直接使用资料中已经下载好的资源，</p><p>Tomcat的软件程序  ：&#x2F;资料&#x2F;SpringbootWeb&#x2F;apache-tomcat-9.0.27-windows-x64.zip</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220824234527743.png"> </p><h4 id="3-2-2-安装与卸载"><a href="#3-2-2-安装与卸载" class="headerlink" title="3.2.2 安装与卸载"></a>3.2.2 安装与卸载</h4><p><strong>安装:</strong> Tomcat是绿色版，直接解压即安装</p><blockquote><p>在E盘的develop目录下，将<code>apache-tomcat-9.0.27-windows-x64.zip</code>进行解压缩，会得到一个<code>apache-tomcat-9.0.27</code>的目录，Tomcat就已经安装成功。</p></blockquote><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202184545321.png" alt="image-20221202184545321"></p><p>&#x3D;&#x3D;注意，Tomcat在解压缩的时候，解压所在的目录可以任意，但最好解压到一个不包含中文和空格的目录，因为后期在部署项目的时候，如果路径有中文或者空格可能会导致程序部署失败。&#x3D;&#x3D;</p><p>打开<code>apache-tomcat-9.0.27</code>目录就能看到如下目录结构，每个目录中包含的内容需要认识下</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220824234652173.png">  </p><p>bin：目录下有两类文件，一种是以<code>.bat</code>结尾的，是Windows系统的可执行文件，一种是以<code>.sh</code>结尾的，是Linux系统的可执行文件。</p><p>webapps：就是以后项目部署的目录</p><p><strong>卸载：</strong>卸载比较简单，可以直接删除目录即可</p><h4 id="3-2-3-启动与关闭"><a href="#3-2-3-启动与关闭" class="headerlink" title="3.2.3 启动与关闭"></a>3.2.3 启动与关闭</h4><p><strong>启动Tomcat</strong> </p><ul><li>双击tomcat解压目录&#x2F;bin&#x2F;<strong>startup.bat</strong>文件即可启动tomcat</li></ul><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202183201663.png" alt="image-20221202183201663"></p><p>&#x3D;&#x3D;注意: tomcat服务器启动后,黑窗口不会关闭,只要黑窗口不关闭,就证明tomcat服务器正在运行&#x3D;&#x3D;</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202183409304.png" alt="image-20221202183409304"></p><p>Tomcat的默认端口为8080，所以在浏览器的地址栏输入：<code>http://127.0.0.1:8080</code> 即可访问tomcat服务器</p><blockquote><p>127.0.0.1 也可以使用localhost代替。如：<code>http://localhost:8080</code></p></blockquote><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202183550682.png" alt="image-20221202183550682"></p><ul><li>能看到以上图片中Apache Tomcat的内容就说明Tomcat已经启动成功</li></ul><p>&#x3D;&#x3D;注意事项&#x3D;&#x3D; ：Tomcat启动的过程中，遇到控制台有中文乱码时，可以通常修改conf&#x2F;logging.prooperties文件解决</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220825083848086.png" alt="image-20220825083848086"> </p><p><strong>关闭:</strong>  关闭有三种方式 </p><p>1、强制关闭：直接x掉Tomcat窗口（不建议）</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202184753808.png" alt="image-20221202184753808"></p><p>2、正常关闭：bin\shutdown.bat</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202185103941.png" alt="image-20221202185103941"></p><p>3、正常关闭：在Tomcat启动窗口中按下 Ctrl+C</p><ul><li>说明：如果按下Ctrl+C没有反映，可以多按几次</li></ul><h4 id="3-2-4-常见问题"><a href="#3-2-4-常见问题" class="headerlink" title="3.2.4 常见问题"></a>3.2.4 常见问题</h4><p><strong>问题1：Tomcat启动时，窗口一闪而过</strong></p><ul><li>检查JAVA_HOME环境变量是否正确配置</li></ul><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202190033167.png" alt="image-20221202190033167"></p><p><strong>问题2：端口号冲突</strong></p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220825084104447.png" alt="image-20220825084104447"></p><ul><li><p>发生问题的原因：Tomcat使用的端口被占用了。</p></li><li><p>解决方案：换Tomcat端口号</p><ul><li>要想修改Tomcat启动的端口号，需要修改 conf&#x2F;server.xml文件</li></ul></li></ul><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220825084017185.png" alt="image-20220825084017185"> </p><blockquote><p>注: HTTP协议默认端口号为80，如果将Tomcat端口号改为80，则将来访问Tomcat时，将不用输入端口号。</p></blockquote><h3 id="3-3-入门程序解析"><a href="#3-3-入门程序解析" class="headerlink" title="3.3 入门程序解析"></a>3.3 入门程序解析</h3><p>关于web开发的基础知识，我们可以告一段落了。下面呢，我们在基于今天的核心技术点Springboot快速入门案例进行分析。</p><h4 id="3-3-1-Spring官方骨架"><a href="#3-3-1-Spring官方骨架" class="headerlink" title="3.3.1 Spring官方骨架"></a>3.3.1 Spring官方骨架</h4><p>之前我们创建的Springboot入门案例，是基于Spring官方提供的骨架实现的。</p><p>Spring官方骨架，可以理解为Spring官方为程序员提供一个搭建项目的模板。</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202195646621.png" alt="image-20221202195646621"></p><p>我们可以通过访问：<a href="https://start.spring.io/">https://start.spring.io/</a> ，进入到官方骨架页面</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202201623424.png" alt="image-20221202201623424"></p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202200356398.png" alt="image-20221202200356398"></p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202200547676.png" alt="image-20221202200547676"></p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202200708988.png" alt="image-20221202200708988"></p><p>Spring官方生成的Springboot项目，怎么使用呢？</p><ul><li>解压缩后，就会得到一个Springboot项目工程</li></ul><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202201042109.png" alt="image-20221202201042109"></p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202201221136.png" alt="image-20221202201221136"></p><p>打开pom.xml文件，我们可以看到Springboot项目中引入了web依赖和test依赖</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202201826364.png" alt="image-20221202201826364"></p><blockquote><p><strong>结论：不论使用IDEA创建Springboot项目，还是直接在官方网站利用骨架生成Springboot项目，项目的结构和pom.xml文件中内容是相似的。</strong></p></blockquote><h4 id="3-3-2-起步依赖"><a href="#3-3-2-起步依赖" class="headerlink" title="3.3.2 起步依赖"></a>3.3.2 起步依赖</h4><p>在我们之前讲解的Springboot快速入门案例中，同样也引用了：web依赖和test依赖</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202202305118.png" alt="image-20221202202305118"></p><p>spring-boot-starter-web和spring-boot-starter-test，在Springboot中又称为：起步依赖</p><p>而在Springboot的项目中，有很多的起步依赖，他们有一个共同的特征：就是以<code>spring-boot-starter-</code>作为开头。在以后大家遇到spring-boot-starter-xxx这类的依赖，都为起步依赖。</p><p>起步依赖有什么特殊之处呢，这里我们以入门案例中引入的起步依赖做为讲解：</p><ul><li>spring-boot-starter-web：包含了web应用开发所需要的常见依赖</li><li>spring-boot-starter-test：包含了单元测试所需要的常见依赖</li></ul><blockquote><p><strong>spring-boot-starter-web</strong>内部把关于Web开发所有的依赖都已经导入并且指定了版本，只需引入 <code>spring-boot-starter-web</code> 依赖就可以实现Web开发的需要的功能</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202204013113.png" alt="image-20221202204013113"></p></blockquote><p>Spring的官方提供了很多现成的starter(起步依赖)，我们在开发相关应用时，只需要引入对应的starter即可。</p><p>官方地址：<a href="https://docs.spring.io/spring-boot/docs/2.7.2/reference/htmlsingle/#using.build-systems.starters">https://docs.spring.io/spring-boot/docs/2.7.2/reference/htmlsingle/#using.build-systems.starters</a></p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202204536647.png" alt="image-20221202204536647"></p><p>每一个起步依赖，都用于开发一个特定的功能。</p><blockquote><p>举例：当我们开发中需要使用redis数据库时，只需要在Springboot项目中，引入：spring-boot-starter-redis ，即可导入redis开发所需要的依赖。</p></blockquote><h4 id="3-3-2-Springboot父工程"><a href="#3-3-2-Springboot父工程" class="headerlink" title="3.3.2 Springboot父工程"></a>3.3.2 Springboot父工程</h4><p>在我们之前开发的Springboot入门案例中，我们通过maven引入的依赖，是没有指定具体的依赖版本号的。</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202205103486.png" alt="image-20221202205103486"></p><p>为什么没有指定<version>版本号，可以正常使用呢？</p><ul><li>因为每一个Springboot工程，都有一个父工程。依赖的版本号，在父工程中统一管理。</li></ul><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20221202205318778.png" alt="image-20221202205318778"></p><h4 id="3-3-3-内嵌Tomcat"><a href="#3-3-3-内嵌Tomcat" class="headerlink" title="3.3.3 内嵌Tomcat"></a>3.3.3 内嵌Tomcat</h4><p>问题：为什么我们之前书写的Springboot入门程序中，并没有把程序部署到Tomcat的webapps目录下，也可以运行呢？</p><p>原因呢，是因为在我们的Springboot中，引入了web运行环境(也就是引入spring-boot-starter-web起步依赖)，其内部已经集成了内置的Tomcat服务器。</p><p>我们可以通过IDEA开发工具右侧的maven面板中，就可以看到当前工程引入的依赖。其中已经将Tomcat的相关依赖传递下来了，也就是说在Springboot中可以直接使用Tomcat服务器。</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220825194553137.png"> </p><p>当我们运行Springboot的引导类时(运行main方法)，就会看到命令行输出的日志，其中占用8080端口的就是Tomcat。</p><p><img src="/../images/Springboot%E5%85%A5%E9%97%A8/image-20220825195359993.png" alt="image-20220825195359993"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Springboot基础&quot;&gt;&lt;a href=&quot;#Springboot基础&quot; class=&quot;headerlink&quot; title=&quot;Springboot基础&quot;&gt;&lt;/a&gt;Springboot基础&lt;/h1&gt;&lt;h2 id=&quot;课程内容&quot;&gt;&lt;a href=&quot;#课程内容&quot; class=&quot;headerlink&quot; title=&quot;课程内容&quot;&gt;&lt;/a&gt;课程内容&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;SpringbootWeb入门&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTTP协议&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web服务器-Tomcat&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Springboot" scheme="https://ntostudy.github.io/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Maven基础</title>
    <link href="https://ntostudy.github.io/2024/07/31/Maven%E5%9F%BA%E7%A1%80/"/>
    <id>https://ntostudy.github.io/2024/07/31/Maven%E5%9F%BA%E7%A1%80/</id>
    <published>2024-07-31T07:46:48.000Z</published>
    <updated>2024-07-31T12:54:11.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><blockquote><ol><li>初识Maven</li><li>Maven概述<ul><li>Maven模型介绍</li><li>Maven仓库介绍</li><li>Maven安装与配置</li></ul></li><li>IDEA集成Maven</li><li>依赖管理</li></ol></blockquote><span id="more"></span><h2 id="01-Maven课程介绍"><a href="#01-Maven课程介绍" class="headerlink" title="01. Maven课程介绍"></a>01. Maven课程介绍</h2><h3 id="1-1-课程安排"><a href="#1-1-课程安排" class="headerlink" title="1.1 课程安排"></a>1.1 课程安排</h3><p>学习完前端Web开发技术后，我们即将开始学习后端Web开发技术。做为一名Java开发工程师，<strong>后端Web开发技术是我们学习的重点</strong>。</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221130095316032.png" alt="image-20221130095316032"></p><p>后端Web开发技术的学习，我们会先学习Java项目的构建工具：Maven</p><h3 id="1-2-初识Maven"><a href="#1-2-初识Maven" class="headerlink" title="1.2 初识Maven"></a>1.2 初识Maven</h3><h4 id="1-2-1-什么是Maven"><a href="#1-2-1-什么是Maven" class="headerlink" title="1.2.1 什么是Maven"></a>1.2.1 什么是Maven</h4><p>Maven是Apache旗下的一个开源项目，是一款用于管理和构建java项目的工具。</p><p>官网：<a href="https://maven.apache.org/">https://maven.apache.org/</a></p><blockquote><p>Apache 软件基金会，成立于1999年7月，是目前世界上最大的最受欢迎的开源软件基金会，也是一个专门为支持开源项目而生的非盈利性组织。</p><p>开源项目：<a href="https://www.apache.org/index.html#projects-list">https://www.apache.org/index.html#projects-list</a></p></blockquote><h4 id="1-2-2-Maven的作用"><a href="#1-2-2-Maven的作用" class="headerlink" title="1.2.2 Maven的作用"></a>1.2.2 Maven的作用</h4><p>使用Maven能够做什么呢？</p><ol><li>依赖管理</li><li>统一项目结构</li><li>项目构建</li></ol><p><strong>依赖管理</strong>：</p><ul><li>方便快捷的管理项目依赖的资源(jar包)，避免版本冲突问题</li></ul><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221130104014162.png" alt="image-20221130104014162"></p><p>当使用maven进行项目依赖(jar包)管理，则很方便的可以解决这个问题。 我们只需要在maven项目的pom.xml文件中，添加一段如下图所示的配置即可实现。</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616001159531.png" alt="image-20220616001159531">  </p><p>**统一项目结构 : **</p><ul><li>提供标准、统一的项目结构</li></ul><p>在项目开发中，当你使用不同的开发工具 (如：Eclipse、Idea)，创建项目工程时：</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221130212841973.png" alt="image-20221130212841973"> </p><p>若我们创建的是一个maven工程，是可以帮我们自动生成统一、标准的项目目录结构：</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221130220539444.png"></p><p>具体的统一结构如下：</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221130140132209.png"></p><blockquote><p>目录说明： </p><ul><li>src&#x2F;main&#x2F;java: java源代码目录</li><li>src&#x2F;main&#x2F;resources:  配置文件信息</li><li>src&#x2F;test&#x2F;java: 测试代码</li><li>src&#x2F;test&#x2F;resources: 测试配置文件信息</li></ul></blockquote><p><strong>项目构建 :</strong> </p><ul><li>maven提供了标准的、跨平台(Linux、Windows、MacOS) 的自动化项目构建方式</li></ul><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221130140247524.png" alt="image-20221130140247524"></p><p>如上图所示我们开发了一套系统，代码需要进行编译、测试、打包、发布，这些操作如果需要反复进行就显得特别麻烦，而Maven提供了一套简单的命令来完成项目构建。</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221130222907628.png" alt="image-20221130222907628"></p><p>综上所述，可以得到一个结论：<strong>Maven是一款管理和构建java项目的工具</strong></p><h2 id="02-Maven概述"><a href="#02-Maven概述" class="headerlink" title="02. Maven概述"></a>02. Maven概述</h2><h3 id="2-1-Maven介绍"><a href="#2-1-Maven介绍" class="headerlink" title="2.1 Maven介绍"></a>2.1 Maven介绍</h3><p>Apache Maven是一个项目管理和构建工具，它基于项目对象模型(Project Object Model , 简称: POM)的概念，通过一小段描述信息来管理项目的构建、报告和文档。</p><p>官网：<a href="https://maven.apache.org/">https://maven.apache.org/</a></p><p>Maven的作用： </p><ol><li>方便的依赖管理</li><li>统一的项目结构</li><li>标准的项目构建流程</li></ol><h3 id="2-2-Maven模型"><a href="#2-2-Maven模型" class="headerlink" title="2.2 Maven模型"></a>2.2 Maven模型</h3><ul><li>项目对象模型 (Project Object Model)</li><li>依赖管理模型(Dependency)</li><li>构建生命周期&#x2F;阶段(Build lifecycle &amp; phases)</li></ul><p>1). 构建生命周期&#x2F;阶段(Build lifecycle &amp; phases)</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221130142100703.png" alt="image-20221130142100703"></p><p>以上图中紫色框起来的部分，就是用来完成标准化构建流程 。当我们需要编译，Maven提供了一个编译插件供我们使用；当我们需要打包，Maven就提供了一个打包插件供我们使用等。 </p><p>2). 项目对象模型 (Project Object Model)</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221130142643255.png" alt="image-20221130142643255"></p><p>以上图中紫色框起来的部分属于项目对象模型，就是将我们自己的项目抽象成一个对象模型，有自己专属的坐标，如下图所示是一个Maven项目：</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616094113852.png" alt="image-20220616094113852"></p><blockquote><p>坐标，就是资源(jar包)的唯一标识，通过坐标可以定位到所需资源(jar包)位置</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221130230134757.png" alt="image-20221130230134757"></p></blockquote><p>3). 依赖管理模型(Dependency)</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221130143139644.png" alt="image-20221130143139644"></p><p>以上图中紫色框起来的部分属于依赖管理模型，是使用坐标来描述当前项目依赖哪些第三方jar包</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221130174805973.png" alt="image-20221130174805973"></p><p>之前我们项目中需要jar包时，直接就把jar包复制到项目下的lib目录，而现在书写在pom.xml文件中的坐标又是怎么能找到所要的jar包文件的呢？</p><blockquote><p>答案：Maven仓库</p></blockquote><h3 id="2-3-Maven仓库"><a href="#2-3-Maven仓库" class="headerlink" title="2.3 Maven仓库"></a>2.3 Maven仓库</h3><p>仓库：用于存储资源，管理各种jar包</p><blockquote><p>仓库的本质就是一个目录(文件夹)，这个目录被用来存储开发中所有依赖(就是jar包)和插件</p></blockquote><p>Maven仓库分为：</p><ul><li>本地仓库：自己计算机上的一个目录(用来存储jar包)</li><li>中央仓库：由Maven团队维护的全球唯一的。仓库地址：<a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></li><li>远程仓库(私服)：一般由公司团队搭建的私有仓库</li></ul><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616095633552.png" alt="image-20220616095633552"></p><p>当项目中使用坐标引入对应依赖jar包后，首先会查找本地仓库中是否有对应的jar包</p><ul><li><p>如果有，则在项目直接引用</p></li><li><p>如果没有，则去中央仓库中下载对应的jar包到本地仓库</p></li></ul><p>如果还可以搭建远程仓库(私服)，将来jar包的查找顺序则变为： 本地仓库 –&gt; 远程仓库–&gt; 中央仓库</p><h3 id="2-4-Maven安装"><a href="#2-4-Maven安装" class="headerlink" title="2.4 Maven安装"></a>2.4 Maven安装</h3><p>认识了Maven后，我们就要开始使用Maven了，那么首先我们要进行Maven的下载与安装。</p><h4 id="2-4-1-下载"><a href="#2-4-1-下载" class="headerlink" title="2.4.1 下载"></a>2.4.1 下载</h4><p>下载地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><p>在提供的资料中，已经提供了下载好的安装包。如下： </p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616100211209.png" alt="image-20220616100211209"> </p><h4 id="2-4-2-安装步骤"><a href="#2-4-2-安装步骤" class="headerlink" title="2.4.2 安装步骤"></a>2.4.2 安装步骤</h4><p>Maven安装配置步骤：</p><ol><li>解压安装</li><li>配置仓库</li><li>配置Maven环境变量</li></ol><p><strong>1、解压 apache-maven-3.6.1-bin.zip（解压即安装）</strong></p><blockquote><p>建议解压到没有中文、特殊字符的路径下。如课程中解压到 <code>E:\develop</code> 下。</p></blockquote><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/1-1669821012006.gif"> </p><p>解压缩后的目录结构如下：</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616100529868-1669794069698.png" alt="image-20220616100529868"> </p><ul><li>bin目录 ： 存放的是可执行命令。（mvn 命令重点关注）</li><li>conf目录 ：存放Maven的配置文件。（settings.xml配置文件后期需要修改）</li><li>lib目录 ：存放Maven依赖的jar包。（Maven也是使用java开发的，所以它也依赖其他的jar包）</li></ul><p><strong>2、配置本地仓库</strong></p><p>2.1、在自己计算机上新一个目录（本地仓库，用来存储jar包）</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221130231857537.png" alt="image-20221130231857537"> </p><p>2.2、进入到conf目录下修改settings.xml配置文件 </p><p>1). 使用超级记事本软件，打开settings.xml文件，定位到53行</p><p>2). 复制<localRepository>标签，粘贴到注释的外面（55行）</p><p>3). 复制之前新建的用来存储jar包的路径，替换掉<localRepository>标签体内容</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/2.gif"></p><p><strong>3、配置阿里云私服</strong></p><p>由于中央仓库在国外，所以下载jar包速度可能比较慢，而阿里公司提供了一个远程仓库，里面基本也都有开源项目的jar包。</p><p>进入到conf目录下修改settings.xml配置文件：</p><p>1). 使用超级记事本软件，打开settings.xml文件，定位到160行左右</p><p>2). 在<mirrors>标签下为其添加子标签<mirror>，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>          </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/3.gif"></p><p>注意配置的位置，在<mirrors> … </mirrors> 中间添加配置。如下图所示：</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221130161346565.png" alt="image-20221130161346565"></p><p>&#x3D;&#x3D;注:  只可配置一个<mirror>(另一个要注释!) ，不然两个可能发生冲突，导致jar包无法下载!!!!!!!&#x3D;&#x3D;</p><p><strong>4、配置环境变量</strong></p><blockquote><p>Maven环境变量的配置类似于JDK环境变量配置一样</p></blockquote><p>1). 在系统变量处新建一个变量MAVEN_HOME</p><ul><li>MAVEN_HOME环境变量的值，设置为maven的解压安装目录</li></ul><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616102344350.png"></p><p>2). 在Path中进行配置</p><ul><li>PATH环境变量的值，设置为：%MAVEN_HOME%\bin</li></ul><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616102435856.png"></p><p>3). 打开DOS命令提示符进行验证，出现如图所示表示安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616102554143.png" alt="image-20220616102554143"> </p><h2 id="03-IDEA集成Maven"><a href="#03-IDEA集成Maven" class="headerlink" title="03. IDEA集成Maven"></a>03. IDEA集成Maven</h2><p>我们要想在IDEA中使用Maven进行项目构建，就需要在IDEA中集成Maven</p><h3 id="3-1-配置Maven环境"><a href="#3-1-配置Maven环境" class="headerlink" title="3.1 配置Maven环境"></a>3.1 配置Maven环境</h3><h4 id="3-1-1-当前工程设置"><a href="#3-1-1-当前工程设置" class="headerlink" title="3.1.1 当前工程设置"></a>3.1.1 当前工程设置</h4><p>1、选择 IDEA中 File  &#x3D;&gt;  Settings  &#x3D;&gt;  Build,Execution,Deployment  &#x3D;&gt;  Build Tools  &#x3D;&gt;  Maven</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616103219646.png" alt="image-20220616103219646"></p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221130234731629.png" alt="image-20221130234731629"></p><p>2、设置IDEA使用本地安装的Maven，并修改配置文件及本地仓库路径</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616103302386.png"></p><blockquote><p>Maven home path ：指定当前Maven的安装目录</p><p>User settings file ：指定当前Maven的settings.xml配置文件的存放路径</p><p>Local repository ：指定Maven的本地仓库的路径 (如果指定了settings.xml, 这个目录会自动读取出来, 可以不用手动指定)</p></blockquote><p>3、配置工程的编译版本为11</p><ul><li>Maven默认使用的编译版本为5（版本过低）</li></ul><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201093737128.png" alt="image-20221201093737128"> </p><p>上述配置的maven环境，只是针对于当前工程的，如果我们再创建一个project，又恢复成默认的配置了。 要解决这个问题， 我们就需要配置全局的maven环境。</p><h4 id="3-1-2-全局设置"><a href="#3-1-2-全局设置" class="headerlink" title="3.1.2 全局设置"></a>3.1.2 全局设置</h4><p>1、进入到IDEA欢迎页面</p><ul><li>选择 IDEA中 File  &#x3D;&gt;  close project</li></ul><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/4.gif"></p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616104338612.png"></p><p>2、打开 All settings , 选择 Build,Execution,Deployment  &#x3D;&gt;  Build Tools  &#x3D;&gt;  Maven</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616104517726.png"></p><p>3、配置工程的编译版本为11</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201093737128.png" alt="image-20221201093737128"></p><p>这里所设置的maven的环境信息，并未指定任何一个project，此时设置的信息就属于全局配置信息。 以后，我们再创建project，默认就是使用我们全局配置的信息。</p><h3 id="3-2-Maven项目"><a href="#3-2-Maven项目" class="headerlink" title="3.2 Maven项目"></a>3.2 Maven项目</h3><h4 id="3-2-1-创建Maven项目"><a href="#3-2-1-创建Maven项目" class="headerlink" title="3.2.1 创建Maven项目"></a>3.2.1 创建Maven项目</h4><p>1、创建一个空项目 </p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201095621738.png" alt="image-20221201095621738"></p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201095600057.png" alt="image-20221201095600057"></p><p>2、创建模块，选择Maven，点击Next</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201095831320.png" alt="image-20221201095831320"></p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201100011799.png" alt="image-20221201100011799"></p><p>3、填写模块名称，坐标信息，点击finish，创建完成</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201100502234.png" alt="image-20221201100502234"> </p><p>4、在Maven工程下，创建HelloWorld类</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201101603397.png" alt="image-20221201101603397"></p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201101643427.png" alt="image-20221201101643427"></p><blockquote><ul><li><p>Maven项目的目录结构:</p><p>maven-project01<br>|—  src  (源代码目录和测试代码目录)<br>        |—  main (源代码目录)<br>                   |— java (源代码java文件目录)<br>                   |— resources (源代码配置文件目录)<br>        |—  test (测试代码目录)<br>                   |— java (测试代码java目录)<br>                   |— resources (测试代码配置文件目录)<br>|— target (编译、打包生成文件存放目录)</p></li></ul></blockquote><p>5、编写 HelloWorld，并运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Maven ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-POM配置详解"><a href="#3-2-2-POM配置详解" class="headerlink" title="3.2.2 POM配置详解"></a>3.2.2 POM配置详解</h4><p>POM (Project Object Model) ：指的是项目对象模型，用来描述当前的maven项目。</p><ul><li>使用pom.xml文件来实现</li></ul><p>pom.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- POM模型版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 当前项目坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_project1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 打包方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pom文件详解：</p><ul><li><project> ：pom文件的根标签，表示当前maven项目</li><li><modelVersion> ：声明项目描述遵循哪一个POM模型版本<ul><li>虽然模型本身的版本很少改变，但它仍然是必不可少的。目前POM模型版本是4.0.0</li></ul></li><li>坐标 ：<groupId>、<artifactId>、<version><ul><li>定位项目在本地仓库中的位置，由以上三个标签组成一个坐标</li></ul></li><li><packaging> ：maven项目的打包方式，通常设置为jar或war（默认值：jar）</li></ul><h4 id="3-2-3-Maven坐标详解"><a href="#3-2-3-Maven坐标详解" class="headerlink" title="3.2.3 Maven坐标详解"></a>3.2.3 Maven坐标详解</h4><p>什么是坐标？</p><ul><li>Maven中的坐标是&#x3D;&#x3D;资源的唯一标识&#x3D;&#x3D; , 通过该坐标可以唯一定位资源位置</li><li>使用坐标来定义项目或引入项目中需要的依赖</li></ul><p>Maven坐标主要组成</p><ul><li>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）</li><li>artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）</li><li>version：定义当前项目版本号</li></ul><p>如下图就是使用坐标表示一个项目：</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616111031057.png" alt="image-20220616111031057"> </p><blockquote><p><strong>注意：</strong></p><ul><li>上面所说的资源可以是插件、依赖、当前项目。</li><li>我们的项目如果被其他的项目依赖时，也是需要坐标来引入的。</li></ul></blockquote><h3 id="3-3-导入Maven项目"><a href="#3-3-导入Maven项目" class="headerlink" title="3.3 导入Maven项目"></a>3.3 导入Maven项目</h3><ul><li><strong>方式1：使用Maven面板，快速导入项目</strong></li></ul><p>打开IDEA，选择右侧Maven面板，点击 + 号，选中对应项目的pom.xml文件，双击即可</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201104320521.png" alt="image-20221201104320521"></p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201104906754.png" alt="image-20221201104906754"> </p><blockquote><p>说明：如果没有Maven面板，选择 View  &#x3D;&gt;  Appearance  &#x3D;&gt;  Tool Window Bars</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616111937679.png" alt="image-20220616111937679"> </p></blockquote><ul><li><strong>方式2：使用idea导入模块项目</strong></li></ul><p>File  &#x3D;&gt;  Project Structure  &#x3D;&gt;  Modules  &#x3D;&gt;  +  &#x3D;&gt;  Import Module</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220823161727718.png"></p><p>找到要导入工程的pom.xml</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201105532909.png" alt="image-20221201105532909"></p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201105845872.png" alt="image-20221201105845872"></p><h2 id="04-依赖管理"><a href="#04-依赖管理" class="headerlink" title="04. 依赖管理"></a>04. 依赖管理</h2><h3 id="4-1-依赖配置"><a href="#4-1-依赖配置" class="headerlink" title="4.1 依赖配置"></a>4.1 依赖配置</h3><p>依赖：指当前项目运行所需要的jar包。一个项目中可以引入多个依赖：</p><p>例如：在当前工程中，我们需要用到logback来记录日志，此时就可以在maven工程的pom.xml文件中，引入logback的依赖。具体步骤如下：</p><ol><li><p>在pom.xml中编写<dependencies>标签</p></li><li><p>在<dependencies>标签中使用<dependency>引入坐标</p></li><li><p>定义坐标的 groupId、artifactId、version</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第1个依赖 : logback --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第2个依赖 : junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>点击刷新按钮，引入最新加入的坐标<ul><li>刷新依赖：保证每一次引入新的依赖，或者修改现有的依赖配置，都可以加入最新的坐标</li></ul></li></ol><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221130184402805.png" alt="image-20221130184402805">  </p><blockquote><p>注意事项：</p><ol><li>如果引入的依赖，在本地仓库中不存在，将会连接远程仓库 &#x2F; 中央仓库，然后下载依赖（这个过程会比较耗时，耐心等待）</li><li>如果不知道依赖的坐标信息，可以到mvn的中央仓库（<a href="https://mvnrepository.com/%EF%BC%89%E4%B8%AD%E6%90%9C%E7%B4%A2">https://mvnrepository.com/）中搜索</a></li></ol></blockquote><p><strong>添加依赖的几种方式：</strong></p><ol><li><p>利用中央仓库搜索的依赖坐标</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/5.gif"></p></li><li><p>利用IDEA工具搜索依赖</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/6.gif"></p></li><li><p>熟练上手maven后，快速导入依赖</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/7.gif"></p></li></ol><h3 id="4-2-依赖传递"><a href="#4-2-依赖传递" class="headerlink" title="4.2 依赖传递"></a>4.2 依赖传递</h3><h4 id="4-2-1-依赖具有传递性"><a href="#4-2-1-依赖具有传递性" class="headerlink" title="4.2.1 依赖具有传递性"></a>4.2.1 依赖具有传递性</h4><p>早期我们没有使用maven时，向项目中添加依赖的jar包，需要把所有的jar包都复制到项目工程下。如下图所示，需要logback-classic时，由于logback-classic又依赖了logback-core和slf4j，所以必须把这3个jar包全部复制到项目工程下</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201120514644.png" alt="image-20221201120514644"></p><p>我们现在使用了maven，当项目中需要使用logback-classic时，只需要在pom.xml配置文件中，添加logback-classic的依赖坐标即可。</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201113659400.png" alt="image-20221201113659400"></p><p>在pom.xml文件中只添加了logback-classic依赖，但由于maven的依赖具有传递性，所以会自动把所依赖的其他jar包也一起导入。</p><p>依赖传递可以分为：</p><ol><li><p>直接依赖：在当前项目中通过依赖配置建立的依赖关系</p></li><li><p>间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源</p></li></ol><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616115445812.png" alt="image-20220616115445812"> </p><p>比如以上图中：</p><ul><li>projectA依赖了projectB。对于projectA 来说，projectB 就是直接依赖。</li><li>而projectB依赖了projectC及其他jar包。 那么此时，在projectA中也会将projectC的依赖传递下来。对于projectA 来说，projectC就是间接依赖。</li></ul><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201115801806.png" alt="image-20221201115801806"></p><h4 id="4-2-2-排除依赖"><a href="#4-2-2-排除依赖" class="headerlink" title="4.2.2 排除依赖"></a>4.2.2 排除依赖</h4><p>问题：之前我们讲了依赖具有传递性。那么A依赖B，B依赖C，如果A不想将C依赖进来，是否可以做到？ </p><p>答案：在maven项目中，我们可以通过排除依赖来实现。</p><p>什么是排除依赖？</p><ul><li>排除依赖：指主动断开依赖的资源。（被排除的资源无需指定版本）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-projectB<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!--排除依赖, 主动断开依赖的资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖排除示例：</p><ul><li>maven-projectA依赖了maven-projectB，maven-projectB依赖了Junit。基于依赖的传递性，所以maven-projectA也依赖了Junit</li></ul><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201141929240.png" alt="image-20221201141929240"></p><ul><li>使用排除依赖后</li></ul><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201142501556.png" alt="image-20221201142501556"></p><h3 id="4-3-依赖范围"><a href="#4-3-依赖范围" class="headerlink" title="4.3 依赖范围"></a>4.3 依赖范围</h3><p>在项目中导入依赖的jar包后，默认情况下，可以在任何地方使用。</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201135142706.png" alt="image-20221201135142706"></p><p>如果希望限制依赖的使用范围，可以通过<scope>标签设置其作用范围。</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616123806894.png" alt="image-20220616123806894"> </p><p>作用范围：</p><ol><li><p>主程序范围有效（main文件夹范围内）</p></li><li><p>测试程序范围有效（test文件夹范围内）</p></li><li><p>是否参与打包运行（package指令范围内）</p></li></ol><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201140140947.png" alt="image-20221201140140947"></p><p>如上图所示，给junit依赖通过scope标签指定依赖的作用范围。 那么这个依赖就只能作用在测试环境，其他环境下不能使用。</p><p>scope标签的取值范围：</p><table><thead><tr><th><strong>scope</strong>值</th><th><strong>主程序</strong></th><th><strong>测试程序</strong></th><th><strong>打包（运行）</strong></th><th><strong>范例</strong></th></tr></thead><tbody><tr><td>compile（默认）</td><td>Y</td><td>Y</td><td>Y</td><td>log4j</td></tr><tr><td>test</td><td>-</td><td>Y</td><td>-</td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td>runtime</td><td>-</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr></tbody></table><h3 id="4-4-生命周期"><a href="#4-4-生命周期" class="headerlink" title="4.4 生命周期"></a>4.4 生命周期</h3><h4 id="4-4-1-介绍"><a href="#4-4-1-介绍" class="headerlink" title="4.4.1 介绍"></a>4.4.1 介绍</h4><p>Maven的生命周期就是为了对所有的构建过程进行抽象和统一。 描述了一次项目构建，经历哪些阶段。</p><p>在Maven出现之前，项目构建的生命周期就已经存在，软件开发人员每天都在对项目进行清理，编译，测试及部署。虽然大家都在不停地做构建工作，但公司和公司间、项目和项目间，往往使用不同的方式做类似的工作。</p><p>Maven从大量项目和构建工具中学习和反思，然后总结了一套高度完美的，易扩展的项目构建生命周期。这个生命周期包含了项目的清理，初始化，编译，测试，打包，集成测试，验证，部署和站点生成等几乎所有构建步骤。</p><p>Maven对项目构建的生命周期划分为3套（相互独立）：</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616124015567.png"></p><ul><li><p>clean：清理工作。</p></li><li><p>default：核心工作。如：编译、测试、打包、安装、部署等。</p></li><li><p>site：生成报告、发布站点等。</p></li></ul><p>三套生命周期又包含哪些具体的阶段呢, 我们来看下面这幅图:</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20220616124348972.png" alt="image-20220616124348972"> </p><p>我们看到这三套生命周期，里面有很多很多的阶段，这么多生命周期阶段，其实我们常用的并不多，主要关注以下几个：</p><p>• clean：移除上一次构建生成的文件</p><p>• compile：编译项目源代码</p><p>• test：使用合适的单元测试框架运行测试(junit)</p><p>• package：将编译后的文件打包，如：jar、war等</p><p>• install：安装项目到本地仓库</p><p>Maven的生命周期是抽象的，这意味着生命周期本身不做任何实际工作。<strong>在Maven的设计中，实际任务（如源代码编译）都交由插件来完成。</strong></p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221130142100703.png" alt="image-20221130142100703"></p><p>IDEA工具为了方便程序员使用maven生命周期，在右侧的maven工具栏中，已给出快速访问通道</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201151340340.png" alt="image-20221201151340340"></p><p>生命周期的顺序是：clean –&gt; validate –&gt; compile –&gt; test –&gt; package –&gt; verify –&gt; install –&gt; site –&gt; deploy </p><p>我们需要关注的就是：clean –&gt;  compile –&gt; test –&gt; package  –&gt; install </p><blockquote><p>说明：在同一套生命周期中，我们在执行后面的生命周期时，前面的生命周期都会执行。</p></blockquote><blockquote><p> 思考：当运行package生命周期时，clean、compile生命周期会不会运行？</p><p> ​clean不会运行，compile会运行。  因为compile与package属于同一套生命周期，而clean与package不属于同一套生命周期。</p></blockquote><h4 id="4-4-2-执行"><a href="#4-4-2-执行" class="headerlink" title="4.4.2 执行"></a>4.4.2 执行</h4><p>在日常开发中，当我们要执行指定的生命周期时，有两种执行方式：</p><ol><li>在idea工具右侧的maven工具栏中，选择对应的生命周期，双击执行</li><li>在DOS命令行中，通过maven命令执行</li></ol><p><strong>方式一：在idea中执行生命周期</strong></p><ul><li>选择对应的生命周期，双击执行</li></ul><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201161957301.png" alt="image-20221201161957301"> </p><p>compile：</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201163711835.png" alt="image-20221201163711835"></p><p>test：</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201164627403.png" alt="image-20221201164627403"></p><p>package：</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201165801341.png" alt="image-20221201165801341"></p><p>install：</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201170830837.png" alt="image-20221201170830837"></p><p>clean：</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201171529382.png" alt="image-20221201171529382"></p><p><strong>方式二：在命令行中执行生命周期</strong></p><ol><li>进入到DOS命令行</li></ol><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201172210253.png" alt="image-20221201172210253"></p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221201172914648.png" alt="image-20221201172914648"> </p><h2 id="05-附录"><a href="#05-附录" class="headerlink" title="05. 附录"></a>05. 附录</h2><h3 id="5-1-更新依赖索引"><a href="#5-1-更新依赖索引" class="headerlink" title="5.1 更新依赖索引"></a>5.1 更新依赖索引</h3><p>有时候给idea配置完maven仓库信息后，在idea中依然搜索不到仓库中的jar包。这是因为仓库中的jar包索引尚未更新到idea中。这个时候我们就需要更新idea中maven的索引了，具体做法如下：</p><p> 打开设置—-搜索maven—-Repositories—-选中本地仓库—–点击Update</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/1537786634456-1582625518984.png" alt="1537786634456"></p><h3 id="5-2-清理maven仓库"><a href="#5-2-清理maven仓库" class="headerlink" title="5.2 清理maven仓库"></a>5.2 清理maven仓库</h3><p>初始情况下，我们的本地仓库是没有任何jar包的，此时会从私服去下载（如果没有配置，就直接从中央仓库去下载），可能由于网络的原因，jar包下载不完全，这些不完整的jar包都是以lastUpdated结尾。此时，maven不会再重新帮你下载，需要你删除这些以lastUpdated结尾的文件，然后maven才会再次自动下载这些jar包。</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/lastUpdated-1582625518983.png" alt="lastUpdate"></p><p>如果本地仓库中有很多这样的以lastUpadted结尾的文件，可以定义一个批处理文件，在其中编写如下脚本来删除： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set REPOSITORY_PATH=E:\develop\apache-maven-3.6.1\mvn_repo</span><br><span class="line">rem 正在搜索...</span><br><span class="line"></span><br><span class="line">del /s /q %REPOSITORY_PATH%\*.lastUpdated</span><br><span class="line"></span><br><span class="line">rem 搜索完毕</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>操作步骤如下：</p><p>1). 定义批处理文件del_lastUpdated.bat  (直接创建一个文本文件，命名为del_lastUpdated，后缀名直接改为bat即可 )</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221214154949482.png" alt="image-20221214154949482"> </p><p>2). 在上面的bat文件上<strong>右键—》编辑</strong> 。修改文件：</p><p><img src="/../images/Maven%E5%9F%BA%E7%A1%80/image-20221214154559817.png" alt="image-20221214154559817"> </p><p>修改完毕后，双击运行即可删除maven仓库中的残留文件。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Maven&quot;&gt;&lt;a href=&quot;#Maven&quot; class=&quot;headerlink&quot; title=&quot;Maven&quot;&gt;&lt;/a&gt;Maven&lt;/h1&gt;&lt;h2 id=&quot;课程内容&quot;&gt;&lt;a href=&quot;#课程内容&quot; class=&quot;headerlink&quot; title=&quot;课程内容&quot;&gt;&lt;/a&gt;课程内容&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;初识Maven&lt;/li&gt;
&lt;li&gt;Maven概述&lt;ul&gt;
&lt;li&gt;Maven模型介绍&lt;/li&gt;
&lt;li&gt;Maven仓库介绍&lt;/li&gt;
&lt;li&gt;Maven安装与配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IDEA集成Maven&lt;/li&gt;
&lt;li&gt;依赖管理&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Maven" scheme="https://ntostudy.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>tomcat-startup</title>
    <link href="https://ntostudy.github.io/2024/07/30/tomcat-startup/"/>
    <id>https://ntostudy.github.io/2024/07/30/tomcat-startup/</id>
    <published>2024-07-30T14:58:52.000Z</published>
    <updated>2024-07-30T15:02:35.911Z</updated>
    
    <content type="html"><![CDATA[<p>Tomcat服务器安装后，点击startup.bat 无法打开，就是闪一下，失败的原因有两个</p><span id="more"></span><p>(一) 环境变量有误<br>1.右键 此电脑 </p><p><img src="/../images/Tomcat-startup/1.png"></p><p>2.选择 高级系统设置</p><p><img src="/../images/Tomcat-startup/2.png"></p><p> 3.点击环境变量，配置JAVA_HOME</p><p><img src="/../images/Tomcat-startup/3.png"></p><p>然后一直点击确定，最后重新启动 startup.bat 就可以啦~~~</p><p>（二）端口被占用<br>解决方法：① 修改端口号：Tomcat根目录—&gt;cofn目录—&gt;server.xml—&gt;Connector标签—&gt;修改port属性为所需要的端口号。注意：端口号范围：165535,11023为知名端口，102449151为用户端口，4915265535为动态端口。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Tomcat服务器安装后，点击startup.bat 无法打开，就是闪一下，失败的原因有两个&lt;/p&gt;</summary>
    
    
    
    
    <category term="debug" scheme="https://ntostudy.github.io/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>BFS算法</title>
    <link href="https://ntostudy.github.io/2024/07/19/BFS%E7%AE%97%E6%B3%95/"/>
    <id>https://ntostudy.github.io/2024/07/19/BFS%E7%AE%97%E6%B3%95/</id>
    <published>2024-07-19T07:56:56.000Z</published>
    <updated>2024-07-19T08:01:11.816Z</updated>
    
    <content type="html"><![CDATA[<p>与迪杰斯特拉算法相似，弗洛伊德算法是一种计算最短路径的问题，与迪杰斯特拉算法不同的是，该算法可计算多源点带权图（可带负权值，但非负周期[1]）的最短路径的问题。</p><span id="more"></span><p><img src="/../images/BFS%E7%AE%97%E6%B3%95/1.png" alt="在这里插入图片描述"><br>以上图为例，介绍如何手写。</p><p>首先写出该图的邻接矩阵，记作矩阵 P (-1) ：<br><img src="/../images/BFS%E7%AE%97%E6%B3%95/2.png" alt="在这里插入图片描述"><br>接下来，我们保留V1行—V1列（即，将V1作为中转结点），同时保持对角线不变（自身到自身距离总是0），记作  P (V1)：<br><img src="/../images/BFS%E7%AE%97%E6%B3%95/3.png" alt="在这里插入图片描述"><br>逐步更新：方法如下：寻找对应保留列的数字之和，若和小于上表原位置的数字，则更新，否则不更新。[2]</p><p>以（V2，V3）为例：<br><img src="/../images/BFS%E7%AE%97%E6%B3%95/4.png" alt="在这里插入图片描述"><br>∞+50&#x3D;∞，大于上一个表中的25，保留25，不做更新。<img src="/../images/BFS%E7%AE%97%E6%B3%95/5.png" alt="在这里插入图片描述"><br>剩下的空缺均按照上述方法。得到的表如下：<img src="/../images/BFS%E7%AE%97%E6%B3%95/6.png" alt="在这里插入图片描述"><br>接下来保留V2行列，保留对角线，记作P(V2)  ：<br><img src="/../images/BFS%E7%AE%97%E6%B3%95/7.png" alt="在这里插入图片描述"><br>更新操作：和上面相同，以（V1，V3）为例：<br><img src="/../images/BFS%E7%AE%97%E6%B3%95/8.png" alt="在这里插入图片描述"><br>20+25&#x3D;45小于上图的50，故作更新<br><img src="/../images/BFS%E7%AE%97%E6%B3%95/9.png" alt="在这里插入图片描述"><br>重复此步骤，得到下表：<img src="/../images/BFS%E7%AE%97%E6%B3%95/10.png" alt="在这里插入图片描述"><br>接下来保留V3行列，记作  P(V3)：<br><img src="/../images/BFS%E7%AE%97%E6%B3%95/11.png" alt="在这里插入图片描述"><br>按照方法执行更新；得到下表<br><img src="/../images/BFS%E7%AE%97%E6%B3%95/12.png" alt="在这里插入图片描述"><br>继续绘制 P(V4)</p><p><img src="/../images/BFS%E7%AE%97%E6%B3%95/13.png" alt="继续绘制"><br> 更新：<br><img src="/../images/BFS%E7%AE%97%E6%B3%95/14.png" alt="在这里插入图片描述"><br>继续绘制P(V5) P(V6) P(V7)  ,最终得到下表：<br><img src="/../images/BFS%E7%AE%97%E6%B3%95/15.png" alt="在这里插入图片描述"><br>该矩阵即为任意两点间的最短距离矩阵。</p><h2 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">floyd</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=num;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> z[i][j]=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=num;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=num;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                z[i][j]=min(z[i][j],z[i][k]+z[k][j]); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><img src="/../images/BFS%E7%AE%97%E6%B3%95/16.png" alt="请添加图片描述"></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span><span class="comment">//保留小数位数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> <span class="comment">//c++</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span> <span class="comment">//sort排序</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span> <span class="comment">//字符串</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span> <span class="comment">//abs等函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span> <span class="comment">//map</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span><span class="comment">//set</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long <span class="comment">//不开longlong见祖宗</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span> <span class="comment">//处理多数据时省时间</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> z[<span class="number">1110</span>][<span class="number">1110</span>];</span><br><span class="line"><span class="type">int</span> people[<span class="number">1110</span>];</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">void</span> <span class="title function_">floyd</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= num; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= num; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                z[i][j] = min(z[i][k] + z[k][j],z[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="comment">//cin减少时间</span></span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>); <span class="comment">//cout减少时间</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">    <span class="comment">//初始化自己到自己的距离为0 其他的都为无穷大</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= num; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j) z[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> z[i][j] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        <span class="comment">//记录当前医院的人数为a</span></span><br><span class="line">        people[i] = a;</span><br><span class="line">        <span class="keyword">if</span> (b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//双向的权值都赋值为1</span></span><br><span class="line">            z[i][b] = <span class="number">1</span>;</span><br><span class="line">            z[b][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c)</span><br><span class="line">        &#123;</span><br><span class="line">            z[i][c] = <span class="number">1</span>;</span><br><span class="line">            z[c][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使得两点的距离最小</span></span><br><span class="line">    floyd();</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0x3f3f3f3f</span>;<span class="comment">//先定义答案为无穷大</span></span><br><span class="line">    <span class="comment">//外层for循环定义结点 内层for循坏找答案</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= num; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum = sum + people[j] * z[i][j];<span class="comment">//当前结点人数=j结点人数*ij之间的距离</span></span><br><span class="line">        &#125;</span><br><span class="line">        ans = min(ans, sum);<span class="comment">//找到最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; setw(5) &lt;&lt; setfill(&#x27;0&#x27;) &lt;&lt; a &lt;&lt; b;// 输出5位，右对齐，不足补0 。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;与迪杰斯特拉算法相似，弗洛伊德算法是一种计算最短路径的问题，与迪杰斯特拉算法不同的是，该算法可计算多源点带权图（可带负权值，但非负周期[1]）的最短路径的问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://ntostudy.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>尚品汇总结</title>
    <link href="https://ntostudy.github.io/2024/07/17/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/"/>
    <id>https://ntostudy.github.io/2024/07/17/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/</id>
    <published>2024-07-17T14:51:04.000Z</published>
    <updated>2024-07-17T15:05:15.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端Vue核心"><a href="#前端Vue核心" class="headerlink" title="前端Vue核心"></a>前端Vue核心</h1><p>开发一个前端模块可以概括为以下几个步骤：<br>（1）写静态页面、拆分为静态组件；<br>（2）发请求（API）；<br>（3）vuex（actions、mutations、state三连操作）；<br>（4）组件获取仓库数据，动态展示；</p><span id="more"></span><h1 id="1、vue文件目录分析"><a href="#1、vue文件目录分析" class="headerlink" title="1、vue文件目录分析"></a>1、vue文件目录分析</h1><p><strong>public文件夹</strong>：静态资源，webpack进行打包的时候会原封不动打包到dist文件夹中。</p><p><strong>pubilc&#x2F;index.html</strong>是一个模板文件，作用是生成项目的入口文件，webpack打包的js,css也会自动注入到该页面中。我们浏览器访问项目的时候就会默认打开生成好的index.html。</p><p><strong>src文件夹</strong>（程序员代码文件夹）</p><pre><code>assets： 存放公用的静态资源components： 非路由组件（全局组件），其他组件放在views或者pages文件夹中App.vue： 唯一的跟组件main.js： 程序入口文件，最先执行的文件</code></pre><p><strong>babel.config.js</strong>:  配置文件（babel相关）<br><strong>package.json</strong>: 项目的详细信息记录<br><strong>package-lock.json</strong>: 缓存性文件（各种包的来源）</p><h1 id="2、项目配置"><a href="#2、项目配置" class="headerlink" title="2、项目配置"></a>2、项目配置</h1><p>2.1 项目运行，浏览器自动打开</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package.<span class="property">json</span></span><br><span class="line">    <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;serve&quot;</span>: <span class="string">&quot;vue-cli-service serve --open&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lint&quot;</span>: <span class="string">&quot;vue-cli-service lint&quot;</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>2.2 关闭eslint校验工具（不关闭会有各种规范，不按照规范就会报错）   </p><ul><li>根目录下创建vue.config.js,进行配置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//关闭eslint</span></span><br><span class="line">  <span class="attr">lintOnSave</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>2.3 src文件夹配置别名,创建jsconfig.json，用@&#x2F;代替src&#x2F;，exclude表示不可以使用该别名的文件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">       <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">           <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">           <span class="string">&quot;@/*&quot;</span>: [</span><br><span class="line">               <span class="string">&quot;src/*&quot;</span></span><br><span class="line">           ]</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;exclude&quot;</span>: [</span><br><span class="line">       <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">       <span class="string">&quot;dist&quot;</span></span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="3、组件页面样式"><a href="#3、组件页面样式" class="headerlink" title="3、组件页面样式"></a>3、组件页面样式</h1><p>组件页面的样式使用的是less样式，浏览器不识别该样式，需要下载相关依赖<br><code>npm install --save less less-loader@5</code><br>如果想让组件识别less样式，则在组件中设置<br><code>&lt;script scoped lang=&quot;less&quot;&gt;</code></p><h1 id="4、清除vue页面默认的样式"><a href="#4、清除vue页面默认的样式" class="headerlink" title="4、清除vue页面默认的样式"></a>4、清除vue页面默认的样式</h1><p>vue是单页面开发，我们只需要修改public下的index.html文件</p><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;reset.css&quot;&gt;</code></p><h1 id="5、pages文件夹"><a href="#5、pages文件夹" class="headerlink" title="5、pages文件夹"></a>5、pages文件夹</h1><p>创建pages文件夹，并创建路由组件<br>5.1创建router文件夹，并创建index.js进行路由配置，最终在main.js中引入注册</p><p>5.2 总结<br>路由组件和非路由组件区别：</p><ul><li>非路由组件放在components中，路由组件放在pages或views中</li><li>非路由组件通过标签使用，路由组件通过路由使用</li><li>在main.js注册玩路由，所有的路由和非路由组件身上都会拥有$router $route属性</li><li>$router：一般进行编程式导航进行路由跳转</li><li>$route： 一般获取路由信息（name path params等）</li></ul><p>5.3 路由跳转方式   </p><ul><li>声明式导航router-link标签 <router-link to=“path”>,可以把router-link理解为一个a标签，它 也可以加class修饰</li><li>编程式导航 ：声明式导航能做的编程式都能做，而且还可以处理一些业务</li></ul><h1 id="6、footer组件显示与隐藏"><a href="#6、footer组件显示与隐藏" class="headerlink" title="6、footer组件显示与隐藏"></a>6、footer组件显示与隐藏</h1><ul><li>footer在登录注册页面是不存在的，所以要隐藏，v-if 或者 v-show</li><li>这里使用v-show，因为v-if会频繁的操作dom元素消耗性能，v-show只是通过样式将元素显示或隐藏</li><li>配置路由的时候，可以给路由配置元信息meta,</li><li>在路由的原信息中定义show属性，用来给v-show赋值，判断是否显示footer组件</li></ul><h1 id="7、路由传参"><a href="#7、路由传参" class="headerlink" title="7、路由传参"></a>7、路由传参</h1><p>7.1、query、params</p><ul><li>query、params两个属性可以传递参数<br>query参数：不属于路径当中的一部分，类似于get请求，地址栏表现为 &#x2F;search?k1&#x3D;v1&amp;k2&#x3D;v2<br>query参数对应的路由信息 <code>path: &quot;/search&quot;</code><br>params参数：属于路径当中的一部分，需要注意，在配置路由的时候，需要<strong>占位</strong> ,地址栏表现为 &#x2F;search&#x2F;v1&#x2F;v2<br>params参数对应的路由信息要修改为<code>path: &quot;/search/:keyword&quot;</code>  这里的&#x2F;:keyword就是一个params参数的占位符  </li><li>params传参问题<br>（1）、如何指定params参数可传可不传  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">如果路由path要求传递params参数,但是没有传递,会发现地址栏<span class="variable constant_">URL</span>有问题，详情如下：</span><br><span class="line"><span class="title class_">Search</span>路由项的path已经指定要传一个keyword的params参数，如下所示：</span><br><span class="line"><span class="attr">path</span>: <span class="string">&quot;/search/:keyword&quot;</span>,</span><br><span class="line">执行下面进行路由跳转的代码：</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;Search&quot;</span>,<span class="attr">query</span>:&#123;<span class="attr">keyword</span>:<span class="variable language_">this</span>.<span class="property">keyword</span>&#125;&#125;)</span><br><span class="line">当前跳转代码没有传递params参数</span><br><span class="line">地址栏信息：<span class="attr">http</span>:<span class="comment">//localhost:8080/#/?keyword=asd</span></span><br><span class="line">此时的地址信息少了/search</span><br><span class="line">正常的地址栏信息: <span class="attr">http</span>:<span class="comment">//localhost:8080/#/search?keyword=asd</span></span><br><span class="line">解决方法：可以通过改变path来指定params参数可传可不传 </span><br><span class="line"><span class="attr">path</span>: <span class="string">&quot;/search/:keyword?&quot;</span>,?表示该参数可传可不传</span><br></pre></td></tr></table></figure>参考连接：<a href="https://blog.csdn.net/weixin_44867717/article/details/109773945">https://blog.csdn.net/weixin_44867717/article/details/109773945</a><br>（2）、由（1）可知params可传可不传，但是如果传递的时空串，如何解决  。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;Search&quot;</span>,<span class="attr">query</span>:&#123;<span class="attr">keyword</span>:<span class="variable language_">this</span>.<span class="property">keyword</span>&#125;,<span class="attr">params</span>:&#123;<span class="attr">keyword</span>:<span class="string">&#x27;&#x27;</span>&#125;&#125;)</span><br><span class="line">出现的问题和<span class="number">1</span>中的问题相同,地址信息少了/search</span><br><span class="line">解决方法： 加入||<span class="literal">undefined</span>，当我们传递的参数为空串时地址栏url也可以保持正常</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;Search&quot;</span>,<span class="attr">query</span>:&#123;<span class="attr">keyword</span>:<span class="variable language_">this</span>.<span class="property">keyword</span>&#125;,<span class="attr">params</span>:&#123;<span class="attr">keyword</span>:<span class="string">&#x27;&#x27;</span>||<span class="literal">undefined</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>（3）路由组件能不能传递props数据？<br>可以，但是只能传递params参数,具体知识为props属性  。<br>7.2、传参方法</li><li>字符串形式<br>this.$router.push(“&#x2F;search&#x2F;“+this.params传参+”?k&#x3D;”+this.query传参)</li><li>模板字符串<br>this.$router.push(“&#x2F;search&#x2F;+${this.params传参}?k&#x3D;${this.query传参}”)<br><strong>注意</strong>： 上面字符串的传参方法可以看出params参数和’&#x2F;‘结合，query参数和？结合<br><code>http://localhost:8080/#/search/asd?keyword=asd</code><br>上面url中asd为params的值，keyword&#x3D;asd为query传递的值。</li><li>对象（常用）<br>this.$router.push({name:”路由名字”,params:{传参},query:{传参})。<br>以对象方式传参时，如果我们传参中使用了params，只能使用name，不能使用path，如果只是使用query传参，可以使用path  。</li></ul><h1 id="8、多次执行相同的push问题"><a href="#8、多次执行相同的push问题" class="headerlink" title="8、多次执行相同的push问题"></a>8、多次执行相同的push问题</h1><p>多次执行相同的push问题，控制台会出现警告<br>例如：使用this.$router.push({name:’Search’,params:{keyword:”..”||undefined}})时，如果多次执行相同的push，控制台会出现警告。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;Search&quot;</span>,<span class="attr">query</span>:&#123;<span class="attr">keyword</span>:<span class="variable language_">this</span>.<span class="property">keyword</span>&#125;&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><p>执行一次上面代码：<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/1.png" alt="在这里插入图片描述"><br>多次执行出现警告：<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/2.png" alt="在这里插入图片描述"><br>原因：push是一个promise，promise需要传递成功和失败两个参数，我们的push中没有传递。<br>方法：this.$router.push({name:’Search’,params:{keyword:”..”||undefined}},()&#x3D;&gt;{},()&#x3D;&gt;{})后面两项分别代表执行成功和失败的回调函数。<br><strong>这种写法治标不治本，将来在别的组件中push|replace,编程式导航还是会有类似错误</strong><br>push是VueRouter.prototype的一个方法，在router中的index重写该方法即可(看不懂也没关系，这是前端面试题)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、先把VueRouter原型对象的push，保存一份</span></span><br><span class="line"><span class="keyword">let</span> originPush = <span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>;</span><br><span class="line"><span class="comment">//2、重写push|replace</span></span><br><span class="line"><span class="comment">//第一个参数：告诉原来的push，跳转的目标位置和传递了哪些参数</span></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> (<span class="params">location,resolve,reject</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(resolve &amp;&amp; reject)&#123;</span><br><span class="line">        originPush.<span class="title function_">call</span>(<span class="variable language_">this</span>,location,resolve,reject)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        originPush.<span class="title function_">call</span>(<span class="variable language_">this</span>,location,<span class="function">() =&gt;</span> &#123;&#125;,<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9、定义全局组件"><a href="#9、定义全局组件" class="headerlink" title="9、定义全局组件"></a>9、定义全局组件</h1><p>我们的三级联动组件是全局组件，全局的配置都需要在main.js中配置  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将三级联动组件注册为全局组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TypeNav</span> <span class="keyword">from</span> <span class="string">&#x27;@/pages/Home/TypeNav&#x27;</span>;</span><br><span class="line"><span class="comment">//第一个参数：全局组件名字，第二个参数：全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="title class_">TypeNav</span>.<span class="property">name</span>,<span class="title class_">TypeNav</span>);</span><br></pre></td></tr></table></figure><p>在Home组件中使用该全局组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--  三级联动全局组件已经注册为全局组件，因此不需要引入--&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">TypeNav</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>全局组件可以在任一页面中直接使用，不需要导入声明<br>下面全部商品分类就是三级联动组件<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/3.png" alt="在这里插入图片描述"></p><h1 id="10、代码改变时实现页面自动刷新"><a href="#10、代码改变时实现页面自动刷新" class="headerlink" title="10、代码改变时实现页面自动刷新"></a>10、代码改变时实现页面自动刷新</h1><p>根目录下vue.config.js文件设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//关闭eslint</span></span><br><span class="line">    <span class="attr">lintOnSave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="comment">// true 则热更新，false 则手动刷新，默认值为 true</span></span><br><span class="line">        <span class="attr">inline</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// development server port 8000</span></span><br><span class="line">        <span class="attr">port</span>: <span class="number">8001</span>,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：修改完该配置文件后，要重启一下项目</p><h1 id="11、Home首页其它组件"><a href="#11、Home首页其它组件" class="headerlink" title="11、Home首页其它组件"></a>11、Home首页其它组件</h1><p>home文件夹index.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--  三级联动全局组件已经注册为全局组件，因此不需要引入--&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">TypeNav</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--  轮播图列表--&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ListContainer</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--  今日推荐--&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Recommend</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--  商品排行--&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Rank</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--  猜你喜欢--&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Like</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 楼层 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Floor</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Floor</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--  商标--&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Brand</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">ListContainer</span> <span class="keyword">from</span> <span class="string">&#x27;./ListContainer&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Recommend</span> <span class="keyword">from</span> <span class="string">&#x27;./Recommend&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Rank</span> <span class="keyword">from</span> <span class="string">&#x27;./Rank&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Like</span> <span class="keyword">from</span> <span class="string">&#x27;./Like&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Floor</span> <span class="keyword">from</span> <span class="string">&#x27;./Floor&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Brand</span> <span class="keyword">from</span> <span class="string">&#x27;./Brand&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;index&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">ListContainer</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Recommend</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Rank</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Like</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Floor</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Brand</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="12、封装axios"><a href="#12、封装axios" class="headerlink" title="12、封装axios"></a>12、封装axios</h1><p>axios中文文档，包含详细信息。<br><a href="https://www.kancloud.cn/yunye/axios/234845">https://www.kancloud.cn/yunye/axios/234845</a><br>在根目录下创建api文件夹，创建request.js文件。<br>内容如下，当前文件代码还比较少，后续有需求可以增添内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="comment">//1、对axios二次封装</span></span><br><span class="line"><span class="keyword">const</span> requests = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">//基础路径，requests发出的请求在端口号后面会跟改baseURl</span></span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//2、配置请求拦截器</span></span><br><span class="line">requests.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//config内主要是对请求头Header配置</span></span><br><span class="line">    <span class="comment">//比如添加token</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//3、配置相应拦截器</span></span><br><span class="line">requests.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//成功的回调函数</span></span><br><span class="line">    <span class="keyword">return</span>  res.<span class="property">data</span>;</span><br><span class="line">&#125;,<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//失败的回调函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应失败&quot;</span>+error)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;fail&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//4、对外暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> requests;</span><br></pre></td></tr></table></figure><h1 id="13、前端通过代理解决跨域问题"><a href="#13、前端通过代理解决跨域问题" class="headerlink" title="13、前端通过代理解决跨域问题"></a>13、前端通过代理解决跨域问题</h1><p>在根目录下的vue.config.js中配置,proxy为通过代理解决跨域问题。<br>我们在封装axios的时候已经设置了baseURL为api,所以所有的请求都会携带&#x2F;api，这里我们就将&#x2F;api进行了转换。如果你的项目没有封装axios，或者没有配置baseURL，建议进行配置。要保证baseURL和这里的代理映射相同，此处都为’&#x2F;api’。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//关闭eslint</span></span><br><span class="line">    <span class="attr">lintOnSave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="comment">// true 则热更新，false 则手动刷新，默认值为 true</span></span><br><span class="line">        <span class="attr">inline</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// development server port 8000</span></span><br><span class="line">        <span class="attr">port</span>: <span class="number">8001</span>,</span><br><span class="line">        <span class="comment">//代理服务器解决跨域</span></span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="comment">//会把请求路径中的/api换为后面的代理服务器</span></span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">                <span class="comment">//提供数据的服务器地址</span></span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://39.98.123.211&#x27;</span>,</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://webpack.docschina.org/configuration/dev-server/#devserverproxy">webpack官网相关知识解读</a><br>网站中的webpack.config.js就是vue.config.js文件。</p><h1 id="14、请求接口统一封装"><a href="#14、请求接口统一封装" class="headerlink" title="14、请求接口统一封装"></a>14、请求接口统一封装</h1><p>在文件夹api中创建index.js文件，用于封装所有请求<br><strong>将每个请求封装为一个函数，并暴露出去，组件只需要调用相应函数即可，这样当我们的接口比较多时，如果需要修改只需要修改该文件即可。</strong></p><p>如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前模块，API进行统一管理，即对请求接口统一管理</span></span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">from</span> <span class="string">&quot;@/api/request&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//首页三级分类接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqCateGoryList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="title function_">requests</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/product/getBaseCategoryList&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当组件想要使用相关请求时，只需要导入相关函数即可，以上图的reqCateGoryList 为例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reqCateGoryList&#125; <span class="keyword">from</span> <span class="string">&#x27;./api&#x27;</span></span><br><span class="line"><span class="comment">//发起请求</span></span><br><span class="line"><span class="title function_">reqCateGoryList</span>();</span><br></pre></td></tr></table></figure><h1 id="15、nprogress进度条插件"><a href="#15、nprogress进度条插件" class="headerlink" title="15、nprogress进度条插件"></a>15、nprogress进度条插件</h1><p>打开一个页面时，往往会伴随一些请求，并且会在页面上方出现进度条。它的原理时，在我们发起请求的时候开启进度条，在请求成功后关闭进度条，所以只需要在request.js中进行配置。<br>如下图所示，我们页面加载时发起了一个请求，此时页面上方出现蓝色进度条<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/4.png" alt="在这里插入图片描述"><br>对应的request.js设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="comment">//引入进度条</span></span><br><span class="line"><span class="keyword">import</span> nprogress <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span>;</span><br><span class="line"><span class="comment">//引入进度条样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;nprogress/nprogress.css&quot;</span>;</span><br><span class="line"><span class="comment">//1、对axios二次封装</span></span><br><span class="line"><span class="keyword">const</span> requests = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">//基础路径，requests发出的请求在端口号后面会跟改baseURl</span></span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//2、配置请求拦截器</span></span><br><span class="line">requests.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//config内主要是对请求头Header配置</span></span><br><span class="line">    <span class="comment">//比如添加token</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启进度条</span></span><br><span class="line">    nprogress.<span class="title function_">start</span>();</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//3、配置相应拦截器</span></span><br><span class="line">requests.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//成功的回调函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//响应成功，关闭进度条</span></span><br><span class="line">    nprogress.<span class="title function_">done</span>()</span><br><span class="line">    <span class="keyword">return</span>  res.<span class="property">data</span>;</span><br><span class="line">&#125;,<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//失败的回调函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应失败&quot;</span>+error)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;fail&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//4、对外暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> requests;</span><br></pre></td></tr></table></figure><p>可以通过修改nprogress.css文件的background来修改进度条颜色。<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/5.png" alt="在这里插入图片描述"></p><h1 id="16、手动引入vuex"><a href="#16、手动引入vuex" class="headerlink" title="16、手动引入vuex"></a>16、手动引入vuex</h1><p>首先确保安装了vuex,根目录创建store文件夹，文件夹下创建index.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对外暴露store的一个实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;&#125;,</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果想要使用vuex，还要再main.js中引入<br>main.js:<br>(1) 引入文件<br>(2) 注册store<br><strong>但凡是在main.js中的Vue实例中注册的实体，在所有的组件中都会有（this.$.实体名）属性</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="comment">//注册路由，此时组件中都会拥有$router $route属性</span></span><br><span class="line">  router,</span><br><span class="line">  <span class="comment">//注册store,此时组件中都会拥有$store</span></span><br><span class="line">  store</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="17、async-await使用"><a href="#17、async-await使用" class="headerlink" title="17、async await使用"></a>17、async await使用</h1><p>如果我们没有封装请求api，而是直接调用axios，就不需要使用async await。<br>案例：我们将一个axios请求封装为了函数，我们在下面代码中调用了该函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reqCateGoryList&#125; <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">categoryList</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> result =  <span class="title function_">reqCateGoryList</span>()</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器结果<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/6.png" alt="在这里插入图片描述"><br>返回了一个promise,证明这是一个promise请求，但是我们想要的是图片中的data数据。<br>没有将函数封装前我们都会通过then()回调函数拿到服务器返回的数据，现在我们将其封装了，依然可以使用then获取数据，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">categoryList</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> result =  <span class="title function_">reqCateGoryList</span>().<span class="title function_">then</span>(</span><br><span class="line">                <span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res&quot;</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result&quot;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/7.png" alt="在这里插入图片描述"><br>由于我们的promis是异步请求，我们发现请求需要花费时间，但是它是异步的，所有后面的console.log(“result”)；console.log(result)会先执行，等我们的请求得到响应后，才执行console.log(“res”)；console.log(res)，这也符合异步的原则，但是我们如果在请求下面啊执行的是将那个请求的结果赋值给某个变量，这样就会导致被赋值的变量先执行，并且赋值为undefine，因为此时promise还没有完成。<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/8.png" alt="在这里插入图片描述"><br>所以我们引入了async await,async写在函数名前，await卸载api函数前面。await含义是<strong>async标识的函数体内的并且在await标识代码后面的代码</strong>先等待await标识的异步请求执行完，再执行。这也使得只有reqCateGoryList执行完，result 得到返回值后，才会执行后面的输出操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">categoryList</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">reqCateGoryList</span>()</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result&quot;</span>)</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>结果<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/9.png" alt="在这里插入图片描述"></p><h1 id="18、vuex（-）"><a href="#18、vuex（-）" class="headerlink" title="18、vuex（*****）"></a>18、vuex（*****）</h1><p>state、actions、mutations、getters的辅助函数使用，当多次访问store中的上述属性时，要使用个属性的辅助函数，可以减少代码量。<br>**在使用上面的函数时，如果需要传递多个参数，需要把多个参数组合为一个对象传入(vuex是不允许多个参数分开传递的)**。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">addOrUpdateShopCart</span>(<span class="params">&#123;commit&#125;,&#123;skuId,skuNum&#125;</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">reqAddOrUpdateShopCart</span>(skuId,skuNum)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">        <span class="keyword">if</span>(result.<span class="property">data</span> ===  <span class="number">200</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><a href="https://vuex.vuejs.org/zh/guide/state.html#%E5%9C%A8-vue-%E7%BB%84%E4%BB%B6%E4%B8%AD%E8%8E%B7%E5%BE%97-vuex-%E7%8A%B6%E6%80%81">辅助函数官网链接</a><br><strong>注意</strong>：**使用action时，函数的第一个参数，必须是{commit}**，即使不涉及到mutations操作，也必须加上该参数，否则会报错。</p><h1 id="19、loadsh插件防抖和节流"><a href="#19、loadsh插件防抖和节流" class="headerlink" title="19、loadsh插件防抖和节流"></a>19、loadsh插件防抖和节流</h1><p>在进行窗口的resize、scroll，输入框内容校验等操作时，如果事件处理函数调用的频率无限制，会加重浏览器的负担，导致用户体验非常糟糕。此时我们可以采用debounce（防抖）和throttle（节流）的方式来减少调用频率，同时又不影响实际效果。<br>安装lodash插件，该插件提供了防抖和节流的函数，我们可以引入js文件，直接调用。当然也可以自己写防抖和节流的函数<br><a href="https://www.lodashjs.com/">lodash官网</a><br><a href="https://www.lodashjs.com/docs/lodash.debounce">防抖函数</a><br><a href="https://www.lodashjs.com/docs/lodash.throttle">节流函数</a><br>防抖：用户操作很频繁，但是只执行一次，减少业务负担。<br>节流：用户操作很频繁，但是把频繁的操作变为少量的操作，使浏览器有充分时间解析代码<br><a href="https://www.jianshu.com/p/c8b86b09daf0">防抖和节流简述</a><br>例如：下面代码就是将changeIndex设置了节流，如果操作很频繁，限制50ms执行一次。这里函数定义采用的键值对形式。throttle的返回值就是一个函数，所以直接键值对赋值就可以，函数的参数在function中传入即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;throttle&#125; <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">//鼠标进入修改响应元素的背景颜色</span></span><br><span class="line">    <span class="comment">//采用键值对形式创建函数，将changeIndex定义为节流函数，该函数触发很频繁时，设置50ms才会执行一次</span></span><br><span class="line">    <span class="attr">changeIndex</span>: <span class="title function_">throttle</span>(<span class="keyword">function</span> (<span class="params">index</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentIndex</span> = index</span><br><span class="line">    &#125;,<span class="number">50</span>),</span><br><span class="line">    <span class="comment">//鼠标移除触发时间</span></span><br><span class="line">    <span class="title function_">leaveIndex</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentIndex</span> = -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="20、编程式导航-事件委托实现路由跳转"><a href="#20、编程式导航-事件委托实现路由跳转" class="headerlink" title="20、编程式导航+事件委托实现路由跳转"></a>20、编程式导航+事件委托实现路由跳转</h1><p><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/10.png"><br>如上图所示，三级标签列表有很多，每一个标签都是一个页面链接，我们要实现通过点击表现进行路由跳转。<br>路由跳转的两种方法：导航式路由，编程式路由。</p><blockquote><pre><code>对于导航式路由，我们有多少个a标签就会生成多少个router-link标签，这样当我们频繁操作时会出现卡顿现象。    对于编程式路由，我们是通过触发点击事件实现路由跳转。同理有多少个a标签就会有多少个触发函数。虽然不会出现卡顿，但是也会影响性能。</code></pre></blockquote><p>上面两种方法无论采用哪一种，都会影响性能。我们提出一种：编程时导航+事件委派 的方式实现路由跳转。事件委派即把子节点的触发事件都委托给父节点。这样只需要一个回调函数goSearch就可以解决。<br><strong>事件委派问题：</strong><br>（1）如何确定我们点击的一定是a标签呢？如何保证我们只能通过点击a标签才跳转呢？<br>（2）如何获取子节点标签的商品名称和商品id(<strong>我们是通过商品名称和商品id进行页面跳转的</strong>)</p><p><strong>解决方法：</strong><br>对于问题1：为三个等级的a标签添加自定义属性date-categoryName绑定商品标签名称来标识a标签（其余的标签是没有该属性的）。</p><p>对于问题2：为三个等级的a标签再添加自定义属性data-category1Id、data-category2Id、data-category3Id来获取三个等级a标签的商品id，用于路由跳转。<br>我们可以通过在函数中传入event参数，获取当前的点击事件，通过event.target属性获取当前点击节点，再通过dataset属性获取节点的属性信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div <span class="keyword">class</span>=<span class="string">&quot;all-sort-list2&quot;</span> @click=<span class="string">&quot;goSearch&quot;</span> @mouseleave=<span class="string">&quot;leaveIndex&quot;</span>&gt;</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>  <span class="attr">v-for</span>=<span class="string">&quot;(c1,index) in categoryList&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;index!==16&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;c1.categoryId&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;cur:currentIndex===index&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h3</span> @<span class="attr">mouseenter</span>=<span class="string">&quot;changeIndex(index)&quot;</span>  &gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">:data-categoryName</span>=<span class="string">&quot;c1.categoryName&quot;</span> <span class="attr">:data-category1Id</span>=<span class="string">&quot;c1.categoryId&quot;</span> &gt;</span>&#123;&#123;c1.categoryName&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-list clearfix&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;display:currentIndex===index?&#x27;block&#x27;:&#x27;none&#x27;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;subitem&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(c2,index) in c1.categoryChild&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;c2.categoryId&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;fore&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:data-categoryName</span>=<span class="string">&quot;c2.categoryName&quot;</span> <span class="attr">:data-category2Id</span>=<span class="string">&quot;c2.categoryId&quot;</span>&gt;</span>&#123;&#123;c2.categoryName&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">em</span> <span class="attr">v-for</span>=<span class="string">&quot;(c3,index) in c2.categoryChild&quot;</span>  <span class="attr">:key</span>=<span class="string">&quot;c3.categoryId&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">a</span> <span class="attr">:data-categoryName</span>=<span class="string">&quot;c2.categoryName&quot;</span> <span class="attr">:data-category3Id</span>=<span class="string">&quot;c3.categoryId&quot;</span>&gt;</span>&#123;&#123;c3.categoryName&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dl</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：event是系统属性，所以我们只需要在函数定义的时候作为参数传入，在函数使用的时候不需要传入该参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数使用</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;all-sort-list2&quot;</span> @click=<span class="string">&quot;goSearch&quot;</span> @mouseleave=<span class="string">&quot;leaveIndex&quot;</span>&gt;</span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="title function_">goSearch</span>(<span class="params">event</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/11.png" alt="在这里插入图片描述"><br>对应的goSearrch函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">goSearch</span>(<span class="params">event</span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> element = event.<span class="property">target</span></span><br><span class="line">      <span class="comment">//html中会把大写转为小写</span></span><br><span class="line">      <span class="comment">//获取目前鼠标点击标签的categoryname,category1id,category2id,category3id，</span></span><br><span class="line">      <span class="comment">// 通过四个属性是否存在来判断是否为a标签，以及属于哪一个等级的a标签</span></span><br><span class="line">      <span class="keyword">let</span> &#123;categoryname,category1id,category2id,category3id&#125; = element.<span class="property">dataset</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//categoryname存在，表示为a标签</span></span><br><span class="line">      <span class="keyword">if</span>(categoryname)&#123;</span><br><span class="line">        <span class="comment">//category1id一级a标签</span></span><br><span class="line">        <span class="comment">//整理路由跳转的参数</span></span><br><span class="line">        <span class="keyword">let</span> location = &#123;<span class="attr">name</span>:<span class="string">&#x27;Search&#x27;</span>&#125;<span class="comment">//跳转路由name</span></span><br><span class="line">        <span class="keyword">let</span> query = &#123;<span class="attr">categoryName</span>:categoryname&#125;<span class="comment">//路由参数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(category1id)&#123;</span><br><span class="line">          query.<span class="property">category1Id</span> = category1id</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(category2id)&#123;</span><br><span class="line">        <span class="comment">//category2id二级a标签</span></span><br><span class="line">          query.<span class="property">category2Id</span> = category2id</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(category3id)&#123;</span><br><span class="line">        <span class="comment">//category3id三级a标签</span></span><br><span class="line">          query.<span class="property">category3Id</span> = category3id</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//整理完参数</span></span><br><span class="line">        location.<span class="property">query</span> = query</span><br><span class="line">        <span class="comment">//路由跳转</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(location)</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h1 id="21、Vue路由销毁问题"><a href="#21、Vue路由销毁问题" class="headerlink" title="21、Vue路由销毁问题"></a>21、Vue路由销毁问题</h1><p><strong>Vue在路由切换的时候会销毁旧路由</strong>。<br>我们在三级列表全局组件TypeNav中的mounted进行了请求一次商品分类列表数据。<br>由于<strong>Vue在路由切换的时候会销毁旧路由</strong>，当我们再次使用三级列表全局组件时还会发一次请求。<br>如下图所示：当我们在包含三级列表全局组件的不同组件之间进行切换时，都会进行一次信息请求。<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/12.png" alt="在这里插入图片描述"><br>由于信息都是一样的，出于性能的考虑我们希望该数据只请求一次，所以我们把这次请求放在App.vue的mounted中。（根组件App.vue的mounted只会执行一次）<br><strong>注意</strong>：虽然main.js也是只执行一次，但是不可以放在main.js中。因为只有组件的身上才会有$store属性。</p><h1 id="22、mock插件使用"><a href="#22、mock插件使用" class="headerlink" title="22、mock插件使用"></a>22、mock插件使用</h1><p>mock用来拦截前端ajax请求，返回我么们自定义的数据用于测试前端接口。<br>将不同的数据类型封装为不同的json文件，创建mockServer.js文件<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/13.png" alt="在这里插入图片描述"><br>banner、floor分别为轮播图和页面底部的假数据。<br>mockServer.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Mock</span>  <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span></span><br><span class="line"><span class="comment">//webpack默认对外暴露：json、图片</span></span><br><span class="line"><span class="keyword">import</span> banner <span class="keyword">from</span> <span class="string">&#x27;./banner.json&#x27;</span></span><br><span class="line"><span class="keyword">import</span> floor <span class="keyword">from</span> <span class="string">&#x27;./floor.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mock数据：第一个参数请求地址、第二个参：请求数据</span></span><br><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&quot;/mock/banner&quot;</span>,&#123;<span class="attr">code</span>:<span class="number">200</span>,<span class="attr">data</span>:banner&#125;)</span><br><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&quot;/mock/floor&quot;</span>,&#123;<span class="attr">code</span>:<span class="number">200</span>,<span class="attr">data</span>:floor&#125;)</span><br><span class="line"><span class="comment">//记得要在main.js中引入一下</span></span><br><span class="line"><span class="comment">//import &#x27;&#x27;@/mock/mockServer</span></span><br></pre></td></tr></table></figure><h1 id="23、vuex数据存储与使用"><a href="#23、vuex数据存储与使用" class="headerlink" title="23、vuex数据存储与使用"></a>23、vuex数据存储与使用</h1><p>我们会把公共的数据放在store中，然后使用时再去store中取。<br>以我们的首页轮播图数据为例。<br>1、在轮播图组件ListContainer.vue组件加载完毕后发起轮播图数据请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;getBannerList&quot;</span>)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>2、请求实际是在store中的actions中完成的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="comment">//获取首页轮播图数据</span></span><br><span class="line">        <span class="keyword">async</span> <span class="title function_">getBannerList</span>(<span class="params">&#123;commit&#125;</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">reqGetBannerList</span>()</span><br><span class="line">            <span class="keyword">if</span>(result.<span class="property">code</span> ===  <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">commit</span>(<span class="string">&quot;BANNERLIST&quot;</span>,result.<span class="property">data</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3、获取到数据后存入store仓库，在mutations完成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/唯一修改state的部分</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">BANNERLIST</span>(<span class="params">state,bannerList</span>)&#123;</span><br><span class="line">            state.<span class="property">bannerList</span> = bannerList</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>4、轮播图组件ListContainer.vue组件在store中获取轮播图数据。由于在这个数据是通过异步请求获得的，所以我们要通过计算属性computed获取轮播图数据。<br>ListContainer.vue代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;index&quot;</span>,</span><br><span class="line">  <span class="comment">//主键挂载完毕，请求轮播图图片</span></span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;getBannerList&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">    ...<span class="title function_">mapState</span>(&#123;</span><br><span class="line">      <span class="attr">bannerList</span>: (<span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">home</span>.<span class="property">bannerList</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：只要是公共数据都会放在store中，之后的实现步骤就是上面的固定步骤。</p><h1 id="24、swiper插件实现轮播图"><a href="#24、swiper插件实现轮播图" class="headerlink" title="24、swiper插件实现轮播图"></a>24、swiper插件实现轮播图</h1><p><a href="https://www.swiper.com.cn/usage/index.html">swiper官网</a><br>官网中给出了代码实例：<br>做一个简要总结：（代码可以直接复制本小节最后面的代码）</p><blockquote><p>（1）安装swiper<br> （2）在需要使用轮播图的组件内导入swpier和它的css样式<br> （3）在组件中创建swiper需要的dom标签（html代码，参考官网代码）<br> （4）创建swiper实例</p></blockquote><p><strong>注意</strong>：在创建swiper对象时，我们会传递一个参数用于获取展示轮播图的DOM元素，官网直接通过class（<strong>而且这个class不能修改，是swiper的css文件自带的</strong>）获取。但是这样有缺点：当页面中有多个轮播图时，因为它们使用了相同的class修饰的DOM，就会出现所有的swiper使用同样的数据，这肯定不是我们希望看到的。<br>解决方法：在轮播图最外层DOM中添加ref属性<br><code>&lt;div class=&quot;swiper-container&quot; id=&quot;mySwiper&quot; ref=&quot;cur&quot;&gt;</code><br>通过ref属性值获取DOM<br><code>let mySwiper = new Swiper(this.$refs.cur,&#123;...&#125;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!--banner轮播--&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mySwiper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cur&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(carouse,index) in bannerList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;carouse.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;carouse.imgUrl&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="comment">&lt;!-- 如果需要分页器 --&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="comment">&lt;!-- 如果需要导航按钮 --&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-prev&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//引入Swiper</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Swiper</span> <span class="keyword">from</span> <span class="string">&#x27;swiper&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//引入Swiper样式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="string">&#x27;swiper/css/swiper.css&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>接下来要考虑的是什么时候去加载这个swiper，我们第一时间想到的是在mounted中创建这个实例。<br>但是会出现无法加载轮播图片的问题。<br>原因：</p><blockquote><p>我们在mounted中先去异步请求了轮播图数据，然后又创建的swiper实例。由于请求数据是异步的，所以浏览器不会等待该请求执行完再去创建swiper，而是先创建了swiper实例，但是此时我们的轮播图数据还没有获得，就导致了轮播图展示失败。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//请求数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;getBannerList&quot;</span>)</span><br><span class="line">    <span class="comment">//创建swiper实例</span></span><br><span class="line">    <span class="keyword">let</span> mySwiper = <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;swiper-container&quot;</span>),&#123;</span><br><span class="line">        <span class="attr">pagination</span>:&#123;</span><br><span class="line">          <span class="attr">el</span>: <span class="string">&#x27;.swiper-pagination&#x27;</span>,</span><br><span class="line">          <span class="attr">clickable</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 如果需要前进后退按钮</span></span><br><span class="line">        <span class="attr">navigation</span>: &#123;</span><br><span class="line">          <span class="attr">nextEl</span>: <span class="string">&#x27;.swiper-button-next&#x27;</span>,</span><br><span class="line">          <span class="attr">prevEl</span>: <span class="string">&#x27;.swiper-button-prev&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 如果需要滚动条</span></span><br><span class="line">        <span class="attr">scrollbar</span>: &#123;</span><br><span class="line">          <span class="attr">el</span>: <span class="string">&#x27;.swiper-scrollbar&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>解决方法一：等我们的数据请求完毕后再创建swiper实例。只需要加一个1000ms时间延迟再创建swiper实例.。将上面代码改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;getBannerList&quot;</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> mySwiper = <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;swiper-container&quot;</span>),&#123;</span><br><span class="line">        <span class="attr">pagination</span>:&#123;</span><br><span class="line">          <span class="attr">el</span>: <span class="string">&#x27;.swiper-pagination&#x27;</span>,</span><br><span class="line">          <span class="attr">clickable</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 如果需要前进后退按钮</span></span><br><span class="line">        <span class="attr">navigation</span>: &#123;</span><br><span class="line">          <span class="attr">nextEl</span>: <span class="string">&#x27;.swiper-button-next&#x27;</span>,</span><br><span class="line">          <span class="attr">prevEl</span>: <span class="string">&#x27;.swiper-button-prev&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 如果需要滚动条</span></span><br><span class="line">        <span class="attr">scrollbar</span>: &#123;</span><br><span class="line">          <span class="attr">el</span>: <span class="string">&#x27;.swiper-scrollbar&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>方法一肯定不是最好的，但是我们开发的第一要义就是实现功能，之后再完善。</p><p>解决方法二：我们可以使用watch监听bannerList轮播图列表属性，因为bannerList初始值为空，当它有数据时，我们就可以创建swiper对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">    <span class="title function_">bannerList</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> mySwiper = <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">cur</span>,&#123;</span><br><span class="line">          <span class="attr">pagination</span>:&#123;</span><br><span class="line">            <span class="attr">el</span>: <span class="string">&#x27;.swiper-pagination&#x27;</span>,</span><br><span class="line">            <span class="attr">clickable</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// 如果需要前进后退按钮</span></span><br><span class="line">          <span class="attr">navigation</span>: &#123;</span><br><span class="line">            <span class="attr">nextEl</span>: <span class="string">&#x27;.swiper-button-next&#x27;</span>,</span><br><span class="line">            <span class="attr">prevEl</span>: <span class="string">&#x27;.swiper-button-prev&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// 如果需要滚动条</span></span><br><span class="line">          <span class="attr">scrollbar</span>: &#123;</span><br><span class="line">            <span class="attr">el</span>: <span class="string">&#x27;.swiper-scrollbar&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>即使这样也还是无法实现轮播图，原因是，我们轮播图的html中有v-for的循环，我们是通过v-for遍历bannerList中的图片数据，然后展示。我们的watch只能保证在bannerList变化时创建swiper对象，但是并不能保证此时v-for已经执行完了。假如watch先监听到bannerList数据变化，执行回调函数创建了swiper对象，之后v-for才执行，这样也是无法渲染轮播图图片（<strong>因为swiper对象生效的前提是html即dom结构已经渲染好了</strong>）。</p><p><strong>完美解决方案</strong>：使用watch+<a href="https://cn.vuejs.org/v2/api/#vm-nextTick">this.$nextTick()</a><br>官方介绍：this. $nextTick它会将回调延迟到下次 DOM <strong>更新循环之后执行</strong>（循环就是这里的v-for）。<br><strong>个人理解</strong>：无非是等我们页面中的结构都有了再去执行回调函数</p><p>完整代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!--列表--&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sortList clearfix&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--banner轮播--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mySwiper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(carouse,index) in bannerList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;carouse.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;carouse.imgUrl&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="comment">&lt;!-- 如果需要分页器 --&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="comment">&lt;!-- 如果需要导航按钮 --&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-prev&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//引入Swiper</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Swiper</span> <span class="keyword">from</span> <span class="string">&#x27;swiper&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//引入Swiper样式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="string">&#x27;swiper/css/swiper.css&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;index&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//主键挂载完毕，ajax请求轮播图图片</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;getBannerList&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapState</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//从仓库中获取轮播图数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">bannerList</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;<span class="keyword">return</span> state.<span class="property">home</span>.<span class="property">bannerList</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">bannerList</span>(<span class="params">newValue,oldValue</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//this.$nextTick()使用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.$nextTick(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">let</span> mySwiper = <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;swiper-container&quot;</span>),&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">pagination</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">el</span>: <span class="string">&#x27;.swiper-pagination&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">clickable</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 如果需要前进后退按钮</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">navigation</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">nextEl</span>: <span class="string">&#x27;.swiper-button-next&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">prevEl</span>: <span class="string">&#x27;.swiper-button-prev&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 如果需要滚动条</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">scrollbar</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">el</span>: <span class="string">&#x27;.swiper-scrollbar&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>注意：之前我们在学习watch时，一般都是监听的定义在data中的属性，但是我们这里是监听的computed中的属性，这样也是完全可以的，并且如果你的业务数据也是从store中通过computed动态获取的，也需要watch监听数据变化执行相应回调函数，完全可以模仿上面的写法。</p><h1 id="25、props父子组件通信"><a href="#25、props父子组件通信" class="headerlink" title="25、props父子组件通信"></a>25、props父子组件通信</h1><p><a href="https://cn.vuejs.org/v2/guide/components-props.html">prop官方讲解</a><br>原理：父组件设置一个属性绑定要传递的数据<br>子组件props接受该属性值<br>本项目的<br>父组件:home文件下的index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">//...省略</span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--  父组件通过自定义属性list给子组件传递数据--&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Floor</span> <span class="attr">v-for</span>=<span class="string">&quot;floor in floorList&quot;</span>  <span class="attr">:key</span>=<span class="string">&quot;floor.id&quot;</span> <span class="attr">:list</span>=<span class="string">&quot;floor&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--  商标--&gt;</span></span></span><br><span class="line"><span class="language-xml"> </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>子组件：Floor下的index.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!--楼层--&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;floor&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    //...省略</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;floor&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//子组件通过props属性接受父组件传递的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>:[<span class="string">&#x27;list&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>上面两代码一看，发现父子组件竟然都是Floor组件，这使得我们对父子组件的概念难以理解。<br><strong>个人理解1</strong>：<br>我们Floor文件夹下的index.vue创建了Floor组件，我们把它认为子组件。<br>我们在home文件夹下引用了该组件并使用了它，具体表现为<code>&lt;Floor v-for=&quot;floor in floorList&quot;  :key=&quot;floor.id&quot; :list=&quot;floor&quot;/&gt;</code>，此处使用的Floor标签，我们将其称为父组件。<br><strong>个人理解2</strong>：<br>Floor是子组件，我们在home组件中调用了Floor，我们把home组件认为父组件，我们在home组件中实现了由home组件向Floor组件传递信息的操作，即父组件向子组件传递信息。</p><p>如下图所示：<br>第一张图是home组件的信息，我们的目的上将floorList中的数据分发给Floor组件。</p><p><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/14.png" alt="在这里插入图片描述"><br>通过前面描述的代码我们实现了父子通信，即将floorList分发给Floor组件。下图为Floor组件信息<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/15.png" alt="在这里插入图片描述"><br>对于父子组件的理解，我更偏向于<strong>个人理解二</strong>，因为它可以通过上面图片得到很好的解释。但是<strong>个人理解一</strong>对于新手理解起来更容易。</p><h1 id="26、将轮播图模块提取为公共组件"><a href="#26、将轮播图模块提取为公共组件" class="headerlink" title="26、将轮播图模块提取为公共组件"></a>26、将轮播图模块提取为公共组件</h1><p>需要注意的是我们要把定义swiper对象放在mounted中执行，并且还要设置immediate：true属性，这样可以实现，无论数据有没有变化，上来立即监听一次。<br>上一小节刚刚讲了props实现父组件向子组件传递消息，这里同样也会将轮播图列表传递给子组件，原理相同。<br>公共组件Carousel代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cur&quot;</span> <span class="attr">id</span>=<span class="string">&quot;floor1Swiper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(carouse,index) in carouselList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;carouse.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;carouse.imgUrl&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 如果需要分页器 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 如果需要导航按钮 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-prev&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Swiper</span> <span class="keyword">from</span> <span class="string">&quot;swiper&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="string">&#x27;swiper/css/swiper.css&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Carousel&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>:[<span class="string">&quot;carouselList&quot;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">carouselList</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//这里监听，无论数据有没有变化，上来立即监听一次</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">immediate</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//监听后执行的函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">handler</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//第一次ListContainer中的轮播图Swiper定义是采用watch+ this.$nextTick()实现</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">let</span> mySwiper = <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">cur</span>,&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">loop</span>: <span class="literal">true</span>, <span class="comment">// 循环模式选项</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 如果需要分页器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">pagination</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">el</span>: <span class="string">&#x27;.swiper-pagination&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="comment">// clickable: true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 如果需要前进后退按钮</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">navigation</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">nextEl</span>: <span class="string">&#x27;.swiper-button-next&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">prevEl</span>: <span class="string">&#x27;.swiper-button-prev&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 如果需要滚动条</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">scrollbar</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">el</span>: <span class="string">&#x27;.swiper-scrollbar&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Floor组件引用Carousel组件<code>&lt;Carousel :carouselList=&quot;list.carouselList&quot;/&gt;</code><br>我们还记得在首页上方我们的ListContainer组件也使用了轮播图，同样我们替换为我们的公共组件。<br>ListContainer组件引用Carousel组件<code> &lt;Carouse :carouselList=&quot;bannerList&quot;/&gt;</code><br><strong>注意</strong>：<br>（1）老师将该组件在main.js中引入，并定义为全局组件。我这里只是在使用到该组件的地方引入并声明（个人认为轮播图组件还算不上全局组件）。<br>（2）引用组件时要在components中声明引入的组件。<br>（3）我们将轮播图组件已经提取为公共组件Carouse，所以我们只需要在Carouse中引入swiper和相应css样式。</p><h1 id="27、getters使用"><a href="#27、getters使用" class="headerlink" title="27、getters使用"></a>27、getters使用</h1><p>getters是vuex store中的计算属性。<br><a href="https://vuex.vuejs.org/zh/guide/getters.html#%E9%80%9A%E8%BF%87%E5%B1%9E%E6%80%A7%E8%AE%BF%E9%97%AE">getters使用</a><br>如果不使用getters属性，我们在组件获取state中的数据表达式为：<code>this.$store.state.子模块.属性</code>，<br>如果有多个组件需要用到此属性，我们要么复制这个表达式，或者抽取到一个共享函数然后在多处导入它——无论哪种方式都不是很理想。<br>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。<br><strong>个人理解</strong>：getters将获取store中的数据封装为函数，代码维护变得更简单（和我们将请求封装为api一样）。而且getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。<br><strong>注意</strong>：仓库中的getters是全局属性，是不分模块的。即store中所有模块的getter内的函数都可以通过<code>$store.getters.函数名</code>获取<br>下图为store内容<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/16.png" alt="在这里插入图片描述"><br>我们在Search模块中获取商品列表数据就是通过getters实现，需要注意的是当网络出现故障时应该将返回值设置为空，如果不设置返回值就变成了undefined。</p><p>store中search模块代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reqGetSearchInfo&#125; <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">searchList</span>:&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">SEARCHLIST</span>(<span class="params">state,searchList</span>)&#123;</span><br><span class="line">        state.<span class="property">searchList</span> = searchList</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//第二个参数data默认是一个空对象</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getSearchListr</span>(<span class="params">&#123;commit&#125;,data=&#123;&#125;</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">reqGetSearchInfo</span>(data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(result.<span class="property">code</span> === <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&quot;SEARCHLIST&quot;</span>,result.<span class="property">data</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">goodsList</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="comment">//网络出现故障时应该将返回值设置为空</span></span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">searchList</span>.<span class="property">goodsList</span>||[]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state,</span><br><span class="line">    mutations,</span><br><span class="line">    actions,</span><br><span class="line">    getters,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Search组件中使用getters获取仓库数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只展示了使用getters的代码</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//引入mapGetters</span></span><br><span class="line">  <span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Search&#x27;</span>,</span><br><span class="line">    <span class="attr">computed</span>:&#123;</span><br><span class="line">      <span class="comment">//使用mapGetters，参数是一个数组，数组的元素对应getters中的函数名</span></span><br><span class="line">      ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;goodsList&#x27;</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>后续数据的动态渲染就和之前模块相同，没有什么难度。</p><h1 id="28、Object-asign实现对象拷贝"><a href="#28、Object-asign实现对象拷贝" class="headerlink" title="28、Object.asign实现对象拷贝"></a>28、Object.asign实现对象拷贝</h1><p><a href="https://www.jianshu.com/p/f9ec860ecd81">参考链接</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, ...sources)    【target：目标对象】，【souce：源对象（可多个）】</span><br><span class="line">举个栗子：</span><br><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> object2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;<span class="attr">c</span>: <span class="number">4</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;, object1);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object2.<span class="property">c</span>, object2.<span class="property">d</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object1)  <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object2)  <span class="comment">// &#123; c: 3, d: 5, a: 1, b: 2 &#125;</span></span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"><span class="number">1.</span>如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性</span><br><span class="line"><span class="number">2.</span><span class="title class_">Object</span>.<span class="property">assign</span> 方法只会拷贝源对象自身的并且可枚举的属性到目标对象。该方法使用源对象的[[<span class="title class_">Get</span>]]和目标</span><br><span class="line">对象的[[<span class="title class_">Set</span>]]，所以它会调用相关 getter 和 setter。因此，它分配属性，而不仅仅是复制或定义新的属性。如</span><br><span class="line">果合并源包含getter，这可能使其不适合将新属性合并到原型中。为了将属性定义（包括其可枚举性）复制到</span><br><span class="line">原型，应使用<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>()和<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>() 。</span><br></pre></td></tr></table></figure><h1 id="29、对象深拷贝"><a href="#29、对象深拷贝" class="headerlink" title="29、对象深拷贝"></a>29、对象深拷贝</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">针对深拷贝，需要使用其他办法，因为 <span class="title class_">Object</span>.<span class="title function_">assign</span>()拷贝的是属性值。假如源对象的属性值是一个对象的引用，那么它也只指向那个引用。</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">0</span> , <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">0</span>&#125;&#125;; </span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj1); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj2)); <span class="comment">// &#123; a: 0, b: &#123; c: 0&#125;&#125; </span></span><br><span class="line"></span><br><span class="line">obj1.<span class="property">a</span> = <span class="number">1</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1)); <span class="comment">// &#123; a: 1, b: &#123; c: 0&#125;&#125; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj2)); <span class="comment">// &#123; a: 0, b: &#123; c: 0&#125;&#125; </span></span><br><span class="line"></span><br><span class="line">obj2.<span class="property">a</span> = <span class="number">2</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1)); <span class="comment">// &#123; a: 1, b: &#123; c: 0&#125;&#125; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj2)); <span class="comment">// &#123; a: 2, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line"> </span><br><span class="line">obj2.<span class="property">b</span>.<span class="property">c</span> = <span class="number">3</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1)); <span class="comment">// &#123; a: 1, b: &#123; c: 3&#125;&#125; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj2)); <span class="comment">// &#123; a: 2, b: &#123; c: 3&#125;&#125; </span></span><br><span class="line">最后一次赋值的时候，b是值是对象的引用，只要修改任意一个，其他的也会受影响</span><br><span class="line"></span><br><span class="line"><span class="comment">// Deep Clone （深拷贝）</span></span><br><span class="line">obj1 = &#123; <span class="attr">a</span>: <span class="number">0</span> , <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">0</span>&#125;&#125;; </span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1)); </span><br><span class="line">obj1.<span class="property">a</span> = <span class="number">4</span>; </span><br><span class="line">obj1.<span class="property">b</span>.<span class="property">c</span> = <span class="number">4</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj3)); <span class="comment">// &#123; a: 0, b: &#123; c: 0&#125;&#125;</span></span><br></pre></td></tr></table></figure><h1 id="30、利用路由信息变化实现动态搜索"><a href="#30、利用路由信息变化实现动态搜索" class="headerlink" title="30、利用路由信息变化实现动态搜索"></a>30、利用路由信息变化实现动态搜索</h1><p>最初想法：在每个三级列表和收缩按钮加一个点击触发事件，只要点击了就执行搜索函数。<br>这是一个很蠢的想法，如果这样就会生成很多回调函数，很耗性能。<br>最佳方法：我们每次进行新的搜索时，我们的query和params参数中的部分内容肯定会改变，而且这两个参数是路由的属性。我们可以通过监听路由信息的变化来动态发起搜索请求。</p><p>如下图所示，$route是组件的属性，所以watch是可以监听的（watch可以监听组件data中所有的属性）<br><strong>注意</strong>：组件中data的属性包括：自己定义的、系统自带的（如 $route）、父组件向子组件传递的等等。<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/17.png" alt="在这里插入图片描述"><br>search组件watch部分代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">      $route(newValue,oldValue)&#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>.<span class="property">searchParams</span>,<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>,<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">searchInfo</span>()</span><br><span class="line">        <span class="comment">//如果下一次搜索时只有params参数，拷贝后会发现searchParams会保留上一次的query参数</span></span><br><span class="line">        <span class="comment">//所以每次请求结束后将相应参数制空</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">category1Id</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">category2Id</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">category3Id</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">keyword</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h1 id="31、面包屑相关操作"><a href="#31、面包屑相关操作" class="headerlink" title="31、面包屑相关操作"></a>31、面包屑相关操作</h1><p>本次项目的面包屑操作主要就是两个删除逻辑。<br>分为：<br>当分类属性（query）删除时删除面包屑同时修改路由信息。<br>当搜索关键字（params）删除时删除面包屑、修改路由信息、同时删除输入框内的关键字。<br>1、query删除时<br>因为此部分在面包屑中是通过categoryName展示的，所所以删除时应将该属性值制空或undefined。<br>可以通过路由再次跳转修改路由信息和url链接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除分类</span></span><br><span class="line">      <span class="title function_">removeBread</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">categoryName</span> = <span class="literal">undefined</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;Search&#x27;</span>,<span class="attr">params</span>:<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>&#125;)</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><p>2、params删除时<br>和query删除的唯一不同点是此部分会多一步操作：删除输入框内的关键字（因为params参数是从输入框内获取的）<br>输入框实在Header组件中的<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/18.png" alt="在这里插入图片描述"><br>header和search组件是兄弟组件，要实现该操作就要通过兄弟组件之间进行通信完成。<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/19.png" alt="在这里插入图片描述"><br>这里通过$bus实现header和search组件的通信。<br>$bus使用<br>（1）在main.js中注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">//全局事件总线$bus配置</span></span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//此处的this就是这个new Vue()对象</span></span><br><span class="line">    <span class="comment">//网络有很多bus通信总结，原理相同，换汤不换药</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="comment">//router2、注册路由，此时组件中都会拥有$router $route属性</span></span><br><span class="line">  router,</span><br><span class="line">  <span class="comment">//注册store,此时组件中都会拥有$store</span></span><br><span class="line">  store</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>（2）search组件使用$bus通信，第一个参数可以理解为为通信的暗号，还可以有第二个参数（用于传递数据），我们这里只是用于通知header组件进行相应操作，所以没有设置第二个参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除搜索关键字</span></span><br><span class="line">      <span class="title function_">removeBreadParams</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">keyword</span> = <span class="literal">undefined</span></span><br><span class="line">        <span class="comment">//通知兄弟组件header删除输入框的keyword关键字</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&quot;clear&quot;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;Search&#x27;</span>,<span class="attr">query</span>:<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>&#125;)</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><p>（3）header组件接受$bus通信<br>注意：组件挂载时就监听clear事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//  组件挂载时就监听clear事件，clear事件在search模块中定义</span></span><br><span class="line">  <span class="comment">//  当删除关键字面包屑时，触发该事件，同时header的输入框绑定的keyword要删除</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&quot;clear&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">keyword</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="32、组件通信方式"><a href="#32、组件通信方式" class="headerlink" title="32、组件通信方式"></a>32、组件通信方式</h1><p><strong>第一种父子组件通信：</strong></p><blockquote><p>$ on、$emit自定义事件实现子组件给父组件传递信息。 props实现父组件给子组件传递数据。</p></blockquote><p><strong>第二种全局事件总线 $bus</strong>（适用于所有的场景）<br><strong>第三种Vuex</strong><br><strong>第四中插槽</strong>（适用于父子组件通信）</p><p><a href="https://www.cnblogs.com/yszblog/p/10135969.html">组件通信方式连接</a></p><h1 id="33、SearchSelector子组件传参及面包屑操作"><a href="#33、SearchSelector子组件传参及面包屑操作" class="headerlink" title="33、SearchSelector子组件传参及面包屑操作"></a>33、SearchSelector子组件传参及面包屑操作</h1><p>在<strong>31小节</strong>中描述了通过query、params参数生成面包屑，以及面包屑的删除操作对应地址栏url的修改。<br>SearchSelector组件有两个属性也会生成面包屑，分别为品牌名、手机属性。如下图所示<img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/20.png" alt="在这里插入图片描述"><br>此处生成面包屑时会涉及到子组件向父组件传递信息操作（在32小节有相关知识点），之后的操作和前面31小姐讲的面包屑操作原理相同。唯一的区别是，这里删除面包屑时不需要修改地址栏url，因为url是由路由地址确定的，并且只有query、params两个参数变化回影响路由地址变化。<br>在具体的操作内还会涉及一些小的知识点，例如<br>字符串拼接 ·${}·，使用方法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a的值是：<span class="subst">$&#123;a&#125;</span>`</span>); <span class="comment">//a的值是：1</span></span><br></pre></td></tr></table></figure><p>至此面包屑部分内容结束。<br>总结：面包屑由四个属性影响：parads、query、品牌、手机属性<br><strong>面包屑生成逻辑</strong><br>判断searchParams相关属性是否存在，存在即显示。<br><strong>面包屑删除逻辑</strong><br>Search.vue js代码()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> <span class="title class_">SearchSelector</span> <span class="keyword">from</span> <span class="string">&#x27;./SearchSelector/SearchSelector&#x27;</span></span><br><span class="line">  <span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Search&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">      <span class="title class_">SearchSelector</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="comment">//动态获取searchParams</span></span><br><span class="line">        <span class="attr">searchParams</span>:&#123;</span><br><span class="line">          <span class="attr">category1Id</span>: <span class="string">&quot;&quot;</span>,<span class="comment">//一级分类id</span></span><br><span class="line">          <span class="attr">category2Id</span>: <span class="string">&quot;&quot;</span>,<span class="comment">//二级分类id</span></span><br><span class="line">          <span class="attr">category3Id</span>: <span class="string">&quot;&quot;</span>,<span class="comment">//三级分类id</span></span><br><span class="line">          <span class="attr">categoryName</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">keyword</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">order</span>: <span class="string">&quot;1:desc&quot;</span>,</span><br><span class="line">          <span class="attr">pageNo</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">pageSize</span>: <span class="number">10</span>,</span><br><span class="line">          <span class="attr">props</span>: [],<span class="comment">//平台售卖属性</span></span><br><span class="line">          <span class="attr">trademark</span>: <span class="string">&quot;&quot;</span><span class="comment">//品牌</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//在组件挂在之前动态编辑searchParams的值，因为组件挂在之后会使用到searchParams</span></span><br><span class="line">    <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//Object.assign方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</span></span><br><span class="line">      <span class="comment">//Object.assign 方法只会拷贝源对象自身的并且可枚举的属性到目标对象</span></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>.<span class="property">searchParams</span>,<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>,<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">      <span class="comment">//搜索</span></span><br><span class="line">      <span class="title function_">searchInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;getSearchListr&quot;</span>,<span class="variable language_">this</span>.<span class="property">searchParams</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//删除分类(query)面包屑</span></span><br><span class="line">      <span class="title function_">removeBread</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">categoryName</span> = <span class="literal">undefined</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;Search&#x27;</span>,<span class="attr">params</span>:<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//删除搜索关键字(params)面包屑</span></span><br><span class="line">      <span class="title function_">removeBreadParams</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">keyword</span> = <span class="literal">undefined</span></span><br><span class="line">        <span class="comment">//通知兄弟组件header删除输入框的keyword关键字</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&quot;clear&quot;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;Search&#x27;</span>,<span class="attr">query</span>:<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//获取子组件传递的品牌信息（自定义事件）</span></span><br><span class="line">      <span class="title function_">tradeMarkInfo</span>(<span class="params">tradeMark</span>)&#123;</span><br><span class="line">        <span class="comment">//接口文档中trademark的信息是&quot;ID:品牌名称&quot;形式</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">trademark</span> = <span class="string">`<span class="subst">$&#123;tradeMark.tmId&#125;</span>:<span class="subst">$&#123;tradeMark.tmName&#125;</span>`</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">searchInfo</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//删除品牌面包屑</span></span><br><span class="line">      <span class="title function_">removeTradeMark</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">trademark</span> = <span class="literal">undefined</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">searchInfo</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//获取子组件传递的属性信息（自定义事件）</span></span><br><span class="line">      <span class="title function_">attrInfo</span>(<span class="params">attr,attrValue</span>)&#123;</span><br><span class="line">        <span class="comment">//searchParams.props元素为字符串形式，api文档有介绍</span></span><br><span class="line">        <span class="keyword">let</span> props = <span class="string">`<span class="subst">$&#123;attr.attrId&#125;</span>:<span class="subst">$&#123;attrValue&#125;</span>:<span class="subst">$&#123;attr.attrName&#125;</span>`</span></span><br><span class="line">        <span class="comment">//数组去重</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">props</span>.<span class="title function_">indexOf</span>(props)===-<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">props</span>.<span class="title function_">push</span>(props)</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">searchInfo</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//删除属性面包屑</span></span><br><span class="line">      <span class="title function_">removeAttr</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">props</span>.<span class="title function_">splice</span>(index,<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">searchInfo</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>:&#123;</span><br><span class="line">      ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;goodsList&#x27;</span>])</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//watch可以监听组件上的属性</span></span><br><span class="line">    <span class="attr">watch</span>:&#123;</span><br><span class="line">      <span class="attr">$route</span>:&#123;</span><br><span class="line">        <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>)</span><br><span class="line">          <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>.<span class="property">searchParams</span>,<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>,<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>)</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">searchInfo</span>()</span><br><span class="line">          <span class="comment">//如果下一次搜索时只有params参数，拷贝后会发现searchParams会保留上一次的query参数</span></span><br><span class="line">          <span class="comment">//所以每次请求结束后将相应参数制空</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">category1Id</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">category2Id</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">category3Id</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="34、商品排序"><a href="#34、商品排序" class="headerlink" title="34、商品排序"></a>34、商品排序</h1><p>排序的逻辑比较简单，只是改变一下请求参数中的order字段，后端会根据order值返回不同的数据来实现升降序。<br>order属性值为字符串，例如‘1：asc’、‘2：desc’。1代表综合，2代表价格，asc代表升序，desc代表降序。</p><p>我们的升降序是通过箭头图标来辨别的，如图所示：<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/21.png" alt="在这里插入图片描述"><br>图标是iconfont网站的图标，通过引入在线css的方式引入图标<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/22.png" alt="在这里插入图片描述"><br>在public文件index引入该css<br><code> &lt;link rel=&quot;stylesheet&quot; href=&quot;https://at.alicdn.com/t/font_2994457_qqwrvmss9l9.css&quot;&gt;</code></p><p>在search模块使用该图标</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;sui-navbar&quot;</span>&gt;</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-inner filter&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;sui-nav&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 这里isOne、isTwo、isAsc、isDesc是计算属性，如果不使用计算属性要在页面中写很长的代码--&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:isOne&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeOrder(&#x27;1&#x27;)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--                  阿里图标前置类iconfont--&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">a</span>  &gt;</span>综合<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;isOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;icon-up&#x27;:isAsc,&#x27;icon-down&#x27;:isDesc&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">:class</span>=<span class="string">&#123;active:isTwo&#125;</span> @<span class="attr">click</span>=<span class="string">&quot;changeOrder(&#x27;2&#x27;)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">a</span> &gt;</span>价格<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;isTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;icon-up&#x27;:isAsc,&#x27;icon-down&#x27;:isDesc&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">          &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>isOne、isTwo、isAsc、isDesc计算属性代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">      ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;goodsList&#x27;</span>]),</span><br><span class="line">      <span class="title function_">isOne</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">order</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;1&#x27;</span>)!==-<span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">isTwo</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">order</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;2&#x27;</span>)!==-<span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">isDesc</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">order</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;desc&#x27;</span>)!==-<span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">isAsc</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">order</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;asc&#x27;</span>)!==-<span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>点击‘综合’或‘价格’的触发函数changeOrder</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//flag用于区分综合、价格，1：综合，2：价格</span></span><br><span class="line">      <span class="title function_">changeOrder</span>(<span class="params">flag</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> newSearchOrder = <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">order</span></span><br><span class="line">        <span class="comment">//将order拆为两个字段orderFlag(1:2)、order(asc:desc)</span></span><br><span class="line">        <span class="keyword">let</span> orderFlag = <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">order</span>.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">let</span> order = <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">order</span>.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="comment">//由综合到价格、由价格到综合</span></span><br><span class="line">        <span class="keyword">if</span>(orderFlag!==flag)&#123;</span><br><span class="line">          <span class="comment">//点击的不是同一个按钮</span></span><br><span class="line">          newSearchOrder = <span class="string">`<span class="subst">$&#123;flag&#125;</span>:desc`</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">searchInfo</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">//多次点击的是不是同一个按钮</span></span><br><span class="line">          newSearchOrder = <span class="string">`<span class="subst">$&#123;flag&#125;</span>:<span class="subst">$&#123;order===<span class="string">&#x27;desc&#x27;</span>?<span class="string">&#x27;asc&#x27;</span>:<span class="string">&#x27;desc&#x27;</span>&#125;</span>`</span></span><br><span class="line">          &#125;</span><br><span class="line">        <span class="comment">//需要给order重新赋值</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">order</span> = newSearchOrder;</span><br><span class="line">        <span class="comment">//再次发请求</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">searchInfo</span>();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h1 id="35、手写分页器"><a href="#35、手写分页器" class="headerlink" title="35、手写分页器"></a>35、手写分页器</h1><p>实际开发中是不会手写的，一般都会用一些开源库封装好的分页，比如element ui。但是这个知识还是值得学习一下的。<br>核心属性：<br>pageNo（当前页码）、pageSize、total、continues（连续展示的页码）<br>核心逻辑是获取连续页码的起始页码和末尾页码，通过计算属性获得。（计算属性如果想返回多个数值，可以通过对象形式返回）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//连续页码的起始页码、末尾页码</span></span><br><span class="line">  <span class="title function_">startNumAndEnd</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span> , end = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//规定连续页码数字5（totalPage至少5页）</span></span><br><span class="line">    <span class="comment">//不正常现象</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">continues</span> &gt; <span class="variable language_">this</span>.<span class="property">totalPage</span>)&#123;</span><br><span class="line">      start = <span class="number">1</span></span><br><span class="line">      end = <span class="variable language_">this</span>.<span class="property">totalPage</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//正常现象      Math.floor:想下取整</span></span><br><span class="line">      start = <span class="variable language_">this</span>.<span class="property">pageNo</span> - <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="variable language_">this</span>.<span class="property">continues</span>/<span class="number">2</span>)</span><br><span class="line">      end = <span class="variable language_">this</span>.<span class="property">pageNo</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="variable language_">this</span>.<span class="property">continues</span>/<span class="number">2</span>)</span><br><span class="line">      <span class="comment">//start出现不正常现象纠正</span></span><br><span class="line">      <span class="keyword">if</span>(start &lt; <span class="number">1</span>)&#123;</span><br><span class="line">        start = <span class="number">1</span></span><br><span class="line">        end = <span class="variable language_">this</span>.<span class="property">continues</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//end出现不正常现象纠正</span></span><br><span class="line">      <span class="keyword">if</span>(end &gt; <span class="variable language_">this</span>.<span class="property">totalPage</span>)&#123;</span><br><span class="line">        end = <span class="variable language_">this</span>.<span class="property">totalPage</span></span><br><span class="line">        start = <span class="variable language_">this</span>.<span class="property">totalPage</span> - <span class="variable language_">this</span>.<span class="property">continues</span> + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;start,end&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当点击页码会将pageNo传递给父组件，然后父组件发起请求，最后渲染。这里还是应用通过自定义事件实现子组件向父组件传递信息。</p><h1 id="36、字符串拼接"><a href="#36、字符串拼接" class="headerlink" title="36、字符串拼接"></a>36、字符串拼接</h1><p>如果你想在你的字符串内加入某个变量的值，就需要字符串拼接使用 &#96;&#96;（飘符号），由于 <code>飘</code>在markdown是单行代码标记所以下面我们用··代替。<br>字符串拼接 ·${}·，使用方法如下：<br><strong>在js中使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a的值是：<span class="subst">$&#123;a&#125;</span>`</span>); <span class="comment">//a的值是：1</span></span><br></pre></td></tr></table></figure><p><strong>在html中使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">&quot;`/detail/$&#123;goods.id&#125;`&quot;</span>&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h1 id="37、滚动条"><a href="#37、滚动条" class="headerlink" title="37、滚动条"></a>37、滚动条</h1><p>使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，就像重新加载页面那样。 vue-router 能做到，而且更好，它让你可以自定义路由切换时页面如何滚动。<br><a href="https://router.vuejs.org/zh/guide/advanced/scroll-behavior.html">router滚动行为</a></p><h1 id="38、undefined细节"><a href="#38、undefined细节" class="headerlink" title="38、undefined细节(*****)"></a>38、undefined细节(*****)</h1><p>访问undefined的属性值会引起红色警告，可以不处理，但是要明白警告的原因。<br>以获取商品categoryView信息为例，categoryView是一个对象。<br>对应的getters代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters =  &#123;</span><br><span class="line">    <span class="title function_">categoryView</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">goodInfo</span>.<span class="property">categoryView</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的computed代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">     ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;categoryView&#x27;</span>])</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>html代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;conPoin&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;categoryView.category1Name&quot;</span> &gt;</span>&#123;&#123;categoryView.category1Name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;categoryView.category2Name&quot;</span> &gt;</span>&#123;&#123;categoryView.category2Name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;categoryView.category3Name&quot;</span> &gt;</span>&#123;&#123;categoryView.category3Name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">      &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>下细节在于getters的返回值。如果getters按上面代码写为<code>return state.goodInfo.categoryView</code>，页面可以正常运行，但是会出现红色警告。<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/23.png" alt="在这里插入图片描述"><br><strong>原因</strong>：假设我们网络故障，导致goodInfo的数据没有请求到，即goodInfo是一个空的对象，当我们去调用getters中的<code>return state.goodInfo.categoryView</code>时，因为goodInfo为空，所以也不存在categoryView，即我们getters得到的categoryView为undefined。所以我们在html使用该变量时就会出现没有该属性的报错。<br>即：网络正常时不会出错，一旦无网络或者网络问题就会报错。<br><strong>总结</strong>：所以我们在写getters的时候要养成一个习惯在返回值后面加一个||条件。即当属性值undefined时，会返回||后面的数据，这样就不会报错。<br>如果返回值为对象加||{}，数组：||[ ]。<br>此处categoryView为对象，所以将getters代码改为<code>return state.goodInfo.categoryView||&#123;&#125;</code></p><h1 id="39、商品详情"><a href="#39、商品详情" class="headerlink" title="39、商品详情"></a>39、商品详情</h1><p>商品详情唯一难点就是点击轮播图图片时，改变放大镜组件展示的图片。<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/24.png" alt="在这里插入图片描述"><br>老师的方法很巧妙：在轮播图组件中设置一个currendIndex，用来记录所点击图片的下标，并用currendIndex实现点击图片高亮设置。当符合图片的下标满足<code>currentIndex===index</code>时，该图片就会被标记为选中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;swiper-container&quot;</span> ref=<span class="string">&quot;cur&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(skuImage,index) in skuImageList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;skuImage.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;skuImage.imgUrl&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:currentIndex===index&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeImg(index)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-prev&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>轮播图组件和放大镜组件是兄弟组件，所以要通过全局总线通信。<br>在轮播图组件中，点击图片触发全局事件changeImg，参数为图片所在数组的下标。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">changeImg</span>(<span class="params">index</span>)&#123;</span><br><span class="line">       <span class="comment">//将点击的图片标识位高亮</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">currentIndex</span> = index</span><br><span class="line">       <span class="comment">//通知兄弟组件修改大图图片</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&quot;changeImg&quot;</span>,index)</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>对应的放大镜组件，首先在mounted监听该全局事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&quot;changeImg&quot;</span>,<span class="function">(<span class="params">index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//修改当前响应式图片</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentIndex</span> = index;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>放大镜组件中也会有一个currentIndex，他用表示大图中显示的图片的下标（因为放大镜组件只能显示一张图片），全局事件传递的index赋值给currentIndex ，通过computed计算属性改变放大镜组件展示的图片下标。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">      <span class="title function_">imgObj</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">skuImageList</span>[<span class="variable language_">this</span>.<span class="property">currentIndex</span>] || &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>放大镜组件展示图片的html代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img :src=<span class="string">&quot;imgObj.imgUrl &quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>至于放大镜相关知识，因为之前没有学过，而且我只是想学习一下前端业务逻辑，所以就丢弃了放大镜相关知识。<br><strong>但是</strong>我还是要贴一个链接，如果用到，直接模仿这个链接的内容就可以实现。<a href="https://blog.csdn.net/weixin_40758850/article/details/89445629">js实现放大镜</a></p><h1 id="40、失焦事件"><a href="#40、失焦事件" class="headerlink" title="40、失焦事件"></a>40、失焦事件</h1><p>blur与change事件在绝大部分情况下表现都非常相似，输入结束后，离开输入框，会先后触发change与blur，唯有两点例外。<br>（1） 没有进行任何输入时，不会触发change。<br>在这种情况下，输入框并不会触发change事件，但一定会触发blur事件。在判断表单修改状态时，这种差异会非常有用，通过change事件能轻易地找到哪些字段发生了变更以及其值的变更轨迹。</p><p>（2）输入后值并没有发生变更。<br>这种情况是指，在没有失焦的情况下，在输入框内进行返回的删除与输入操作，但最终的值与原值一样，这种情况下，keydown、input、keyup、blur都会触发，但change依旧不会触发。</p><h1 id="41、加入购物车成功路由"><a href="#41、加入购物车成功路由" class="headerlink" title="41、加入购物车成功路由"></a>41、加入购物车成功路由</h1><p>点击加入购物车时，会向后端发送API请求，但是该请求的返回值中data为null，所以我们只需要根据状态码code判断是否跳转到‘加入购物车成功页面’。<br>detail组件‘加入购物车’请求函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">addShopCar</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="keyword">await</span>  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;addOrUpdateShopCart&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">skuId</span>: <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">skuId</span>,</span><br><span class="line">            <span class="attr">skuNum</span>: <span class="variable language_">this</span>.<span class="property">skuNum</span></span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="comment">//一些简单的数据，比如skuNum通过query传过去</span></span><br><span class="line">          <span class="comment">//复杂的数据通过session存储，</span></span><br><span class="line">          <span class="comment">//sessionStorage、localStorage只能存储字符串        sessionStorage.setItem(&quot;SKUINFO&quot;,JSON.stringify(this.skuInfo))</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;AddCartSuccess&#x27;</span>,<span class="attr">query</span>:&#123;<span class="string">&#x27;skuNum&#x27;</span>:<span class="variable language_">this</span>.<span class="property">skuNum</span>&#125;&#125;)</span><br><span class="line">        &#125;<span class="keyword">catch</span> (error)&#123;</span><br><span class="line">          <span class="title function_">alert</span>(error.<span class="property">message</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>detail store对应代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将产品添加到购物车中</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">addOrUpdateShopCart</span>(<span class="params">&#123;commit&#125;,&#123;skuId,skuNum&#125;</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">reqAddOrUpdateShopCart</span>(skuId,skuNum)</span><br><span class="line">        <span class="keyword">if</span>(result.<span class="property">code</span> === <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;faile&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其实这里当不满足<code>result.code === 200</code>条件时，也可以返回字符串‘faile’，自己在addShopCar中判断一下返回值，如果为‘ok’则跳转，如果为‘faile’(或者不为‘ok’)直接提示错误。当然这里出错时返回一个Promise.reject更加符合程序的逻辑。</p><blockquote><p>跳转‘加入购物车成功页面’的同时要携带商品的信息。本项目只是传递的商品的一些标签属性，并没有传递商品的型号类别的信息，比如颜色、内存等信息，自己可以手动实现，比较简单。</p></blockquote><p>当我们想要实现<strong>两个毫无关系</strong>的组件传递数据时，首相想到的就是路由的query传递参数，但是query适合传递单个数值的简单参数，所以如果想要<strong>传递对象</strong>之类的复杂信息，就可以通过<strong>Web Storage</strong>实现。</p><p><strong>sessionStorage、localStorage概念</strong>：<br><strong>sessionStorage</strong>：为每一个给定的源维持一个独立的存储区域，该区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）。<br><strong>localStorage</strong>：同样的功能，但是在浏览器关闭，然后重新打开后数据仍然存在。<br><strong>注意</strong>：无论是session还是local存储的值都是字符串形式。如果我们想要存储对象，需要在存储前JSON.stringify()将对象转为字符串，在取数据后通过JSON.parse()将字符串转为对象。</p><h1 id="42、购物车组件开发"><a href="#42、购物车组件开发" class="headerlink" title="42、购物车组件开发"></a>42、购物车组件开发</h1><p>根据api接口文档封装请求函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqGetCartList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">requests</span>(&#123;</span><br><span class="line"><span class="attr">url</span>:<span class="string">&#x27;/cart/cartList&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span></span><br><span class="line">&#125;)&#125;</span><br></pre></td></tr></table></figure><p>但是如果想要获取详细信息，还需要一个用户的uuidToken，用来验证用户身份。但是该请求函数没有参数，所以我们只能把uuidToken加在请求头中。</p><p>创建utils工具包文件夹，创建生成uuid的js文件，对外暴露为函数（记得导入uuid  &#x3D;&gt; <code>npm install uuid</code>）。<br><strong>生成临时游客的uuid（随机字符串）,每个用户的uuid不能发生变化，还要持久存储</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;v4 <span class="keyword">as</span> uuidv4&#125; <span class="keyword">from</span> <span class="string">&#x27;uuid&#x27;</span></span><br><span class="line"><span class="comment">//生成临时游客的uuid（随机字符串）,每个用户的uuid不能发生变化，还要持久存储</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getUUID</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//1、判断本地存储是否由uuid</span></span><br><span class="line">    <span class="keyword">let</span> uuid_token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;UUIDTOKEN&#x27;</span>)</span><br><span class="line">    <span class="comment">//2、本地存储没有uuid</span></span><br><span class="line">    <span class="keyword">if</span>(!uuid_token)&#123;</span><br><span class="line">        <span class="comment">//2.1生成uuid</span></span><br><span class="line">        uuid_token = <span class="title function_">uuidv4</span>()</span><br><span class="line">        <span class="comment">//2.2存储本地</span></span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;UUIDTOKEN&quot;</span>,uuid_token)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当用户有uuid时就不会再生成</span></span><br><span class="line">    <span class="keyword">return</span> uuid_token</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户的uuid_token定义在store中的detail模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state =  &#123;</span><br><span class="line">    <span class="attr">goodInfo</span>:&#123;&#125;,</span><br><span class="line">    <span class="comment">//游客身份</span></span><br><span class="line">    <span class="attr">uuid_token</span>: <span class="title function_">getUUID</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在request.js中设置请求头</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span>;</span><br><span class="line">requests.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//config内主要是对请求头Header配置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、先判断uuid_token是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(store.<span class="property">state</span>.<span class="property">detail</span>.<span class="property">uuid_token</span>)&#123;</span><br><span class="line">        <span class="comment">//2、userTempId字段和后端统一</span></span><br><span class="line">        config.<span class="property">headers</span>[<span class="string">&#x27;userTempId&#x27;</span>] = store.<span class="property">state</span>.<span class="property">detail</span>.<span class="property">uuid_token</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//比如添加token</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启进度条</span></span><br><span class="line">    nprogress.<span class="title function_">start</span>();</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意this.$store只能在组件中使用，不能再js文件中使用。如果要在js中使用，需要引入<code>import store from &#39;@/store&#39;;</code></p><h1 id="43、购物车商品数量修改及个人疑问"><a href="#43、购物车商品数量修改及个人疑问" class="headerlink" title="43、购物车商品数量修改及个人疑问"></a>43、购物车商品数量修改及个人疑问</h1><p>1、购物车商品信息展示比较简单，就不多做赘述。<br>2、every函数使用</p><blockquote><p>every遍历某个数组，判断数组中的元素是否满足表达式，全部为满足返回true，否则返回false</p></blockquote><p>例如判断底部勾选框是否全部勾选代码部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断底部勾选框是否全部勾选</span></span><br><span class="line">      <span class="title function_">isAllCheck</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//every遍历某个数组，判断数组中的元素是否满足表达式，全部为满足返回true，否则返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">cartInfoList</span>.<span class="title function_">every</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">isChecked</span> === <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>3、修改商品数量前端代码部分：<br><strong>注意</strong>：通过@click、@change触发handler函数改变商品数量。<br><strong>引申</strong>：在我自己写代码的同时，我发现，当使用函数的参数个数不同时，例如：handler(‘minus’,-1,cartInfo)和 handler(‘minus’,-1)，执行的还是同一个method的handler函数，只是对应的参数变为了undefined。即js不会像java一样，有代码的重载。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;li <span class="keyword">class</span>=<span class="string">&quot;cart-list-con5&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mins&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handler(&#x27;minus&#x27;,-1,cartInfo)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;cartInfo.skuNum&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;handler(&#x27;change&#x27;,$event.target.value,cartInfo)&quot;</span> <span class="attr">minnum</span>=<span class="string">&quot;1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;itxt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;plus&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handler(&#x27;add&#x27;,1,cartInfo)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>handler函数，修改商品数量时，加入<strong>节流</strong>操作。</p><blockquote><p>添加到购物车和对已有物品进行数量改动使用的同一个api，可以查看api文档。<br>handler函数有三个参数，type区分操作，disNum用于表示数量变化（正负）,cart商品的信息</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//加入节流操作</span></span><br><span class="line"> <span class="attr">handler</span>: <span class="title function_">throttle</span>(<span class="keyword">async</span>  <span class="keyword">function</span>(<span class="params">type,disNum,cart</span>)&#123;</span><br><span class="line">       <span class="comment">//减按钮判断当前数量是否为1</span></span><br><span class="line">    <span class="keyword">if</span>(type === <span class="string">&#x27;minus&#x27;</span>) &#123;</span><br><span class="line">       <span class="comment">//当商品数量为1是，不可以再减少</span></span><br><span class="line">       <span class="keyword">if</span>(cart.<span class="property">skuNum</span> === <span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//输入框修改,难点：要判断输入的内容是否合法</span></span><br><span class="line">    <span class="keyword">if</span>(type === <span class="string">&#x27;change&#x27;</span>)&#123;</span><br><span class="line">       <span class="comment">//输入内容不合法时</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isNaN</span>(disNum * <span class="number">1</span>)  || disNum &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">          disNum = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          disNum = <span class="built_in">parseInt</span>(disNum) - cart.<span class="property">skuNum</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//加按钮disNum不需要改变</span></span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">       <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;addOrUpdateShopCart&#x27;</span>,&#123;<span class="attr">skuId</span>:cart.<span class="property">skuId</span>,<span class="attr">skuNum</span>:disNum&#125;)</span><br><span class="line">    <span class="comment">//商品数量修改成功后再次获取服务器数据</span></span><br><span class="line">       <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;getCartList&quot;</span>)</span><br><span class="line"></span><br><span class="line">   &#125;<span class="keyword">catch</span> (error)&#123;</span><br><span class="line">       <span class="title function_">alert</span>(error)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,<span class="number">100</span>),</span><br></pre></td></tr></table></figure><p><strong>个人疑点</strong>：在最后一步更新商品信息时，我最初的想法时使用<code>this.$router.push(&#39;/shopcart&#39;)</code>实现。因为，我们shopcart页面的mounted会去获取商品信息。当路由跳转时会执行mounted的内容，实现商品数据信息更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;getCartList&quot;</span>)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>但是这样做不会更新商品数据，个人猜测原因是：因为我要跳往的路由和当前路由相同，并且路由参数没有改变，所以他就不会跳转。或者是会跳转。但是，因为路由信息没有变化，所以不会执行mounted函数。<br><strong>这里还是自己对路由和mounted内容不够了解，有了解的小伙伴可以帮我解答一下疑问吗？欢迎评论区解答。</strong></p><h1 id="44、购物车状态修改和商品删除"><a href="#44、购物车状态修改和商品删除" class="headerlink" title="44、购物车状态修改和商品删除"></a>44、购物车状态修改和商品删除</h1><p>这部分都比较简单，这里不多做赘述，唯一需要注意的是当store的action中的函数返回值data为null时，应该采用下面的写法（<strong>重点是if，else部分</strong>）</p><p>action部分：以删除购物车某个商品数据为例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改购物车某一个产品的选中状态</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">reqUpdateCheckedById</span>(<span class="params">&#123;commit&#125;,&#123;skuId,isChecked&#125;</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">reqUpdateCheckedById</span>(skuId,isChecked)</span><br><span class="line">        <span class="keyword">if</span>(result.<span class="property">code</span> === <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;fail&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>method部分：（<strong>重点是try、catch</strong>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">reqUpdateCheckedById</span>(<span class="params">cart,event</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> isChecked = event.<span class="property">target</span>.<span class="property">checked</span> ? <span class="number">1</span> :<span class="number">0</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;reqUpdateCheckedById&quot;</span>,&#123;<span class="attr">skuId</span>:cart.<span class="property">skuId</span>,<span class="attr">isChecked</span>:isChecked&#125;)</span><br><span class="line">          <span class="comment">//修改成功，刷新数据</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>()</span><br><span class="line">        &#125;<span class="keyword">catch</span> (error)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;getCartList&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h1 id="45、删除多个商品（actions扩展）"><a href="#45、删除多个商品（actions扩展）" class="headerlink" title="45、删除多个商品（actions扩展）"></a>45、删除多个商品（actions扩展）</h1><p>由于后台只提供了删除单个商品的接口，所以要删除多个商品时，只能多次调用actions中的函数。<br>我们可能最简单的方法是在method的方法中多次执行dispatch删除函数，当然这种做法也可行，但是为了深入了解actions，我们还是要将批量删除封装为actions函数。<br>actions扩展<br>官网的教程，一个标准的actions函数如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">deleteAllCheckedById</span>(<span class="params">context</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(context)</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我们可以看一下context到底是什么。<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/25.png" alt="在这里插入图片描述"><br>context中是包含dispatch、getters、state的，即我们可以在actions函数中通过dispatch调用其他的actions函数，可以通过getters获取仓库的数据。<br>这样我们的批量删除就简单了，对应的actions函数代码让如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/删除选中的所有商品</span><br><span class="line">    <span class="title function_">deleteAllCheckedById</span>(<span class="params">&#123;dispatch,getters&#125;</span>) &#123;</span><br><span class="line">        getters.<span class="property">getCartList</span>.<span class="property">cartInfoList</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span>  &#123;</span><br><span class="line">            <span class="keyword">let</span> result = [];</span><br><span class="line">            <span class="comment">//将每一次返回值添加到数组中</span></span><br><span class="line">            result.<span class="title function_">push</span>(item.<span class="property">isChecked</span> === <span class="number">1</span>?<span class="title function_">dispatch</span>(<span class="string">&#x27;deleteCartById&#x27;</span>,item.<span class="property">skuId</span>):<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(result)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>上面代码使用到了Promise.all</p><blockquote><p>Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。</p></blockquote><p>购物车组件method批量删除函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除选中的所有商品</span></span><br><span class="line">      <span class="keyword">async</span> <span class="title function_">deleteAllCheckedById</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;deleteAllCheckedById&#x27;</span>)</span><br><span class="line">          <span class="comment">//删除成功，刷新数据</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;getCartList&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">catch</span> (error)&#123;</span><br><span class="line">          <span class="title function_">alert</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><p>修改商品的全部状态和批量删除的原理相同，直接贴代价。<br>actions</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改购物车全部产品的选中状态</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">updateAllChecked</span>(<span class="params">&#123;dispatch,getters&#125;,flag</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> result = []</span><br><span class="line">        getters.<span class="property">getCartList</span>.<span class="property">cartInfoList</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(<span class="title function_">dispatch</span>(<span class="string">&#x27;reqUpdateCheckedById&#x27;</span>,&#123;<span class="attr">skuId</span>:item.<span class="property">skuId</span>,<span class="attr">isChecked</span>:flag</span><br><span class="line">            &#125;))</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(result)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>method</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改全部商品的状态</span></span><br><span class="line">     <span class="keyword">async</span> <span class="title function_">allChecked</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> flag =  event.<span class="property">target</span>.<span class="property">checked</span> ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(flag)</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;updateAllChecked&#x27;</span>,flag)</span><br><span class="line">          <span class="comment">//修改成功，刷新数据</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;getCartList&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">catch</span> (error)&#123;</span><br><span class="line">          <span class="title function_">alert</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p><strong>bug纠正</strong><br>computed中的cartInfoList没有写[ ]返回值。当后台返回的购物车数据为空时，cartInfoList 就会为undefined，会导致后面的total、isAllCheck等计算属性使用到cartInfoList时产生计算错误。</p><p>正确代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">cartInfoList</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">getCartList</span>.<span class="property">cartInfoList</span> || [];</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure><p>错误代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">cartInfoList</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">getCartList</span>.<span class="property">cartInfoList</span>;</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure><h1 id="46、注册登录业务-ES6-const新用法"><a href="#46、注册登录业务-ES6-const新用法" class="headerlink" title="46、注册登录业务(ES6  const新用法)"></a>46、注册登录业务(ES6  const新用法)</h1><p><strong>1、ES6  const新用法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;comment,index,deleteComment&#125; = <span class="variable language_">this</span> </span><br></pre></td></tr></table></figure><p>上面的这句话是一个简写，最终的含义相当于:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  comment = <span class="variable language_">this</span>.<span class="property">comment</span></span><br><span class="line"><span class="keyword">const</span>  index = <span class="variable language_">this</span>.<span class="property">index</span></span><br><span class="line"><span class="keyword">const</span>   deleteComment = <span class="variable language_">this</span>.<span class="property">deleteComment</span></span><br></pre></td></tr></table></figure><p><strong>2、用户注册模块</strong><br>actions部分(验证码部分省略)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户注册</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">userRegister</span>(<span class="params">&#123;commit&#125;,data</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">reqPostRegister</span>(data)</span><br><span class="line">        <span class="keyword">if</span>(result.<span class="property">code</span> === <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(result.<span class="property">message</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>methods注册功能<br>注册成功跳转到登陆页面，并且携带用户账号（个人完善）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">userRegister</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span>&#123;phone,password,code&#125; = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    phone &amp;&amp; password &amp;&amp; code &amp;&amp; <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;userRegister&#x27;</span>,&#123;phone,password,code&#125;)</span><br><span class="line">    <span class="comment">//注册成功跳转到登陆页面，并且携带用户账号</span></span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>,<span class="attr">query</span>:&#123;<span class="attr">name</span>:<span class="variable language_">this</span>.<span class="property">phone</span>&#125;&#125;)</span><br><span class="line">  &#125;<span class="keyword">catch</span> (error)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>this.$store.dispatch(&#39;userRegister&#39;,&#123;phone,password,code&#125;)</code>因为K 、V相同，所以只传K<br>3、登录模块<br>前端部分内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;form &gt;</span><br><span class="line">           &lt;div class=&quot;input-text clearFix&quot;&gt;</span><br><span class="line">             &lt;span&gt;&lt;/span&gt;</span><br><span class="line">             &lt;input type=&quot;text&quot; placeholder=&quot;邮箱/用户名/手机号&quot; v-model=&quot;phone&quot;&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div class=&quot;input-text clearFix&quot;&gt;</span><br><span class="line">             &lt;span class=&quot;pwd&quot;&gt;&lt;/span&gt;</span><br><span class="line">             &lt;input type=&quot;password&quot; placeholder=&quot;请输入密码&quot; v-model=&quot;password&quot;&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div class=&quot;setting clearFix&quot;&gt;</span><br><span class="line">             &lt;label class=&quot;checkbox inline&quot;&gt;</span><br><span class="line">               &lt;input name=&quot;m1&quot; type=&quot;checkbox&quot; value=&quot;2&quot; checked=&quot;&quot;&gt;</span><br><span class="line">               自动登录</span><br><span class="line">             &lt;/label&gt;</span><br><span class="line">             &lt;span class=&quot;forget&quot;&gt;忘记密码？&lt;/span&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;button class=&quot;btn&quot; @click.prevent=&quot;goLogin&quot;&gt;登&amp;nbsp;&amp;nbsp;录&lt;/button&gt;</span><br><span class="line">         &lt;/form&gt;</span><br></pre></td></tr></table></figure><p>由于登录按钮的父节点是一个form表单，如果使用@click触发登录事件，form表单会执行默认事件action实现页面跳转。这里我们使用<code>@click.prevent</code>，它可以阻止自身默认事件的执行。</p><p>actions登陆函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登录</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">userLogin</span>(<span class="params">&#123;commit&#125;,data</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">reqPostLogin</span>(data)</span><br><span class="line">        <span class="comment">//服务器会返回token</span></span><br><span class="line">        <span class="keyword">if</span>(result.<span class="property">code</span> === <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="comment">//token存入vuex</span></span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&quot;SETUSERTOKEN&quot;</span>,result.<span class="property">data</span>.<span class="property">token</span>)</span><br><span class="line">            <span class="comment">//持久化存储token</span></span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;TOKEN&#x27;</span>,result.<span class="property">data</span>.<span class="property">token</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(result.<span class="property">message</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>mutations设置用户token</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置用户token</span></span><br><span class="line">    <span class="title function_">SETUSERTOKEN</span>(<span class="params">state,token</span>)&#123;</span><br><span class="line">        state.<span class="property">token</span> = token</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>登陆组件methods登陆函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">goLogin</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="comment">//会将this中的phone,password以对象的形式返回</span></span><br><span class="line">         <span class="keyword">const</span> &#123;phone,password&#125; = <span class="variable language_">this</span></span><br><span class="line">         phone &amp;&amp; password &amp;&amp; <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;userLogin&#x27;</span>,&#123;phone,password&#125;)</span><br><span class="line">         <span class="comment">//路由跳转到home首页</span></span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/home&#x27;</span>)</span><br><span class="line">       &#125;<span class="keyword">catch</span> (error)&#123;</span><br><span class="line">         <span class="title function_">alert</span>(error)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>登陆成功后获取用户信息<br>actions函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">getUserInfo</span>(<span class="params">&#123;commit&#125;</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">reqGetUserInfo</span>();</span><br><span class="line">        <span class="comment">//将用户信息存储到store中</span></span><br><span class="line">        <span class="keyword">if</span>(result.<span class="property">code</span> === <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="comment">//vuex存储用户信息</span></span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;SETUSERINFO&#x27;</span>,result.<span class="property">data</span>)</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(result.<span class="property">message</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>mutations存储用户信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储用户信息</span></span><br><span class="line">    <span class="title function_">SETUSERINFO</span>(<span class="params">state,data</span>)&#123;</span><br><span class="line">        state.<span class="property">userInfo</span> = data</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h1 id="47、导航守卫"><a href="#47、导航守卫" class="headerlink" title="47、导航守卫"></a>47、导航守卫</h1><p>思路：直接看流程图<br>为什么要判断name？</p><blockquote><p>因为store中的token是通过localStorage获取的，token有存放在本地。当页面刷新时，本地token不会消失，所以store中的token也不会消失。但是，store中的其他数据（用户信息等）会清空，此时会出现用户信息不存在，但是有token，这种情况是不可以访问其他页面的，必须先去获取用户信息。由于用户信息是一个对象，所以我们通过它的一个属性name判断用户信息是否存在。<br>所以不仅要判断token,还要判断用户信息</p></blockquote><p><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/26.png" alt="在这里插入图片描述"></p><p>router index.js全局前置守卫代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置全局导航前置守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="title function_">async</span>(to, <span class="keyword">from</span>, next) =&gt;  &#123;</span><br><span class="line">    <span class="keyword">let</span> token = store.<span class="property">state</span>.<span class="property">user</span>.<span class="property">token</span></span><br><span class="line">    <span class="keyword">let</span> name = store.<span class="property">state</span>.<span class="property">user</span>.<span class="property">userInfo</span>.<span class="property">name</span></span><br><span class="line">    <span class="comment">//1、有token代表登录，全部页面放行</span></span><br><span class="line">    <span class="keyword">if</span>(token)&#123;</span><br><span class="line">        <span class="comment">//1.1登陆了，不允许前往登录页</span></span><br><span class="line">        <span class="keyword">if</span>(to.<span class="property">path</span>===<span class="string">&#x27;/login&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">next</span>(<span class="string">&#x27;/home&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//1.2、因为store中的token是通过localStorage获取的，token有存放在本地</span></span><br><span class="line">            <span class="comment">// 当页面刷新时，token不会消失，但是store中的其他数据会清空，</span></span><br><span class="line">            <span class="comment">// 所以不仅要判断token,还要判断用户信息</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.2.1、判断仓库中是否有用户信息，有放行，没有派发actions获取信息</span></span><br><span class="line">            <span class="keyword">if</span>(name)</span><br><span class="line">                <span class="title function_">next</span>()</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//1.2.2、如果没有用户信息，则派发actions获取用户信息</span></span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;getUserInfo&#x27;</span>)</span><br><span class="line">                    <span class="title function_">next</span>()</span><br><span class="line">                &#125;<span class="keyword">catch</span> (error)&#123;</span><br><span class="line">                    <span class="comment">//1.2.3、获取用户信息失败，原因：token过期</span></span><br><span class="line">                    <span class="comment">//清除前后端token，跳转到登陆页面</span></span><br><span class="line">                    <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;logout&#x27;</span>)</span><br><span class="line">                    <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//2、未登录，首页或者登录页可以正常访问</span></span><br><span class="line">        <span class="keyword">if</span>(to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span> || to.<span class="property">path</span> === <span class="string">&#x27;/home&#x27;</span> || to.<span class="property">path</span>===<span class="string">&#x27;/register&#x27;</span>)</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;请先登录&#x27;</span>)</span><br><span class="line">            <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="48、交易模块"><a href="#48、交易模块" class="headerlink" title="48、交易模块"></a>48、交易模块</h1><p>如果前面的知识你都理解了，后面的模块开发都会比较简单。无非就是老师讲到的开发四步骤<br>（1）封装API<br>（2）vuex三件套<br>（3）dispatch发请求<br>（4）数据渲染<br><strong>注意：</strong>（3）中，如果在发请求之后还有一些对返回数据的操作，应考虑到是否需要async await。<br><strong>至此，个人认为本项目中的vue前端知识点应该就这些了，后面的相关组件开发，用到的知识在前面都有使用。如果有新知识，会继续更新。</strong></p><p>————————————————-分割线——————————————–</p><p>但是，你一定希望将支付二维码换为你自己的二维码！<br>如果你直接使用项目中的图片,会出现图片损坏的图标。<br>解决方法：将你的二维码图片放入在博客文章中，然后就可以获取该图片的链接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">return</span>&#123;</span><br><span class="line">       <span class="attr">payInfo</span>:&#123;&#125;,</span><br><span class="line">       <span class="comment">//支付二维码</span></span><br><span class="line">       <span class="attr">payImg</span>: <span class="string">&#x27;https://img-blog.csdnimg.cn/6d82f91e804545cc90d9182bc57ea4ad.jpg?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5q-b5q-b6Jmr5ZGc5ZGc,size_19,color_FFFFFF,t_70,g_se,x_16&#x27;</span>,</span><br><span class="line">       <span class="attr">timer</span>:<span class="literal">null</span>,<span class="comment">//支付定时器</span></span><br><span class="line">       <span class="attr">code</span>: <span class="string">&#x27;&#x27;</span>,<span class="comment">//支付状态码</span></span><br><span class="line">     &#125;&#125;,</span><br></pre></td></tr></table></figure><p>下面代码中涉及到计时器<a href="https://www.cnblogs.com/lengyuehuahun/p/5650030.html">setInterval()与setTimeout()计时器</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击支付按钮，弹出支付二维码</span></span><br><span class="line">     <span class="keyword">async</span> <span class="title function_">opens</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">       <span class="variable language_">this</span>.$alert(<span class="string">`&lt;img height=&quot;200px&quot; width=&quot;200px&quot; src=&quot;<span class="subst">$&#123;<span class="variable language_">this</span>.payImg&#125;</span>&quot;  / &gt;`</span>, <span class="string">&#x27;请使用微信扫码&#x27;</span>, &#123;</span><br><span class="line">         <span class="attr">dangerouslyUseHTMLString</span>: <span class="literal">true</span>,</span><br><span class="line">         <span class="attr">showCancelButton</span>: <span class="literal">true</span>,</span><br><span class="line">         <span class="attr">center</span>: <span class="literal">true</span></span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//需要知道订单是否支付成功</span></span><br><span class="line">       <span class="comment">//成功则跳转，失败则提示信息</span></span><br><span class="line">       <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">timer</span>)&#123;</span><br><span class="line">         <span class="comment">//定时器间歇发送请求获取订单支付状态</span></span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">           <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$API</span>.<span class="title function_">reqGetPayStatus</span>(<span class="variable language_">this</span>.<span class="property">payInfo</span>.<span class="property">orderId</span>)</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">           <span class="comment">//因为每次支付都要花钱，所以直接205（支付中）就跳转了，</span></span><br><span class="line">           <span class="keyword">if</span>(result.<span class="property">code</span> === <span class="number">205</span>)&#123;</span><br><span class="line">             <span class="comment">//1、清除定时器</span></span><br><span class="line">             <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">             <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span></span><br><span class="line">             <span class="comment">//2、保存支付成功返回的code</span></span><br><span class="line">             <span class="variable language_">this</span>.<span class="property">code</span> = result.<span class="property">code</span></span><br><span class="line">             <span class="comment">//3、关闭弹出框</span></span><br><span class="line">             <span class="variable language_">this</span>.<span class="property">$msgbox</span>.<span class="title function_">close</span>()</span><br><span class="line">             <span class="comment">//4、跳转到下一个路由</span></span><br><span class="line">             <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/paysuccess&#x27;</span>)</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;,<span class="number">1000</span>)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>效果展示<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/27.png" alt="在这里插入图片描述"><br>如果code&#x3D;&#x3D;&#x3D;200跳转，我们必须支付后台提供的二维码，才会返回200，所以这里直接205就跳转了，后面的支付信息感觉没有意义了。所以，后面的支付内容就不写了。</p><h2 id="Vue图片引入"><a href="#Vue图片引入" class="headerlink" title="Vue图片引入"></a>Vue图片引入</h2><p>因为在引入我们个人支付二维码图片遇到了一些问题，所以这里就介绍一下图片引入的方式。<br>图片引入分两种：js内引入图片，非js内引入图片。</p><p><strong>非js内引入图片（html）</strong>：一般都是通过路径引入，例如：<code>&lt;img  src=&quot;../assets/pay.jpg&quot;&gt;</code>。</p><p><strong>js内引入图片</strong>: 可分为通过路径引入和不通过路径引入。<br>1、如果想要通过<strong>路径方式</strong>在vue中的js引入图片，<strong>必须require引入</strong>。<br>例如：js中引入个人支付二维码可以通过下面方式实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$alert(<span class="string">`&lt;img height=&quot;200px&quot; width=&quot;200px&quot; src=&quot;<span class="subst">$&#123;<span class="built_in">require</span>(<span class="string">&#x27;@/assets/pay.jpg&#x27;</span>)&#125;</span>&quot;  / &gt;`</span>, <span class="string">&#x27;请使用微信扫码&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">dangerouslyUseHTMLString</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">showCancelButton</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">center</span>: <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>2、当然也可以不使用require，如果使用require，就不能通过路径方式引入。有两种方式：<br>（1）直接引入网页图片链接（前面引入个人收款码就是通过该方法实现）<br>（2）在&lt; script &gt;中通过import导入图片，然后在js中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> payImg  <span class="keyword">from</span> <span class="string">&#x27;@/assets/pay.jpg&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">      <span class="comment">//点击支付按钮，弹出支付二维码1</span></span><br><span class="line">      <span class="keyword">async</span> <span class="title function_">opens</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.$alert(<span class="string">`&lt;img height=&quot;200px&quot; width=&quot;200px&quot; src=&quot;<span class="subst">$&#123;<span class="built_in">require</span>(<span class="string">&#x27;@/assets/pay.jpg&#x27;</span>)&#125;</span>&quot;  / &gt;`</span>, <span class="string">&#x27;请使用微信扫码&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">dangerouslyUseHTMLString</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">showCancelButton</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">center</span>: <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/ze1024/article/details/108713082">图片引入参考链接</a></p><h1 id="49、个人中心"><a href="#49、个人中心" class="headerlink" title="49、个人中心"></a>49、个人中心</h1><p>终于用到了二级路由，虽然二级路由在后台管理系统常用，但是我们的个人中心也可以用到二级路由。<br>routers.js<br><strong>注意：</strong> 二级路由要么不写&#x2F;，要么写全：’&#x2F;center&#x2F;myorder’。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//个人中心</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Center&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/center&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:  <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/pages/Center&#x27;</span>),</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//二级路由要么不写/，要么写全：&#x27;/center/myorder&#x27;</span></span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;myorder&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/pages/Center/MyOrder&#x27;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;groupbuy&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/pages/Center/GroupOrder&#x27;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//默认显示</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">redirect</span>: <span class="string">&#x27;myorder&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>             &#123;                 path: &#39;&#39;,                 redirect: &#39;myorder&#39;            &#125;</code>表示当我们访问center路由时，center中的router-view部分默认显示myorder二级路由内容。<br>我们的子路由最好放在父路由文件夹下，如下所示。<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/28.png" alt="在这里插入图片描述"><br><strong>警告</strong><br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/29.png" alt="在这里插入图片描述"><br>图中内容如下：</p><blockquote><p>Named Route ‘Center’ has a default child route. When navigating to this named route (:to&#x3D;”{name: ‘Center’”), the default child route will not be rendered. Remove the name from this route and use the name of the default child route for named links instead.</p></blockquote><p>对应的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//个人中心</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Center&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/center&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:  <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/pages/Center&#x27;</span>),</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//二级路由要么不写/，要么写全：&#x27;/center/myorder&#x27;</span></span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;/center/myorder&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/pages/Center/MyOrder&#x27;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;/center/groupbuy&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/pages/Center/GroupOrder&#x27;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//默认显示</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">redirect</span>: <span class="string">&#x27;myorder&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>总结警告缘由</strong>：当某个路由有子级路由时，父级路由须要一个默认的路由，因此父级路由不能定义name属性，解决办法是去掉name:’Center’就好了。</p><p>我的订单部分使用到了之前写的分页器组件，当我再次使用时，我发现我已经快忘记这个分页器怎么写的了。个人觉得需要勤复习之前的知识点。<br><strong>老师这个手写的分页器很nice，涉及到一些分页逻辑还有父子双向通信</strong></p><h1 id="50、路由独享的守卫"><a href="#50、路由独享的守卫" class="headerlink" title="50、路由独享的守卫(*****)"></a>50、路由独享的守卫(*****)</h1><p>全局导航守卫已经帮助我们限制未登录的用户不可以访问相关页面。但是还会有一个问题。<br>例如：</p><blockquote><p>用户已经登陆，用户在home页直接通过地址栏访问trade结算页面，发现可以成功进入该页面，正常情况，用户只能通过在shopcart页面点击去结算按钮才可以到达trade页面。我们可以通过路由独享守卫解决该问题</p></blockquote><p>路由独享的守卫：只针对一个路由的守卫，所以该守卫会定义在某个路由中。<br>以上面问题为例，我们可以通过路由独享的守卫解决。<br>在trade路由信息中加入路由独享守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//交易组件</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Trade&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/trade&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123;<span class="attr">show</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">        <span class="attr">component</span>:  <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/pages/Trade&#x27;</span>),</span><br><span class="line">        <span class="comment">//路由独享首位</span></span><br><span class="line">        <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">          </span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">from</span>.<span class="property">path</span> ===  <span class="string">&#x27;/shopcart&#x27;</span> )&#123;</span><br><span class="line">                <span class="title function_">next</span>()</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">next</span>(<span class="literal">false</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>上面的代码已经实现了trade路由只能从shopcart路由跳转。<code>next(false)</code>指回到from路由。<br>但是，上面的代码还会有bug，就是当我们在shopcart页面通过地址栏访问trade时还是会成功。正常情况应该是只有当我们点击<strong>去结算按钮</strong>后才可以进入到trade页面。（这只是我个人观点）<br><strong>解决办法：</strong><br>在shopcart路由信息<strong>meta</strong>中加一个<strong>flag</strong>，初始值为false。当点击去结算按钮后，将flag置为true。在trade的独享路由守卫中判断一下flag是否为true，当flag为true时，代表是通过点击去结算按钮跳转的，所以就放行。<br>shopcart路由信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//购物车</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="attr">path</span>: <span class="string">&quot;/shopcart&quot;</span>,</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;ShopCart&#x27;</span>,</span><br><span class="line">       <span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/ShopCart&#x27;</span>),</span><br><span class="line">       <span class="attr">meta</span>:&#123;<span class="attr">show</span>: <span class="literal">true</span>,<span class="attr">flag</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>shopcart组件去结算按钮触发事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">toTrade</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">meta</span>.<span class="property">flag</span> = <span class="literal">true</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/trade&#x27;</span>)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>trade路由信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//交易组件</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Trade&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/trade&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123;<span class="attr">show</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">        <span class="attr">component</span>:  <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/pages/Trade&#x27;</span>),</span><br><span class="line">        <span class="comment">//路由独享首位</span></span><br><span class="line">        <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">from</span>.<span class="property">path</span> ===  <span class="string">&#x27;/shopcart&#x27;</span> &amp;&amp; <span class="keyword">from</span>.<span class="property">meta</span>.<span class="property">flag</span> === <span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">from</span>.<span class="property">meta</span>.<span class="property">flag</span> = <span class="literal">false</span></span><br><span class="line">                <span class="title function_">next</span>()</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">next</span>(<span class="literal">false</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p><strong>注意，判断通过后，在跳转之前一定要将flag置为false。</strong></p><h1 id="51、图片懒加载"><a href="#51、图片懒加载" class="headerlink" title="51、图片懒加载"></a>51、图片懒加载</h1><p><a href="https://www.npmjs.com/package/vue-lazyload">懒加载vue-lazyload插件官网</a><br>插件的使用直接参考官方教程，很简单。</p><h2 id="vue使用插件的原理"><a href="#vue使用插件的原理" class="headerlink" title="vue使用插件的原理"></a>vue使用插件的原理</h2><p>每个插件都会有一个install方法，install后就可以在我们的代码中可以使用该插件。这个install有两类参数，第一个为Vue实例，后面的参数可以自定义。<br>vue使用插件的步骤<br>1、引入插件 <code>import VueLazyload from &quot;vue-lazyload&quot;;</code><br>2、注册插件<code>Vue.use(VueLazyload)</code><br>这里的Vue.use()实际上就是调用了插件的install方法。如此之后，我们就可以使用该插件了。</p><h1 id="52、表单验证"><a href="#52、表单验证" class="headerlink" title="52、表单验证"></a>52、表单验证</h1><p>表单验证个人推荐使用element ui的from表单验证，看一下官网的示例就会用。<br><a href="https://element.eleme.cn/#/zh-CN/component/form">element ui  from表单验证链接</a></p><h1 id="53、路由懒加载"><a href="#53、路由懒加载" class="headerlink" title="53、路由懒加载"></a>53、路由懒加载</h1><p>原来我一直使用的import()是路由懒加载，哈哈!，</p><p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。<br><a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html">路由懒加载链接</a><br>我还是喜欢下面的写法，不太喜欢官网的写法。<br>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//详情页面组件</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">//需要params传参（产品id）</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/detail/:skuId&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Detail&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/Detail&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>:&#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//添加购物车成功</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/addcartsuccess&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;AddCartSuccess&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/AddCartSuccess&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>:&#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h1 id="54、打包项目"><a href="#54、打包项目" class="headerlink" title="54、打包项目"></a>54、打包项目</h1><p>项目到此基本就完成了，接下来就是打包上线。在项目文件夹下执行<code>npm run build</code>。会生成dist打包文件。<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/30.png" alt="在这里插入图片描述"><br>dist就是我们打包好的项目文件<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/31.png" alt="在这里插入图片描述"><br>dist文件下的js文件存放我们所有的js文件，并且经过了加密，并且还会生成对应的map文件。</p><p><strong>map文件作用</strong>：因为代码是经过加密的，如果运行时报错，输出的错误信息无法准确得知时那里的代码报错。有了map就可以向未加密的代码一样，准确的输出是哪一行那一列有错。</p><p>当然map文件也可以去除（map文件大小还是比较大的）<br>在vue.config.js配置<code>productionSourceMap: false</code>即可。<br>注意：vue.config.js配置改变，需要重启项目<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/32.png" alt="在这里插入图片描述"></p><h1 id="55、Vue新知识点（只针对个人）"><a href="#55、Vue新知识点（只针对个人）" class="headerlink" title="55、Vue新知识点（只针对个人）"></a>55、Vue新知识点（只针对个人）</h1><h2 id="1、DOM、事件、props个人理解"><a href="#1、DOM、事件、props个人理解" class="headerlink" title="1、DOM、事件、props个人理解"></a>1、DOM、事件、props个人理解</h2><p>在vue中标签可以分为两类：<br>（1）原生DOM。<code>&lt;input&gt;&lt;buttonn&gt;</code>等。<br>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button  @click=<span class="string">&quot;handle&quot;</span> :msg=<span class="string">&quot;msg&quot;</span>&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这里的@click是原生DOM事件，也就是我们传统的点击触发事件。<br> 这里的:msg就是绑定组件中的变量。</p></blockquote><p>（2）自定义组件。比如我们之前自定义的分页器组件例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">PageNation</span> @click=<span class="string">&quot;getPageNo&quot;</span></span><br><span class="line">:pageNo=<span class="string">&quot;searchParams.pageNo&quot;</span></span><br><span class="line">:pageSize=<span class="string">&quot;searchParams.pageSize&quot;</span></span><br><span class="line">:total=<span class="string">&quot;totals&quot;</span> </span><br><span class="line">:continues=<span class="string">&quot;5&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这里的@click并不是原生DOM事件，而是我们自定义的事件。我们通常使用此类自定义事件实现子组件给父组件通信。（即在子组件中会有事件名为click的自定义事件）<br>这里的:pageNo是props，可以实现父组件给子组件传递信息。</p></blockquote><p><strong>注意</strong>：刚开始这里有一个问题，我们上面:continues&#x3D;”5”传递的明明是一个常量为什么还需要v-bind绑定事件呢？<br>官方解释</p><blockquote><p>传递字符串常量：<code>&lt;blog-post title=&quot;My journey with Vue&quot;&gt;&lt;/blog-post&gt;</code><br>传入一个数字 即便 <code>42</code> 是常量，我们仍然需要 <code>v-bind</code> 来告诉 Vue。这是一个 JavaScript 表达式而不是一个字符串 <code>&lt;blog-post v-bind:likes=&quot;42&quot;&gt;&lt;/blog-post&gt;</code></p></blockquote><p><a href="https://cn.vuejs.org/v2/guide/components-props.html">props官方文档</a><br><strong>总结</strong>：原生DOM标签和自定义组件标签对v-bind和v-on的使用是不同的，含义也是不同的。</p><h2 id="2、ref使用"><a href="#2、ref使用" class="headerlink" title="2、ref使用"></a>2、ref使用</h2><p>我们可以通过ref获取组件的信息，并且可以写该组件的信息：<br>例如：<strong>父组件想要获取子组件的信息或者修改子组件的数据</strong>，就可以通过ref获取。</p><p><strong>使用步骤</strong>：</p><blockquote><p>（1）在被操作的标签定义ref&#x3D;”name”<br>（2）在父组件可以通过this.$refs.name获取标签的全部信息，也可以进行数据的修改。</p></blockquote><p><a href="https://www.cnblogs.com/xumqfaith/p/7743387.html">ref使用参考链接</a></p><h2 id="3、-children-parent使用"><a href="#3、-children-parent使用" class="headerlink" title="3、$ children $parent使用"></a>3、$ children $parent使用</h2><blockquote><p>在56小节中讲到，如果我们父组件想要获取修改子组件信息，可以通过ref实现。但是，当子组件较多时，就会出现多次的$refs操作，会十分的麻烦。所以，引入了children属性。</p></blockquote><p><strong>children 属性</strong><br>每个组件都有children属性，可以通过this.$ children操作，该属性会返回当前组件的所有子组件信息，接下来就可以实现子组件信息的获取和修改。<br><strong>parent属性</strong><br>了解了children属性，那么parent也比较好理解。子组件可以通过parent属性获取父组件的全部信息，同样也可以修改父组件的信息。</p><p><strong>例题</strong>：想要通过点击子组件，使得父组件的money变量减100。</p><blockquote><p>不使用parents：子组件通过之前常用的自定事件来通知父组件修改money，然后父组件money执行减操作。<br>使用parents：子组件直接通过this.$parent属性获取父组件，然后在子组件内部对money执行减操作。</p></blockquote><h2 id="4、插槽使用"><a href="#4、插槽使用" class="headerlink" title="4、插槽使用"></a>4、插槽使用</h2><p>插槽也是可以用来传数据的<br>子组件HintButton </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span>  <span class="attr">:item1</span>=<span class="string">&quot;&#123;&#x27;a&#x27;:1,&#x27;b&#x27;:2&#125;&quot;</span> <span class="attr">item2</span>=<span class="string">&quot;asd1&quot;</span>&gt;</span>e了吗<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">HintButton</span> <span class="attr">title</span>=<span class="string">&quot;提示&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handler&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slopProps&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;slopProps&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;slopProps.item1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in slopProps.item1&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;----&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">HintButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>插槽的原理就是在子组件（HintButton）内定义一个slot（插槽），父组件可以向该插槽内插入数据。</strong><br>父组件向子组件传递信息还是通过props传递，这里就不多做赘述。<br>子组件想父组件传递信息时可以通过插槽传递。</p><blockquote><p>（1）在子组件HintButton的slot内绑定要传递的数据。<br>（2） 父组件通过v-slot:default&#x3D;”slotProps”可以接收到全部的信息。</p></blockquote><p>箭头所指内容就是子组件通过插槽传递给父组件的信息。接受的数据是键值对的形式。<br><img src="/../images/%E5%B0%9A%E5%93%81%E6%B1%87%E6%80%BB%E7%BB%93/33.png" alt="在这里插入图片描述"></p><p><a href="https://cn.vuejs.org/v2/guide/components-slots.html#%E6%8F%92%E6%A7%BD%E5%86%85%E5%AE%B9">插槽官方链接</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前端Vue核心&quot;&gt;&lt;a href=&quot;#前端Vue核心&quot; class=&quot;headerlink&quot; title=&quot;前端Vue核心&quot;&gt;&lt;/a&gt;前端Vue核心&lt;/h1&gt;&lt;p&gt;开发一个前端模块可以概括为以下几个步骤：&lt;br&gt;（1）写静态页面、拆分为静态组件；&lt;br&gt;（2）发请求（API）；&lt;br&gt;（3）vuex（actions、mutations、state三连操作）；&lt;br&gt;（4）组件获取仓库数据，动态展示；&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://ntostudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>DFS算法</title>
    <link href="https://ntostudy.github.io/2024/07/15/DFS%E7%AE%97%E6%B3%95/"/>
    <id>https://ntostudy.github.io/2024/07/15/DFS%E7%AE%97%E6%B3%95/</id>
    <published>2024-07-15T10:44:01.000Z</published>
    <updated>2024-07-15T11:45:46.995Z</updated>
    
    <content type="html"><![CDATA[<p>深度优先搜索是图的一种搜索方式，以深度为优先级去进行搜索，通俗地说就是”不撞南墙不回头”，对于当前正在搜索的路径而言，只有把当前路径给搜索完了，即走到无路可走时，才回返回进而搜索另一条路。</p><span id="more"></span>  <p>假设我们有一个二叉树，共有10个节点，以下是DFS的简单示范：<img src="/../images/DFS%E7%AE%97%E6%B3%95/1.png" alt="在这里插入图片描述"></p><p>从根节点开始向下搜索<br><img src="/../images/DFS%E7%AE%97%E6%B3%95/2.png" alt="在这里插入图片描述"></p><p>然后搜索到2号节点<br><img src="/../images/DFS%E7%AE%97%E6%B3%95/3.png" alt="在这里插入图片描述"></p><p>继续不断向深层处的节点搜索，搜索到4号节点<img src="/../images/DFS%E7%AE%97%E6%B3%95/4.png" alt="在这里插入图片描述"></p><p>最后搜索到7号节点<img src="/../images/DFS%E7%AE%97%E6%B3%95/5.png" alt="在这里插入图片描述"></p><p>当搜索到7号节点后，我们发现无路可走了，因为7号节点是当前这条路径下最深处的节点，因此，我们需要进行回溯操作<img src="/../images/DFS%E7%AE%97%E6%B3%95/6.png" alt="在这里插入图片描述"></p><p>当回溯到4号节点时，我们发现4号节点并没有另一条路，也就是说从4号节点向下搜索的话，只能搜索到7号节点，但是可是刚刚才从7号节点回溯上来诶，我们总不可能又搜索到7号，然后又回溯到4号无限下去吧……所以，我们得再次回溯，也就是跳到2号节点上。<br><img src="/../images/DFS%E7%AE%97%E6%B3%95/7.png" alt="在这里插入图片描述"></p><p>当再次跳到2号节点上时，我们发现从2号节点开始，还有另一条路可以走。那我们就走下去！<br><img src="/../images/DFS%E7%AE%97%E6%B3%95/8.png" alt="在这里插入图片描述"></p><p>此时又有两条路可以走，我们先去往8号<br><img src="/../images/DFS%E7%AE%97%E6%B3%95/9.png" alt="在这里插入图片描述"></p><p>走到8号，我们发现又走到头了，那就再对它使用回溯吧！！！<br><img src="/../images/DFS%E7%AE%97%E6%B3%95/10.png" alt="在这里插入图片描述"></p><p>这次我们选择另一条路，走到9号<img src="/../images/DFS%E7%AE%97%E6%B3%95/11.png" alt="在这里插入图片描述"></p><p>然后我们发现又双走到头了，因此，再次回溯，从9号跳到5号，再跳到2号，然后再跳到1号(因为5号，2号向下的路我们已经走过了，但我们发现1号节点向下的路还有一条是我们没走过滴)<br><img src="/../images/DFS%E7%AE%97%E6%B3%95/12.png" alt="在这里插入图片描述"></p><p>接下来搜索类似，我们走到3号，然后走到6号，然后走到10号<img src="/../images/DFS%E7%AE%97%E6%B3%95/13.png" alt="在这里插入图片描述"><br><img src="/../images/DFS%E7%AE%97%E6%B3%95/14.png" alt=" "></p><p><img src="/../images/DFS%E7%AE%97%E6%B3%95/15.png" alt="在这里插入图片描述"></p><p>当10号走完后，这颗树的每个节点都被搜索过了，最后回溯到根节点<br><img src="/../images/DFS%E7%AE%97%E6%B3%95/16.png" alt="在这里插入图片描述"></p><p>值得一提的是，深搜作为一种算法来说，并没有像二分等这些算法有固定的模板，我更愿意把它当作一种思想。如何实现DFS呢，我们通常用栈(递归来实现)。我们做题时通常会写一个dfs函数，然后在dfs函数内部，又会不断调用dfs函数，通常像下面看到的这样：</p><p>以下是自我总结的模版</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> step)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(到达目的地)</span><br><span class="line">        输出</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=方案数;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(方案可行)</span><br><span class="line">        &#123;</span><br><span class="line">  保存路径;</span><br><span class="line">           dfs(step+<span class="number">1</span>);</span><br><span class="line">           回溯</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题1<img src="/../images/DFS%E7%AE%97%E6%B3%95/17.png" alt="请添加图片描述"><br>题解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">1000010</span>];<span class="comment">//记录值</span></span><br><span class="line"><span class="type">bool</span> st[<span class="number">1000010</span>];<span class="comment">//记录是否用过这个数值</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> step)</span><span class="comment">//当前所走的步数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (step == n + <span class="number">1</span>)<span class="comment">//当前所走的步数为总步数加一 则说明已经走完了</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//输出走的每一步的值；</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果走的这一步没有到总步数加一</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">//从1号位开始搜</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (st[i] == <span class="literal">false</span>)<span class="comment">//如果i这个数没有被查到过</span></span><br><span class="line">&#123;</span><br><span class="line">ans[step] = i;<span class="comment">//将i的值赋值给第step步数</span></span><br><span class="line">st[i] = <span class="literal">true</span>;<span class="comment">//标记 i 这个值已经被用过;</span></span><br><span class="line">dfs(step + <span class="number">1</span>);<span class="comment">//向 step的下一步走;</span></span><br><span class="line">st[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题2<br><img src="/../images/DFS%E7%AE%97%E6%B3%95/18.png" alt="请添加图片描述"><br>题解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> n, r;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">1000010</span>];</span><br><span class="line"><span class="type">bool</span> st[<span class="number">1000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> step)</span><span class="comment">//num代表当前数字的值 step代表当前的步数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (step == r + <span class="number">1</span>)<span class="comment">//当前所走的步数为总步数加一 则说明已经走完了</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= r; i++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">//输出走的每一步的值；</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果走的这一步没有到总步数加一</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = num + <span class="number">1</span>; i &lt;= n; i++) <span class="comment">// 从 i 号位开始搜</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (st[i] == <span class="literal">false</span>) <span class="comment">//如果i这个数没有被查到过</span></span><br><span class="line">&#123;</span><br><span class="line">ans[step] = i; <span class="comment">//将i的值赋值给ans[step]</span></span><br><span class="line">st[i] = <span class="literal">true</span>; <span class="comment">//标记</span></span><br><span class="line">dfs(i, step + <span class="number">1</span>); <span class="comment">//搜索下一步</span></span><br><span class="line">st[i] = <span class="literal">false</span>; <span class="comment">//清除标记</span></span><br><span class="line">ans[step] = <span class="number">0</span>; <span class="comment">//抹除值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r;</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;深度优先搜索是图的一种搜索方式，以深度为优先级去进行搜索，通俗地说就是”不撞南墙不回头”，对于当前正在搜索的路径而言，只有把当前路径给搜索完了，即走到无路可走时，才回返回进而搜索另一条路。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://ntostudy.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://ntostudy.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>vue基础知识1</title>
    <link href="https://ntostudy.github.io/2024/06/22/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/"/>
    <id>https://ntostudy.github.io/2024/06/22/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/</id>
    <published>2024-06-22T01:23:13.000Z</published>
    <updated>2024-07-15T11:44:01.008Z</updated>
    
    <content type="html"><![CDATA[<p>这里是vue学习过程中第一天的知识点</p><span id="more"></span>    <h1 id="day01"><a href="#day01" class="headerlink" title="day01"></a>day01</h1><h2 id="一、为什么要学习Vue"><a href="#一、为什么要学习Vue" class="headerlink" title="一、为什么要学习Vue"></a>一、为什么要学习Vue</h2><p>1.前端必备技能</p><p>2.岗位多，绝大互联网公司都在使用Vue</p><p>3.提高开发效率</p><p>4.高薪必备技能（Vue2+Vue3）</p><h2 id="二、什么是Vue"><a href="#二、什么是Vue" class="headerlink" title="二、什么是Vue"></a>二、什么是Vue</h2><p>概念：Vue (读音 &#x2F;vjuː&#x2F;，类似于 view) 是一套 **构建用户界面 ** 的 <strong>渐进式</strong> <strong>框架</strong></p><p>Vue2官网：<a href="https://v2.cn.vuejs.org/">https://v2.cn.vuejs.org/</a></p><h3 id="1-什么是构建用户界面"><a href="#1-什么是构建用户界面" class="headerlink" title="1.什么是构建用户界面"></a>1.什么是构建用户界面</h3><p><strong>基于数据</strong>渲染出用户可以看到的<strong>界面</strong></p><p><img src="/../images/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/1681875887026.png"></p><h3 id="2-什么是渐进式"><a href="#2-什么是渐进式" class="headerlink" title="2.什么是渐进式"></a>2.什么是渐进式</h3><p>所谓渐进式就是循序渐进，不一定非得把Vue中的所有API都学完才能开发Vue，可以学一点开发一点</p><h4 id="Vue的两种开发方式："><a href="#Vue的两种开发方式：" class="headerlink" title="Vue的两种开发方式："></a>Vue的两种开发方式：</h4><ol><li><p>Vue核心包开发</p><p>场景：局部模块改造</p></li><li><p>Vue核心包&amp;Vue插件&amp;工程化</p><p>场景：整站开发</p></li></ol><h3 id="3-什么是框架"><a href="#3-什么是框架" class="headerlink" title="3.什么是框架"></a>3.什么是框架</h3><p>所谓框架：就是一套完整的解决方案</p><p><strong>举个栗子</strong></p><p>如果把一个完整的项目比喻为一个装修好的房子，那么框架就是一个毛坯房。</p><p>我们只需要在“毛坯房”的基础上，增加功能代码即可。</p><p>提到框架，不得不提一下库。</p><ul><li>库，类似工具箱，是一堆方法的集合，比如 axios、lodash、echarts等</li><li>框架，是一套完整的解决方案，实现了大部分功能，我们只需要按照一定的规则去编码即可。</li></ul><p>下图是 库 和 框架的对比。</p><p><img src="/../images/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/1681876620277.png"></p><p>框架的特点：有一套必须让开发者遵守的<strong>规则</strong>或者<strong>约束</strong></p><p>咱们学框架就是学习的这些规则 <a href="https://v2.cn.vuejs.org/">官网</a></p><h3 id="总结：什么是Vue？"><a href="#总结：什么是Vue？" class="headerlink" title="总结：什么是Vue？"></a>总结：什么是Vue？</h3><p>Vue是什么：</p><p>什么是构建用户界面：</p><p>什么是渐进式：</p><p>什么是框架：</p><h2 id="三、创建Vue实例"><a href="#三、创建Vue实例" class="headerlink" title="三、创建Vue实例"></a>三、创建Vue实例</h2><p>我们已经知道了Vue框架可以 基于数据帮助我们渲染出用户界面，那应该怎么做呢？</p><p><img src="/../images/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/1681877190137.png"></p><p>比如就上面这个数据，基于提供好的msg 怎么渲染后右侧可展示的数据呢？</p><p><strong>核心步骤（4步）：</strong></p><ol><li>准备容器</li><li>引包（官网） — 开发版本&#x2F;生产版本</li><li>创建Vue实例  new Vue()</li><li>指定配置项，渲染数据<ol><li>el:指定挂载点</li><li>data提供数据</li></ol></li></ol><p><img src="/../images/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/1681877405007.png"></p><p><strong>总结：创建Vue实例需要执行哪4步</strong></p><h2 id="四、插值表达式"><a href="#四、插值表达式" class="headerlink" title="四、插值表达式 { { } }"></a>四、插值表达式 { { } }</h2><p>插值表达式是一种Vue的模板语法</p><p>我们可以用插值表达式渲染出Vue提供的数据</p><p><img src="/../images/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/1681886494417.png"></p><h3 id="1-作用：利用表达式进行插值，渲染到页面中"><a href="#1-作用：利用表达式进行插值，渲染到页面中" class="headerlink" title="1.作用：利用表达式进行插值，渲染到页面中"></a>1.作用：利用表达式进行插值，渲染到页面中</h3><p>表达式：是可以被求值的代码，JS引擎会讲其计算出一个结果</p><p>以下的情况都是表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">money + <span class="number">100</span></span><br><span class="line">money - <span class="number">100</span></span><br><span class="line">money * <span class="number">10</span></span><br><span class="line">money / <span class="number">10</span> </span><br><span class="line">price &gt;= <span class="number">100</span> ? <span class="string">&#x27;真贵&#x27;</span>:<span class="string">&#x27;还行&#x27;</span></span><br><span class="line">obj.<span class="property">name</span></span><br><span class="line">arr[<span class="number">0</span>]</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line">obj.<span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><p>插值表达式语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;h3&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;nickName.toUpperCase()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;age &gt;= 18 ? &#x27;成年&#x27;:&#x27;未成年&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;obj.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fn()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="3-错误用法"><a href="#3-错误用法" class="headerlink" title="3.错误用法"></a>3.错误用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>在插值表达式中使用的数据 必须在data中进行了提供</span><br><span class="line">&lt;p&gt;&#123;&#123;hobby&#125;&#125;&lt;<span class="regexp">/p&gt;  /</span>/如果在data中不存在 则会报错</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>支持的是表达式，而非语句，比如：<span class="keyword">if</span>   <span class="keyword">for</span> ...</span><br><span class="line">&lt;p&gt;&#123;&#123;<span class="keyword">if</span>&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>不能在标签属性中使用 &#123;&#123;  &#125;&#125; 插值 (插值表达式只能标签中间使用)</span><br><span class="line">&lt;p title=<span class="string">&quot;&#123;&#123;username&#125;&#125;&quot;</span>&gt;我是P标签&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p>1.插值表达式的作用是什么</p><p>2.语法是什么</p><p>3.插值表达式的注意事项</p><h2 id="五、响应式特性"><a href="#五、响应式特性" class="headerlink" title="五、响应式特性"></a>五、响应式特性</h2><h3 id="1-什么是响应式？"><a href="#1-什么是响应式？" class="headerlink" title="1.什么是响应式？"></a>1.什么是响应式？</h3><p>​简单理解就是数据变，视图对应变。 </p><h3 id="2-如何访问-和-修改-data中的数据（响应式演示）"><a href="#2-如何访问-和-修改-data中的数据（响应式演示）" class="headerlink" title="2.如何访问 和 修改 data中的数据（响应式演示）"></a>2.如何访问 和 修改 data中的数据（响应式演示）</h3><p>data中的数据, 最终会被添加到实例上</p><p>① 访问数据： “实例.属性名”</p><p>② 修改数据： “实例.属性名”&#x3D; “值”</p><p><img src="/../images/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/1681888539340.png"></p><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><ol><li>什么是响应式</li><li>如何访问和修改data中的数据呢</li></ol><h2 id="六、Vue开发者工具安装"><a href="#六、Vue开发者工具安装" class="headerlink" title="六、Vue开发者工具安装"></a>六、Vue开发者工具安装</h2><ol><li>通过谷歌应用商店安装（国外网站）</li><li>极简插件下载（推荐） <a href="https://chrome.zzzmh.cn/index">https://chrome.zzzmh.cn/index</a></li></ol><p>安装步骤：</p><p><img src="/../images/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/1681889302166.png"></p><p>安装之后可以F12后看到多一个Vue的调试面板</p><p><img src="/../images/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/1681889390406.png"></p><h2 id="七、Vue中的常用指令"><a href="#七、Vue中的常用指令" class="headerlink" title="七、Vue中的常用指令"></a>七、Vue中的常用指令</h2><p><strong>概念：</strong>指令（Directives）是 Vue 提供的带有 <strong>v- 前缀</strong> 的 特殊 标签<strong>属性</strong>。</p><p>为啥要学：提高程序员操作 DOM 的效率。</p><p>vue 中的指令按照不同的用途可以分为如下 6 大类：</p><ul><li>内容渲染指令（v-html、v-text）</li><li>条件渲染指令（v-show、v-if、v-else、v-else-if）</li><li>事件绑定指令（v-on）</li><li>属性绑定指令 （v-bind）</li><li>双向绑定指令（v-model）</li><li>列表渲染指令（v-for）</li></ul><p>指令是 vue 开发中最基础、最常用、最简单的知识点。</p><h2 id="八、内容渲染指令"><a href="#八、内容渲染指令" class="headerlink" title="八、内容渲染指令"></a>八、内容渲染指令</h2><p>内容渲染指令用来辅助开发者渲染 DOM 元素的文本内容。常用的内容渲染指令有如下2 个：</p><ul><li><p>v-text（类似innerText）</p></li><li><ul><li>使用语法：<code>&lt;p v-text=&quot;uname&quot;&gt;hello&lt;/p&gt;</code>，意思是将 uame 值渲染到 p 标签中</li><li>类似 innerText，使用该语法，会覆盖 p 标签原有内容</li></ul></li><li><p>v-html（类似 innerHTML）</p></li><li><ul><li>使用语法：<code>&lt;p v-html=&quot;intro&quot;&gt;hello&lt;/p&gt;</code>，意思是将 intro 值渲染到 p 标签中</li><li>类似 innerHTML，使用该语法，会覆盖 p 标签原有内容</li><li>类似 innerHTML，使用该语法，能够将HTML标签的样式呈现出来。</li></ul></li></ul><p>代码演示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 既然指令是vue提供的特殊的html属性，所以咱们写的时候就当成属性来用即可</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;uname&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;intro&quot;</span>&gt;</span>简介：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt; </span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">        const app = new Vue(&#123;</span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                uname:&#x27;张三&#x27;,</span><br><span class="line">                intro:&#x27;&lt;h2&gt;这是一个&lt;strong&gt;非常优秀&lt;/strong&gt;的boy&lt;h2&gt;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="九、条件渲染指令"><a href="#九、条件渲染指令" class="headerlink" title="九、条件渲染指令"></a>九、条件渲染指令</h2><p>条件判断指令，用来辅助开发者按需控制 DOM 的显示与隐藏。条件渲染指令有如下两个，分别是：</p><ol><li><p>v-show</p><ol><li>作用：  控制元素显示隐藏</li><li>语法：  v-show &#x3D; “表达式”   表达式值为 true 显示， false 隐藏</li><li>原理：  切换 display:none 控制显示隐藏</li><li>场景：频繁切换显示隐藏的场景</li></ol><p><img src="/../images/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/1681891228284.png"></p></li><li><p>v-if</p><ol><li>作用：  控制元素显示隐藏（条件渲染）</li><li>语法：  v-if&#x3D; “表达式”          表达式值 true显示， false 隐藏</li><li>原理：  基于条件判断，是否创建 或 移除元素节点</li><li>场景：  要么显示，要么隐藏，不频繁切换的场景</li></ol><p><img src="/../images/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/1681891237750.png"></p><p>示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>我是v-show控制的盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>我是v-if控制的盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">flag</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>v-else 和 v-else-if</p><ol><li>作用：辅助v-if进行判断渲染</li><li>语法：v-else  v-else-if&#x3D;”表达式”</li><li>需要紧接着v-if使用</li></ol></li></ol><p>示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：♂ 男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：♀ 女<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>成绩评定A：奖励电脑一台<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>成绩评定B：奖励周末郊游<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>成绩评定C：奖励零食礼包<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>成绩评定D：惩罚一周不能玩手机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">gender</span>: <span class="number">2</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">score</span>: <span class="number">95</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="十、事件绑定指令"><a href="#十、事件绑定指令" class="headerlink" title="十、事件绑定指令"></a>十、事件绑定指令</h2><p>使用Vue时，如需为DOM注册事件，及其的简单，语法如下：</p><ul><li>&lt;button v-on:事件名&#x3D;”内联语句”&gt;按钮</button></li><li>&lt;button v-on:事件名&#x3D;”处理函数”&gt;按钮</button></li><li>&lt;button v-on:事件名&#x3D;”处理函数(实参)”&gt;按钮</button></li><li><code>v-on:</code> 简写为 <strong>@</strong></li></ul><ol><li><p>内联语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">count</span>: <span class="number">100</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>事件处理函数</p><p>注意：</p><ul><li>事件处理函数应该写到一个跟data同级的配置项（methods）中</li><li>methods中的函数内部的this都指向Vue实例</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>切换显示隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">isShow</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>  3.给事件处理函数传参</p><ul><li><p>如果不传递任何参数，则方法无需加小括号；methods方法中可以直接使用 e 当做事件对象</p></li><li><p>如果传递了参数，则实参 <code>$event</code> 表示事件对象，固定用法。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">   .<span class="property">box</span> &#123;</span><br><span class="line">     <span class="attr">border</span>: 3px solid #<span class="number">000000</span>;</span><br><span class="line">     border-<span class="attr">radius</span>: 10px;</span><br><span class="line">     <span class="attr">padding</span>: 20px;</span><br><span class="line">     <span class="attr">margin</span>: 20px;</span><br><span class="line">     <span class="attr">width</span>: 200px;</span><br><span class="line">   &#125;</span><br><span class="line">   h3 &#123;</span><br><span class="line">     <span class="attr">margin</span>: 10px <span class="number">0</span> 20px <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   p &#123;</span><br><span class="line">     <span class="attr">margin</span>: 20px;</span><br><span class="line">   &#125;</span><br><span class="line"> &lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑自动售货机<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">button</span>&gt;</span>可乐5元<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">button</span>&gt;</span>咖啡10元<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">button</span>&gt;</span>牛奶8元<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>银行卡余额：&#123;&#123; money &#125;&#125;元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">money</span>: <span class="number">100</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="十一、属性绑定指令"><a href="#十一、属性绑定指令" class="headerlink" title="十一、属性绑定指令"></a>十一、属性绑定指令</h2><ol><li><strong>作用：</strong>动态设置html的标签属性 比如：src、url、title</li><li><strong>语法</strong>：**v-bind:**属性名&#x3D;“表达式”</li><li>**v-bind:**可以简写成 &#x3D;&gt;   <strong>:</strong></li></ol><p>比如，有一个图片，它的 <code>src</code> 属性值，是一个图片地址。这个地址在数据 data 中存储。</p><p>则可以这样设置属性值：</p><ul><li><code>&lt;img v-bind:src=&quot;url&quot; /&gt;</code></li><li><code>&lt;img :src=&quot;url&quot; /&gt;</code>   （v-bind可以省略）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">imgUrl</span>: <span class="string">&#x27;./imgs/10-02.png&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&#x27;hello 波仔&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="十二、小案例-波仔的学习之旅"><a href="#十二、小案例-波仔的学习之旅" class="headerlink" title="十二、小案例-波仔的学习之旅"></a>十二、小案例-波仔的学习之旅</h2><p>需求：默认展示数组中的第一张图片，点击上一页下一页来回切换数组中的图片</p><p>实现思路：</p><p>1.数组存储图片路径 [‘url1’,’url2’,’url3’，…]</p><p>2.可以准备个下标index 去数组中取图片地址。</p><p>3.通过v-bind给src绑定当前的图片地址</p><p>4.点击上一页下一页只需要修改下标的值即可</p><p>5.当展示第一张的时候，上一页按钮应该隐藏。展示最后一张的时候，下一页按钮应该隐藏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">button</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">list</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="string">&#x27;./imgs/11-00.gif&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="string">&#x27;./imgs/11-01.gif&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="string">&#x27;./imgs/11-02.gif&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="string">&#x27;./imgs/11-03.gif&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="string">&#x27;./imgs/11-04.png&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="string">&#x27;./imgs/11-05.png&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="十三、列表渲染指令"><a href="#十三、列表渲染指令" class="headerlink" title="十三、列表渲染指令"></a>十三、列表渲染指令</h2><p>Vue 提供了 v-for 列表渲染指令，用来辅助开发者基于一个数组来循环渲染一个列表结构。</p><p>v-for 指令需要使用 <code>(item, index) in arr</code> 形式的特殊语法，其中：</p><ul><li>item 是数组中的每一项</li><li>index 是每一项的索引，不需要可以省略</li><li>arr 是被遍历的数组</li></ul><p>此语法也可以遍历<strong>对象和数字</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历对象</span></span><br><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">&quot;(value, key, index) in object&quot;</span>&gt;&#123;&#123;value&#125;&#125;&lt;/div&gt;</span><br><span class="line"><span class="attr">value</span>:对象中的值</span><br><span class="line"><span class="attr">key</span>:对象中的键</span><br><span class="line"><span class="attr">index</span>:遍历索引从<span class="number">0</span>开始</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历数字</span></span><br><span class="line">&lt;p v-<span class="keyword">for</span>=<span class="string">&quot;item in 10&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/p&gt;</span><br><span class="line">item从<span class="number">1</span> 开始</span><br></pre></td></tr></table></figure><h2 id="十四、小案例-小黑的书架"><a href="#十四、小案例-小黑的书架" class="headerlink" title="十四、小案例-小黑的书架"></a>十四、小案例-小黑的书架</h2><p>需求：</p><p>1.根据左侧数据渲染出右侧列表（v-for）</p><p>2.点击删除按钮时，应该把当前行从列表中删除（获取当前行的id，利用filter进行过滤）</p><p><img src="/../images/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/1681896632672.png"></p><h2 id="十五、v-for中的key"><a href="#十五、v-for中的key" class="headerlink" title="十五、v-for中的key"></a>十五、v-for中的key</h2><p><strong>语法：</strong> key&#x3D;”唯一值”</p><p><strong>作用：</strong>给列表项添加的<strong>唯一标识</strong>。便于Vue进行列表项的<strong>正确排序复用</strong>。</p><p><strong>为什么加key：</strong>Vue 的默认行为会尝试原地修改元素（<strong>就地复用</strong>）</p><p>实例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in booksList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.author &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>key 的值只能是字符串 或 数字类型</li><li>key 的值必须具有唯一性</li><li>推荐使用  id 作为 key（唯一），不推荐使用 index 作为 key（会变化，不对应）</li></ol><h2 id="十六、双向绑定指令"><a href="#十六、双向绑定指令" class="headerlink" title="十六、双向绑定指令"></a>十六、双向绑定指令</h2><p>所谓双向绑定就是：</p><ol><li>数据改变后，呈现的页面结果会更新</li><li>页面结果更新后，数据也会随之而变</li></ol><p><strong>作用：</strong> 给<strong>表单元素</strong>（input、radio、select）使用，双向绑定数据，可以快速 <strong>获取</strong> 或 <strong>设置</strong> 表单元素内容</p><p><strong>语法：</strong>v-model&#x3D;”变量”</p><p><strong>需求：</strong>使用双向绑定实现以下需求</p><ol><li>点击登录按钮获取表单中的内容</li><li>点击重置按钮清空表单中的内容</li></ol><p><img src="/../images/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/1681913125738.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    账户：&lt;input type=<span class="string">&quot;text&quot;</span>&gt; &lt;br&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span>&gt; &lt;br&gt;&lt;br&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里是vue学习过程中第一天的知识点&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://ntostudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue基础知识" scheme="https://ntostudy.github.io/tags/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
